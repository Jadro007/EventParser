(function webpackUniversalModuleDefinition(root, factory) {
    if (typeof exports === 'object' && typeof module === 'object')
        module.exports = factory(); else if (typeof define === 'function' && define.amd)
        define([], factory); else if (typeof exports === 'object')
        exports.postscribe = factory(); else root.postscribe = factory()
})(this, function () {
    return (function (modules) {
        var installedModules = {};

        function __webpack_require__(moduleId) {
            if (installedModules[moduleId])
                return installedModules[moduleId].exports;
            var module = installedModules[moduleId] = {exports: {}, id: moduleId, loaded: !1};
            modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
            module.loaded = !0;
            return module.exports
        }

        __webpack_require__.m = modules;
        __webpack_require__.c = installedModules;
        __webpack_require__.p = "";
        return __webpack_require__(0)
    })([function (module, exports, __webpack_require__) {
        'use strict';
        var _postscribe = __webpack_require__(1);
        var _postscribe2 = _interopRequireDefault(_postscribe);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {'default': obj}
        }

        module.exports = _postscribe2['default']
    }, function (module, exports, __webpack_require__) {
        'use strict';
        exports.__esModule = !0;
        var _extends = Object.assign || function (target) {
            for (var i = 1; i < arguments.length; i++) {
                var source = arguments[i];
                for (var key in source) {
                    if (Object.prototype.hasOwnProperty.call(source, key)) {
                        target[key] = source[key]
                    }
                }
            }
            return target
        };
        exports['default'] = postscribe;
        var _writeStream = __webpack_require__(2);
        var _writeStream2 = _interopRequireDefault(_writeStream);
        var _utils = __webpack_require__(4);
        var utils = _interopRequireWildcard(_utils);

        function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
                return obj
            } else {
                var newObj = {};
                if (obj != null) {
                    for (var key in obj) {
                        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]
                    }
                }
                newObj['default'] = obj;
                return newObj
            }
        }

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {'default': obj}
        }

        function doNothing() {
        }

        var OPTIONS = {
            afterAsync: doNothing,
            afterDequeue: doNothing,
            afterStreamStart: doNothing,
            afterWrite: doNothing,
            autoFix: !0,
            beforeEnqueue: doNothing,
            beforeWriteToken: function beforeWriteToken(tok) {
                return tok
            },
            beforeWrite: function beforeWrite(str) {
                return str
            },
            done: doNothing,
            error: function error(e) {
                throw new Error(e.msg)
            },
            releaseAsync: !1
        };
        var nextId = 0;
        var queue = [];
        var active = null;

        function nextStream() {
            var args = queue.shift();
            if (args) {
                var options = utils.last(args);
                options.afterDequeue();
                args.stream = runStream.apply(undefined, args);
                options.afterStreamStart()
            }
        }

        function runStream(el, html, options) {
            active = new _writeStream2['default'](el, options);
            active.id = nextId++;
            active.name = options.name || active.id;
            postscribe.streams[active.name] = active;
            var doc = el.ownerDocument;
            var stash = {close: doc.close, open: doc.open, write: doc.write, writeln: doc.writeln};

            function _write(str) {
                str = options.beforeWrite(str);
                active.write(str);
                options.afterWrite(str)
            }

            _extends(doc, {
                close: doNothing, open: doNothing, write: function write() {
                    for (var _len = arguments.length, str = Array(_len), _key = 0; _key < _len; _key++) {
                        str[_key] = arguments[_key]
                    }
                    return _write(str.join(''))
                }, writeln: function writeln() {
                    for (var _len2 = arguments.length, str = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
                        str[_key2] = arguments[_key2]
                    }
                    return _write(str.join('') + '\n')
                }
            });
            var oldOnError = active.win.onerror || doNothing;
            active.win.onerror = function (msg, url, line) {
                options.error({msg: msg + ' - ' + url + ': ' + line});
                oldOnError.apply(active.win, [msg, url, line])
            };
            active.write(html, function () {
                _extends(doc, stash);
                active.win.onerror = oldOnError;
                options.done();
                active = null;
                nextStream()
            });
            return active
        }

        function postscribe(el, html, options) {
            if (utils.isFunction(options)) {
                options = {done: options}
            } else if (options === 'clear') {
                queue = [];
                active = null;
                nextId = 0;
                return
            }
            options = utils.defaults(options, OPTIONS);
            if (/^#/.test(el)) {
                el = window.document.getElementById(el.substr(1))
            } else {
                el = el.jquery ? el[0] : el
            }
            var args = [el, html, options];
            el.postscribe = {
                cancel: function cancel() {
                    if (args.stream) {
                        args.stream.abort()
                    } else {
                        args[1] = doNothing
                    }
                }
            };
            options.beforeEnqueue(args);
            queue.push(args);
            if (!active) {
                nextStream()
            }
            return el.postscribe
        }

        _extends(postscribe, {streams: {}, queue: queue, WriteStream: _writeStream2['default']})
    }, function (module, exports, __webpack_require__) {
        'use strict';
        exports.__esModule = !0;
        var _extends = Object.assign || function (target) {
            for (var i = 1; i < arguments.length; i++) {
                var source = arguments[i];
                for (var key in source) {
                    if (Object.prototype.hasOwnProperty.call(source, key)) {
                        target[key] = source[key]
                    }
                }
            }
            return target
        };
        var _prescribe = __webpack_require__(3);
        var _prescribe2 = _interopRequireDefault(_prescribe);
        var _utils = __webpack_require__(4);
        var utils = _interopRequireWildcard(_utils);

        function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
                return obj
            } else {
                var newObj = {};
                if (obj != null) {
                    for (var key in obj) {
                        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]
                    }
                }
                newObj['default'] = obj;
                return newObj
            }
        }

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {'default': obj}
        }

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function")
            }
        }

        var DEBUG_CHUNK = !1;
        var BASEATTR = 'data-ps-';
        var PROXY_STYLE = 'ps-style';
        var PROXY_SCRIPT = 'ps-script';

        function getData(el, name) {
            var attr = BASEATTR + name;
            var val = el.getAttribute(attr);
            return !utils.existy(val) ? val : String(val)
        }

        function setData(el, name) {
            var value = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
            var attr = BASEATTR + name;
            if (utils.existy(value) && value !== '') {
                el.setAttribute(attr, value)
            } else {
                el.removeAttribute(attr)
            }
        }

        var WriteStream = function () {
            function WriteStream(root) {
                var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
                _classCallCheck(this, WriteStream);
                this.root = root;
                this.options = options;
                this.doc = root.ownerDocument;
                this.win = this.doc.defaultView || this.doc.parentWindow;
                this.parser = new _prescribe2['default']('', {autoFix: options.autoFix});
                this.actuals = [root];
                this.proxyHistory = '';
                this.proxyRoot = this.doc.createElement(root.nodeName);
                this.scriptStack = [];
                this.writeQueue = [];
                setData(this.proxyRoot, 'proxyof', 0)
            }

            WriteStream.prototype.write = function write() {
                var _writeQueue;
                (_writeQueue = this.writeQueue).push.apply(_writeQueue, arguments);
                while (!this.deferredRemote && this.writeQueue.length) {
                    var arg = this.writeQueue.shift();
                    if (utils.isFunction(arg)) {
                        this._callFunction(arg)
                    } else {
                        this._writeImpl(arg)
                    }
                }
            };
            WriteStream.prototype._callFunction = function _callFunction(fn) {
                var tok = {type: 'function', value: fn.name || fn.toString()};
                this._onScriptStart(tok);
                fn.call(this.win, this.doc);
                this._onScriptDone(tok)
            };
            WriteStream.prototype._writeImpl = function _writeImpl(html) {
                this.parser.append(html);
                var tok = void 0;
                var script = void 0;
                var style = void 0;
                var tokens = [];
                while ((tok = this.parser.readToken()) && !(script = utils.isScript(tok)) && !(style = utils.isStyle(tok))) {
                    tok = this.options.beforeWriteToken(tok);
                    if (tok) {
                        tokens.push(tok)
                    }
                }
                if (tokens.length > 0) {
                    this._writeStaticTokens(tokens)
                }
                if (script) {
                    this._handleScriptToken(tok)
                }
                if (style) {
                    this._handleStyleToken(tok)
                }
            };
            WriteStream.prototype._writeStaticTokens = function _writeStaticTokens(tokens) {
                var chunk = this._buildChunk(tokens);
                if (!chunk.actual) {
                    return null
                }
                chunk.html = this.proxyHistory + chunk.actual;
                this.proxyHistory += chunk.proxy;
                this.proxyRoot.innerHTML = chunk.html;
                if (DEBUG_CHUNK) {
                    chunk.proxyInnerHTML = this.proxyRoot.innerHTML
                }
                this._walkChunk();
                if (DEBUG_CHUNK) {
                    chunk.actualInnerHTML = this.root.innerHTML
                }
                return chunk
            };
            WriteStream.prototype._buildChunk = function _buildChunk(tokens) {
                var nextId = this.actuals.length;
                var raw = [];
                var actual = [];
                var proxy = [];
                var len = tokens.length;
                for (var i = 0; i < len; i++) {
                    var tok = tokens[i];
                    var tokenRaw = tok.toString();
                    raw.push(tokenRaw);
                    if (tok.attrs) {
                        if (!/^noscript$/i.test(tok.tagName)) {
                            var id = nextId++;
                            actual.push(tokenRaw.replace(/(\/?>)/, ' ' + BASEATTR + 'id=' + id + ' $1'));
                            if (tok.attrs.id !== PROXY_SCRIPT && tok.attrs.id !== PROXY_STYLE) {
                                proxy.push(tok.type === 'atomicTag' ? '' : '<' + tok.tagName + ' ' + BASEATTR + 'proxyof=' + id + (tok.unary ? ' />' : '>'))
                            }
                        }
                    } else {
                        actual.push(tokenRaw);
                        proxy.push(tok.type === 'endTag' ? tokenRaw : '')
                    }
                }
                return {tokens: tokens, raw: raw.join(''), actual: actual.join(''), proxy: proxy.join('')}
            };
            WriteStream.prototype._walkChunk = function _walkChunk() {
                var node = void 0;
                var stack = [this.proxyRoot];
                while (utils.existy(node = stack.shift())) {
                    var isElement = node.nodeType === 1;
                    var isProxy = isElement && getData(node, 'proxyof');
                    if (!isProxy) {
                        if (isElement) {
                            this.actuals[getData(node, 'id')] = node;
                            setData(node, 'id')
                        }
                        var parentIsProxyOf = node.parentNode && getData(node.parentNode, 'proxyof');
                        if (parentIsProxyOf) {
                            this.actuals[parentIsProxyOf].appendChild(node)
                        }
                    }
                    stack.unshift.apply(stack, utils.toArray(node.childNodes))
                }
            };
            WriteStream.prototype._handleScriptToken = function _handleScriptToken(tok) {
                var _this = this;
                var remainder = this.parser.clear();
                if (remainder) {
                    this.writeQueue.unshift(remainder)
                }
                tok.src = tok.attrs.src || tok.attrs.SRC;
                tok = this.options.beforeWriteToken(tok);
                if (!tok) {
                    return
                }
                if (tok.src && this.scriptStack.length) {
                    this.deferredRemote = tok
                } else {
                    this._onScriptStart(tok)
                }
                this._writeScriptToken(tok, function () {
                    _this._onScriptDone(tok)
                })
            };
            WriteStream.prototype._handleStyleToken = function _handleStyleToken(tok) {
                var remainder = this.parser.clear();
                if (remainder) {
                    this.writeQueue.unshift(remainder)
                }
                tok.type = tok.attrs.type || tok.attrs.TYPE || 'text/css';
                tok = this.options.beforeWriteToken(tok);
                if (tok) {
                    this._writeStyleToken(tok)
                }
                if (remainder) {
                    this.write()
                }
            };
            WriteStream.prototype._writeStyleToken = function _writeStyleToken(tok) {
                var el = this._buildStyle(tok);
                this._insertCursor(el, PROXY_STYLE);
                if (tok.content) {
                    if (el.styleSheet && !el.sheet) {
                        el.styleSheet.cssText = tok.content
                    } else {
                        el.appendChild(this.doc.createTextNode(tok.content))
                    }
                }
            };
            WriteStream.prototype._buildStyle = function _buildStyle(tok) {
                var el = this.doc.createElement(tok.tagName);
                el.setAttribute('type', tok.type);
                utils.eachKey(tok.attrs, function (name, value) {
                    el.setAttribute(name, value)
                });
                return el
            };
            WriteStream.prototype._insertCursor = function _insertCursor(el, which) {
                this._writeImpl('<span id="' + which + '"/>');
                var cursor = this.doc.getElementById(which);
                if (cursor) {
                    cursor.parentNode.replaceChild(el, cursor)
                }
            };
            WriteStream.prototype._onScriptStart = function _onScriptStart(tok) {
                tok.outerWrites = this.writeQueue;
                this.writeQueue = [];
                this.scriptStack.unshift(tok)
            };
            WriteStream.prototype._onScriptDone = function _onScriptDone(tok) {
                if (tok !== this.scriptStack[0]) {
                    this.options.error({msg: 'Bad script nesting or script finished twice'});
                    return
                }
                this.scriptStack.shift();
                this.write.apply(this, tok.outerWrites);
                if (!this.scriptStack.length && this.deferredRemote) {
                    this._onScriptStart(this.deferredRemote);
                    this.deferredRemote = null
                }
            };
            WriteStream.prototype._writeScriptToken = function _writeScriptToken(tok, done) {
                var el = this._buildScript(tok);
                var asyncRelease = this._shouldRelease(el);
                var afterAsync = this.options.afterAsync;
                if (tok.src) {
                    el.src = tok.src;
                    this._scriptLoadHandler(el, !asyncRelease ? function () {
                        done();
                        afterAsync()
                    } : afterAsync)
                }
                try {
                    this._insertCursor(el, PROXY_SCRIPT);
                    if (!el.src || asyncRelease) {
                        done()
                    }
                } catch (e) {
                    this.options.error(e);
                    done()
                }
            };
            WriteStream.prototype._buildScript = function _buildScript(tok) {
                var el = this.doc.createElement(tok.tagName);
                utils.eachKey(tok.attrs, function (name, value) {
                    el.setAttribute(name, value)
                });
                if (tok.content) {
                    el.text = tok.content
                }
                return el
            };
            WriteStream.prototype._scriptLoadHandler = function _scriptLoadHandler(el, done) {
                function cleanup() {
                    el = el.onload = el.onreadystatechange = el.onerror = null
                }

                var error = this.options.error;

                function success() {
                    cleanup();
                    if (done != null) {
                        done()
                    }
                    done = null
                }

                function failure(err) {
                    cleanup();
                    error(err);
                    if (done != null) {
                        done()
                    }
                    done = null
                }

                function reattachEventListener(el, evt) {
                    var handler = el['on' + evt];
                    if (handler != null) {
                        el['_on' + evt] = handler
                    }
                }

                reattachEventListener(el, 'load');
                reattachEventListener(el, 'error');
                _extends(el, {
                    onload: function onload() {
                        if (el._onload) {
                            try {
                                el._onload.apply(this, Array.prototype.slice.call(arguments, 0))
                            } catch (err) {
                                failure({msg: 'onload handler failed ' + err + ' @ ' + el.src})
                            }
                        }
                        success()
                    }, onerror: function onerror() {
                        if (el._onerror) {
                            try {
                                el._onerror.apply(this, Array.prototype.slice.call(arguments, 0))
                            } catch (err) {
                                failure({msg: 'onerror handler failed ' + err + ' @ ' + el.src});
                                return
                            }
                        }
                        failure({msg: 'remote script failed ' + el.src})
                    }, onreadystatechange: function onreadystatechange() {
                        if (/^(loaded|complete)$/.test(el.readyState)) {
                            success()
                        }
                    }
                })
            };
            WriteStream.prototype._shouldRelease = function _shouldRelease(el) {
                var isScript = /^script$/i.test(el.nodeName);
                return !isScript || !!(this.options.releaseAsync && el.src && el.hasAttribute('async'))
            };
            return WriteStream
        }();
        exports['default'] = WriteStream
    }, function (module, exports, __webpack_require__) {
        (function webpackUniversalModuleDefinition(root, factory) {
            if (!0)
                module.exports = factory(); else if (typeof define === 'function' && define.amd)
                define([], factory); else if (typeof exports === 'object')
                exports.Prescribe = factory(); else root.Prescribe = factory()
        })(this, function () {
            return (function (modules) {
                var installedModules = {};

                function __webpack_require__(moduleId) {
                    if (installedModules[moduleId])
                        return installedModules[moduleId].exports;
                    var module = installedModules[moduleId] = {exports: {}, id: moduleId, loaded: !1};
                    modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
                    module.loaded = !0;
                    return module.exports
                }

                __webpack_require__.m = modules;
                __webpack_require__.c = installedModules;
                __webpack_require__.p = "";
                return __webpack_require__(0)
            })([function (module, exports, __webpack_require__) {
                'use strict';
                var _HtmlParser = __webpack_require__(1);
                var _HtmlParser2 = _interopRequireDefault(_HtmlParser);

                function _interopRequireDefault(obj) {
                    return obj && obj.__esModule ? obj : {'default': obj}
                }

                module.exports = _HtmlParser2['default']
            }, function (module, exports, __webpack_require__) {
                'use strict';
                exports.__esModule = !0;
                var _supports = __webpack_require__(2);
                var supports = _interopRequireWildcard(_supports);
                var _streamReaders = __webpack_require__(3);
                var streamReaders = _interopRequireWildcard(_streamReaders);
                var _fixedReadTokenFactory = __webpack_require__(6);
                var _fixedReadTokenFactory2 = _interopRequireDefault(_fixedReadTokenFactory);
                var _utils = __webpack_require__(5);

                function _interopRequireDefault(obj) {
                    return obj && obj.__esModule ? obj : {'default': obj}
                }

                function _interopRequireWildcard(obj) {
                    if (obj && obj.__esModule) {
                        return obj
                    } else {
                        var newObj = {};
                        if (obj != null) {
                            for (var key in obj) {
                                if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]
                            }
                        }
                        newObj['default'] = obj;
                        return newObj
                    }
                }

                function _classCallCheck(instance, Constructor) {
                    if (!(instance instanceof Constructor)) {
                        throw new TypeError("Cannot call a class as a function")
                    }
                }

                var detect = {
                    comment: /^<!--/,
                    endTag: /^<\//,
                    atomicTag: /^<\s*(script|style|noscript|iframe|textarea)[\s\/>]/i,
                    startTag: /^</,
                    chars: /^[^<]/
                };
                var HtmlParser = function () {
                    function HtmlParser() {
                        var _this = this;
                        var stream = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
                        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
                        _classCallCheck(this, HtmlParser);
                        this.stream = stream;
                        var fix = !1;
                        var fixedTokenOptions = {};
                        for (var key in supports) {
                            if (supports.hasOwnProperty(key)) {
                                if (options.autoFix) {
                                    fixedTokenOptions[key + 'Fix'] = !0
                                }
                                fix = fix || fixedTokenOptions[key + 'Fix']
                            }
                        }
                        if (fix) {
                            this._readToken = (0, _fixedReadTokenFactory2['default'])(this, fixedTokenOptions, function () {
                                return _this._readTokenImpl()
                            });
                            this._peekToken = (0, _fixedReadTokenFactory2['default'])(this, fixedTokenOptions, function () {
                                return _this._peekTokenImpl()
                            })
                        } else {
                            this._readToken = this._readTokenImpl;
                            this._peekToken = this._peekTokenImpl
                        }
                    }

                    HtmlParser.prototype.append = function append(str) {
                        this.stream += str
                    };
                    HtmlParser.prototype.prepend = function prepend(str) {
                        this.stream = str + this.stream
                    };
                    HtmlParser.prototype._readTokenImpl = function _readTokenImpl() {
                        var token = this._peekTokenImpl();
                        if (token) {
                            this.stream = this.stream.slice(token.length);
                            return token
                        }
                    };
                    HtmlParser.prototype._peekTokenImpl = function _peekTokenImpl() {
                        for (var type in detect) {
                            if (detect.hasOwnProperty(type)) {
                                if (detect[type].test(this.stream)) {
                                    var token = streamReaders[type](this.stream);
                                    if (token) {
                                        if (token.type === 'startTag' && /script|style/i.test(token.tagName)) {
                                            return null
                                        } else {
                                            token.text = this.stream.substr(0, token.length);
                                            return token
                                        }
                                    }
                                }
                            }
                        }
                    };
                    HtmlParser.prototype.peekToken = function peekToken() {
                        return this._peekToken()
                    };
                    HtmlParser.prototype.readToken = function readToken() {
                        return this._readToken()
                    };
                    HtmlParser.prototype.readTokens = function readTokens(handlers) {
                        var tok = void 0;
                        while (tok = this.readToken()) {
                            if (handlers[tok.type] && handlers[tok.type](tok) === !1) {
                                return
                            }
                        }
                    };
                    HtmlParser.prototype.clear = function clear() {
                        var rest = this.stream;
                        this.stream = '';
                        return rest
                    };
                    HtmlParser.prototype.rest = function rest() {
                        return this.stream
                    };
                    return HtmlParser
                }();
                exports['default'] = HtmlParser;
                HtmlParser.tokenToString = function (tok) {
                    return tok.toString()
                };
                HtmlParser.escapeAttributes = function (attrs) {
                    var escapedAttrs = {};
                    for (var name in attrs) {
                        if (attrs.hasOwnProperty(name)) {
                            escapedAttrs[name] = (0, _utils.escapeQuotes)(attrs[name], null)
                        }
                    }
                    return escapedAttrs
                };
                HtmlParser.supports = supports;
                for (var key in supports) {
                    if (supports.hasOwnProperty(key)) {
                        HtmlParser.browserHasFlaw = HtmlParser.browserHasFlaw || !supports[key] && key
                    }
                }
            }, function (module, exports) {
                'use strict';
                exports.__esModule = !0;
                var tagSoup = !1;
                var selfClose = !1;
                var work = window.document.createElement('div');
                try {
                    var html = '<P><I></P></I>';
                    work.innerHTML = html;
                    exports.tagSoup = tagSoup = work.innerHTML !== html
                } catch (e) {
                    exports.tagSoup = tagSoup = !1
                }
                try {
                    work.innerHTML = '<P><i><P></P></i></P>';
                    exports.selfClose = selfClose = work.childNodes.length === 2
                } catch (e) {
                    exports.selfClose = selfClose = !1
                }
                work = null;
                exports.tagSoup = tagSoup;
                exports.selfClose = selfClose
            }, function (module, exports, __webpack_require__) {
                'use strict';
                exports.__esModule = !0;
                var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
                    return typeof obj
                } : function (obj) {
                    return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj
                };
                exports.comment = comment;
                exports.chars = chars;
                exports.startTag = startTag;
                exports.atomicTag = atomicTag;
                exports.endTag = endTag;
                var _tokens = __webpack_require__(4);
                var REGEXES = {
                    startTag: /^<([\-A-Za-z0-9_]+)((?:\s+[\w\-]+(?:\s*=?\s*(?:(?:"[^"]*")|(?:'[^']*')|[^>\s]+))?)*)\s*(\/?)>/,
                    endTag: /^<\/([\-A-Za-z0-9_]+)[^>]*>/,
                    attr: /(?:([\-A-Za-z0-9_]+)\s*=\s*(?:(?:"((?:\\.|[^"])*)")|(?:'((?:\\.|[^'])*)')|([^>\s]+)))|(?:([\-A-Za-z0-9_]+)(\s|$)+)/g,
                    fillAttr: /^(checked|compact|declare|defer|disabled|ismap|multiple|nohref|noresize|noshade|nowrap|readonly|selected)$/i
                };

                function comment(stream) {
                    var index = stream.indexOf('-->');
                    if (index >= 0) {
                        return new _tokens.CommentToken(stream.substr(4, index - 1), index + 3)
                    }
                }

                function chars(stream) {
                    var index = stream.indexOf('<');
                    return new _tokens.CharsToken(index >= 0 ? index : stream.length)
                }

                function startTag(stream) {
                    var endTagIndex = stream.indexOf('>');
                    if (endTagIndex !== -1) {
                        var match = stream.match(REGEXES.startTag);
                        if (match) {
                            var _ret = function () {
                                var attrs = {};
                                var booleanAttrs = {};
                                var rest = match[2];
                                match[2].replace(REGEXES.attr, function (match, name) {
                                    if (!(arguments[2] || arguments[3] || arguments[4] || arguments[5])) {
                                        attrs[name] = ''
                                    } else if (arguments[5]) {
                                        attrs[arguments[5]] = '';
                                        booleanAttrs[arguments[5]] = !0
                                    } else {
                                        attrs[name] = arguments[2] || arguments[3] || arguments[4] || REGEXES.fillAttr.test(name) && name || ''
                                    }
                                    rest = rest.replace(match, '')
                                });
                                return {v: new _tokens.StartTagToken(match[1], match[0].length, attrs, booleanAttrs, !!match[3], rest.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, ''))}
                            }();
                            if ((typeof _ret === 'undefined' ? 'undefined' : _typeof(_ret)) === "object") return _ret.v
                        }
                    }
                }

                function atomicTag(stream) {
                    var start = startTag(stream);
                    if (start) {
                        var rest = stream.slice(start.length);
                        if (rest.match(new RegExp('<\/\\s*' + start.tagName + '\\s*>', 'i'))) {
                            var match = rest.match(new RegExp('([\\s\\S]*?)<\/\\s*' + start.tagName + '\\s*>', 'i'));
                            if (match) {
                                return new _tokens.AtomicTagToken(start.tagName, match[0].length + start.length, start.attrs, start.booleanAttrs, match[1])
                            }
                        }
                    }
                }

                function endTag(stream) {
                    var match = stream.match(REGEXES.endTag);
                    if (match) {
                        return new _tokens.EndTagToken(match[1], match[0].length)
                    }
                }
            }, function (module, exports, __webpack_require__) {
                'use strict';
                exports.__esModule = !0;
                exports.EndTagToken = exports.AtomicTagToken = exports.StartTagToken = exports.TagToken = exports.CharsToken = exports.CommentToken = exports.Token = undefined;
                var _utils = __webpack_require__(5);

                function _classCallCheck(instance, Constructor) {
                    if (!(instance instanceof Constructor)) {
                        throw new TypeError("Cannot call a class as a function")
                    }
                }

                var Token = exports.Token = function Token(type, length) {
                    _classCallCheck(this, Token);
                    this.type = type;
                    this.length = length;
                    this.text = ''
                };
                var CommentToken = exports.CommentToken = function () {
                    function CommentToken(content, length) {
                        _classCallCheck(this, CommentToken);
                        this.type = 'comment';
                        this.length = length || (content ? content.length : 0);
                        this.text = '';
                        this.content = content
                    }

                    CommentToken.prototype.toString = function toString() {
                        return '<!--' + this.content
                    };
                    return CommentToken
                }();
                var CharsToken = exports.CharsToken = function () {
                    function CharsToken(length) {
                        _classCallCheck(this, CharsToken);
                        this.type = 'chars';
                        this.length = length;
                        this.text = ''
                    }

                    CharsToken.prototype.toString = function toString() {
                        return this.text
                    };
                    return CharsToken
                }();
                var TagToken = exports.TagToken = function () {
                    function TagToken(type, tagName, length, attrs, booleanAttrs) {
                        _classCallCheck(this, TagToken);
                        this.type = type;
                        this.length = length;
                        this.text = '';
                        this.tagName = tagName;
                        this.attrs = attrs;
                        this.booleanAttrs = booleanAttrs;
                        this.unary = !1;
                        this.html5Unary = !1
                    }

                    TagToken.formatTag = function formatTag(tok) {
                        var content = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
                        var str = '<' + tok.tagName;
                        for (var key in tok.attrs) {
                            if (tok.attrs.hasOwnProperty(key)) {
                                str += ' ' + key;
                                var val = tok.attrs[key];
                                if (typeof tok.booleanAttrs === 'undefined' || typeof tok.booleanAttrs[key] === 'undefined') {
                                    str += '="' + (0, _utils.escapeQuotes)(val) + '"'
                                }
                            }
                        }
                        if (tok.rest) {
                            str += ' ' + tok.rest
                        }
                        if (tok.unary && !tok.html5Unary) {
                            str += '/>'
                        } else {
                            str += '>'
                        }
                        if (content !== undefined && content !== null) {
                            str += content + '</' + tok.tagName + '>'
                        }
                        return str
                    };
                    return TagToken
                }();
                var StartTagToken = exports.StartTagToken = function () {
                    function StartTagToken(tagName, length, attrs, booleanAttrs, unary, rest) {
                        _classCallCheck(this, StartTagToken);
                        this.type = 'startTag';
                        this.length = length;
                        this.text = '';
                        this.tagName = tagName;
                        this.attrs = attrs;
                        this.booleanAttrs = booleanAttrs;
                        this.html5Unary = !1;
                        this.unary = unary;
                        this.rest = rest
                    }

                    StartTagToken.prototype.toString = function toString() {
                        return TagToken.formatTag(this)
                    };
                    return StartTagToken
                }();
                var AtomicTagToken = exports.AtomicTagToken = function () {
                    function AtomicTagToken(tagName, length, attrs, booleanAttrs, content) {
                        _classCallCheck(this, AtomicTagToken);
                        this.type = 'atomicTag';
                        this.length = length;
                        this.text = '';
                        this.tagName = tagName;
                        this.attrs = attrs;
                        this.booleanAttrs = booleanAttrs;
                        this.unary = !1;
                        this.html5Unary = !1;
                        this.content = content
                    }

                    AtomicTagToken.prototype.toString = function toString() {
                        return TagToken.formatTag(this, this.content)
                    };
                    return AtomicTagToken
                }();
                var EndTagToken = exports.EndTagToken = function () {
                    function EndTagToken(tagName, length) {
                        _classCallCheck(this, EndTagToken);
                        this.type = 'endTag';
                        this.length = length;
                        this.text = '';
                        this.tagName = tagName
                    }

                    EndTagToken.prototype.toString = function toString() {
                        return '</' + this.tagName + '>'
                    };
                    return EndTagToken
                }()
            }, function (module, exports) {
                'use strict';
                exports.__esModule = !0;
                exports.escapeQuotes = escapeQuotes;

                function escapeQuotes(value) {
                    var defaultValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
                    return !value ? defaultValue : value.replace(/([^"]*)"/g, function (_, prefix) {
                        return (/\\/.test(prefix) ? prefix + '"' : prefix + '\\"')
                    })
                }
            }, function (module, exports) {
                'use strict';
                exports.__esModule = !0;
                exports['default'] = fixedReadTokenFactory;
                var EMPTY = /^(AREA|BASE|BASEFONT|BR|COL|FRAME|HR|IMG|INPUT|ISINDEX|LINK|META|PARAM|EMBED)$/i;
                var CLOSESELF = /^(COLGROUP|DD|DT|LI|OPTIONS|P|TD|TFOOT|TH|THEAD|TR)$/i;

                function correct(tok) {
                    if (tok && tok.type === 'startTag') {
                        tok.unary = EMPTY.test(tok.tagName) || tok.unary;
                        tok.html5Unary = !/\/>$/.test(tok.text)
                    }
                    return tok
                }

                function peekToken(parser, readTokenImpl) {
                    var tmp = parser.stream;
                    var tok = correct(readTokenImpl());
                    parser.stream = tmp;
                    return tok
                }

                function closeLast(parser, stack) {
                    var tok = stack.pop();
                    parser.prepend('</' + tok.tagName + '>')
                }

                function newStack() {
                    var stack = [];
                    stack.last = function () {
                        return this[this.length - 1]
                    };
                    stack.lastTagNameEq = function (tagName) {
                        var last = this.last();
                        return last && last.tagName && last.tagName.toUpperCase() === tagName.toUpperCase()
                    };
                    stack.containsTagName = function (tagName) {
                        for (var i = 0, tok; tok = this[i]; i++) {
                            if (tok.tagName === tagName) {
                                return !0
                            }
                        }
                        return !1
                    };
                    return stack
                }

                function fixedReadTokenFactory(parser, options, readTokenImpl) {
                    var stack = newStack();
                    var handlers = {
                        startTag: function startTag(tok) {
                            var tagName = tok.tagName;
                            if (tagName.toUpperCase() === 'TR' && stack.lastTagNameEq('TABLE')) {
                                parser.prepend('<TBODY>');
                                prepareNextToken()
                            } else if (options.selfCloseFix && CLOSESELF.test(tagName) && stack.containsTagName(tagName)) {
                                if (stack.lastTagNameEq(tagName)) {
                                    closeLast(parser, stack)
                                } else {
                                    parser.prepend('</' + tok.tagName + '>');
                                    prepareNextToken()
                                }
                            } else if (!tok.unary) {
                                stack.push(tok)
                            }
                        }, endTag: function endTag(tok) {
                            var last = stack.last();
                            if (last) {
                                if (options.tagSoupFix && !stack.lastTagNameEq(tok.tagName)) {
                                    closeLast(parser, stack)
                                } else {
                                    stack.pop()
                                }
                            } else if (options.tagSoupFix) {
                                readTokenImpl();
                                prepareNextToken()
                            }
                        }
                    };

                    function prepareNextToken() {
                        var tok = peekToken(parser, readTokenImpl);
                        if (tok && handlers[tok.type]) {
                            handlers[tok.type](tok)
                        }
                    }

                    return function fixedReadToken() {
                        prepareNextToken();
                        return correct(readTokenImpl())
                    }
                }
            }])
        })
    }, function (module, exports) {
        'use strict';
        exports.__esModule = !0;
        var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
            return typeof obj
        } : function (obj) {
            return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj
        };
        exports.existy = existy;
        exports.isFunction = isFunction;
        exports.each = each;
        exports.eachKey = eachKey;
        exports.defaults = defaults;
        exports.toArray = toArray;
        exports.last = last;
        exports.isTag = isTag;
        exports.isScript = isScript;
        exports.isStyle = isStyle;

        function existy(thing) {
            return thing !== void 0 && thing !== null
        }

        function isFunction(x) {
            return 'function' === typeof x
        }

        function each(arr, fn, target) {
            var i = void 0;
            var len = arr && arr.length || 0;
            for (i = 0; i < len; i++) {
                fn.call(target, arr[i], i)
            }
        }

        function eachKey(obj, fn, target) {
            for (var key in obj) {
                if (obj.hasOwnProperty(key)) {
                    fn.call(target, key, obj[key])
                }
            }
        }

        function defaults(options, _defaults) {
            options = options || {};
            eachKey(_defaults, function (key, val) {
                if (!existy(options[key])) {
                    options[key] = val
                }
            });
            return options
        }

        function toArray(obj) {
            try {
                return Array.prototype.slice.call(obj)
            } catch (e) {
                var _ret = function () {
                    var ret = [];
                    each(obj, function (val) {
                        ret.push(val)
                    });
                    return {v: ret}
                }();
                if ((typeof _ret === 'undefined' ? 'undefined' : _typeof(_ret)) === "object") return _ret.v
            }
        }

        function last(array) {
            return array[array.length - 1]
        }

        function isTag(tok, tag) {
            return !tok || !(tok.type === 'startTag' || tok.type === 'atomicTag') || !('tagName' in tok) ? !1 : !!~tok.tagName.toLowerCase().indexOf(tag)
        }

        function isScript(tok) {
            return isTag(tok, 'script')
        }

        function isStyle(tok) {
            return isTag(tok, 'style')
        }
    }])
});



var allowTracker = true;
var thisPageSasParams = '';

function TrackAds(adsObject, originalDivId) {

    "use strict";

    var internalConfig = {
        sendRequest: false,
        method: 'GET',
        bServerBaseUrl: 'https://a.denik.cz/vlm/bserver',
        jServerBaseUrl: 'https://a.denik.cz/vlm/jserver',
        paramRandom: '/random=' + getRandomInt(10000000, 99999999),
        paramViewId: '/viewid=' + getRandomInt(10000000, 99999999),
        debug: false
    };

    var notify = new Notify(internalConfig.debug);


    //first iteration through this object
    if (typeof adsObject === 'object') {

        notify.log("Setting divs");

        adsObject = addDefaultParams(adsObject);
        var bkParams = '';
        if (typeof bk_results !== 'undefined') {
            bkParams = getBkParams();
        }

        var cxSegm = '';
        if ((typeof cX !== 'undefined') && (typeof cX.getUserSegmentIds === 'function')) {

            cxSegm = getCxSegm();
        }

        var viewPort = '';
        viewPort = getViewPort();


        var safety = '';
        safety = getSafety();
        delete adsObject.ball.safety;

        var ab = '';
        ab = getAB();


        var consent = "";
        var gdpr = "";
        getConsentString();

        var rubiconTarget = '';
        rubiconTarget = getRubiconTarget();


        var customBallParams = '';
        var bxParams = '';
        var adsDivs = [];
        setEverythingFromAdsObj(adsObject);

        thisPageSasParams = internalConfig.paramViewId + customBallParams + bkParams + cxSegm + viewPort + ab + rubiconTarget + safety + consent + gdpr;

        if (typeof window.__cmp === "function" && consent === "" && gdpr === "") {
            internalConfig.sendRequest = false;
            window.__cmp('getConsentData', null,  sendRequestToBServer);
        }

        if (internalConfig.sendRequest) {
            sendRequestToBServer();
        }

        notify.log("End of script.");
        notify.groupEnd();
    }

    //lazy-loading case
    else if (typeof adsObject === 'string') {
        lazyLoadAds(adsObject, originalDivId);
    }
    //other load specific div, reload all, infinite loading
    else if (typeof adsObject === 'boolean') {
        if (typeof originalDivId !== 'undefined') {
            if (originalDivId === "reloadAllAds") {
                reloadAllAds();
            } else {
                loadSpecificDiv(originalDivId);
            }
        }
        // enable/disable tracker
        else {
            allowTracker = adsObject;
        }

    }


    function getConsentString() {
        var consentString = getCookieValue("euconsent");
        if (consentString !== "") {
            console.log("1st party consent ");
            consent = "/consent=" + consentString;
            gdpr = "/gdpr=1";
        }
    }

    /**
     * Notify
     * @param isDebug bool - debug
     * @returns notify proxy
     */
    function Notify(isDebug) {
        var c = console;
        var x = isDebug || false;
        this.log = function (a) {
            (x ? c.log(a) : '');
        },
            this.group = function (a) {
                (x ? c.group(a) : '');
            },
            this.groupEnd = function () {
                (x ? c.groupEnd() : '');
            },
            this.warn = function (a) {
                (x ? c.warn(a) : '');
            }
    }

    function getRubiconTarget() {
        var rubTarg = '';

        if((window.location.href.indexOf("dvb-t") > -1 || window.location.href.indexOf("dvbt") > -1)) {
            if(rubiconTarget == undefined) {
                var rubiconTarget = {
                    "cpexcontent": "dvbt"
                };
            } else {
                rubiconTarget["cpexcontent"] = "dvbt";
            }
            for (var rubKey in rubiconTarget) {
                if (rubiconTarget.hasOwnProperty(rubKey)) {
                    var rubVal = rubiconTarget[rubKey];
                    rubTarg += "/" + rubKey + "=" + rubVal;
                }
            }
        }
        return rubTarg;
    }

    function getAB() {
        var abParams = '', ab = '';
        var rand = getRandomInt(1, 2) + '';
        if (rand !== null) {
            if (rand === '1') {
                ab = 'a';
            }
            else {
                ab = 'b';
            }
            abParams = '/ab=' + ab;
        }
        return abParams;
    }


    function getSafety() {
        var currentUrl = window.location.href;
        if (typeof safetyGtm !== 'undefined') {
            var decrypted = window.atob(safetyGtm);
            var decryptedRegex = new RegExp(decrypted);
            if ((decryptedRegex).test(currentUrl)) {
                return '/safety=21';
            }
        }
        return '/safety=' + adsObject.ball.safety;
    }


    function getCxSegm() {

        var segments = cX.getUserSegmentIds({persistedQueryId: '97b33b32ddaded9f1b28b82f093a8be8e860cc9e'});
        var cxSegments = '/cxSegm=';
        if (segments.length === 0) {
            return '';
        } else {
            for (var key in segments) {
                if (segments.hasOwnProperty(key)) {
                    var segment = segments[key];
                    cxSegments += segment + ',';
                }
            }
            return cxSegments.slice(0, -1);
        }

    }

    function getBkParams() {
        var bkCampaigns = bk_results.campaigns;
        var bkCampaignsParams = '/bkCampIDs=';
        // var bkCategoriesParams = '/bkCategIDs=';

        if (bkCampaigns.length === 0) {
            return '';
        } else {
            //foreach campaign
            for (var bkKey in bkCampaigns) {
                if (bkCampaigns.hasOwnProperty(bkKey)) {
                    var bkCampaign = bkCampaigns[bkKey].campaign;

                    bkCampaignsParams += bkCampaign + ',';

                    //foreach category
                    // for (var cKey in bkCampaigns[bkKey].categories) {
                    //     if (bkCampaigns[bkKey].categories.hasOwnProperty(cKey)) {
                    //         var bkCategory = bkCampaigns[bkKey].categories[cKey]['categoryID'];
                    //         bkCategoriesParams += bkCategory + ',';
                    //     }
                    // }
                }
            }
            var trimmedCamp = bkCampaignsParams.slice(0, -1);
            // var trimmedCateg = bkCategoriesParams.slice(0, -1);

            return trimmedCamp
                // + trimmedCateg
                ;
        }
    }

    function getViewPort() {
        var w = Math.max(document.documentElement.clientWidth, window.innerWidth || 0);
        var h = Math.max(document.documentElement.clientHeight, window.innerHeight || 0);
        var viewPortParams = '';

        if (typeof w !== 'undefined' && typeof h !== 'undefined') {

            w = w.toString();
            h = h.toString();
            var fillCount = 4 - w.length;
            for (fillCount; fillCount > 0; fillCount--) {
                w = '0' + w;
            }
            fillCount = 4 - h.length;
            for (fillCount; fillCount > 0; fillCount--) {
                h = '0' + h;
            }

            viewPortParams = '/dev_display_width=' + w + '/dev_display_height=' + h;
        }

        return viewPortParams
    }


    /**
     * Add default params into the object
     * @param adsObj - ads object defined by users
     * @returns object - ads object with default params
     */
    function addDefaultParams(adsObj) {
        var completedAdsObj = {}, b, param;

        for (var bKey in adsObj) {
            b = adsObj[bKey];
            completedAdsObj[bKey] = {};
            //when its not ball - add default params
            if (bKey !== 'ball') {
                completedAdsObj[bKey] = {
                    size: 'df'
                };
            }

            for (var paramKey in b) {
                param = b[paramKey];
                if (paramKey === 'size' && param.indexOf('branding') !== -1 && typeof cpexSkinObject === 'object' && cpexSkinObject.isReadyToRender) {
                    completedAdsObj[bKey][paramKey] = param + ",1000x1000";
                } else {
                    completedAdsObj[bKey][paramKey] = param;
                }
            }
        }
        //cookie promoSeznam replacing template param + adding pixel
        var promoSeznam = getCookieValue("promoSeznam");
        // var img = document.createElement("img");
        // img.width = '1';
        // img.height = '1';
        if (promoSeznam === "true") {
            completedAdsObj.ball["template"] = "promoSeznam";
            // img.src = 'https://pixel.rubiconproject.com/tap.php?v=469074';
        } else {
            // img.src = 'https://pixel.rubiconproject.com/tap.php?v=469074|0';
        }
        // document.body.appendChild(img);

        return completedAdsObj;
    }


    /**
     * Set everything configured by user into the local variables
     * @param fullAdsObj - ads object defined by users
     * @returns boolean
     */
    function setEverythingFromAdsObj(fullAdsObj) {

        var b, param;
        for (var bKey in fullAdsObj) {
            b = fullAdsObj[bKey];
            //is it ball?
            if (bKey === 'ball') {
                for (var ballKey in b) {
                    param = b[ballKey];
                    customBallParams += '/' + ballKey + '=' + param;
                }

            }
            //it is bx variable
            else {
                //if Div specified in adsObj exists in DOM
                if (document.getElementById(b.pos)) {
                    //should it be lazy loaded?
                    if (b.lazyLoad === 'yes') {
                        setLoadLaterParams(fullAdsObj, bKey);
                    }
                    //load via bServer now
                    else {
                        setLoadLaterParams(fullAdsObj, bKey);
                        //do not load those divs immediately - are loaded during sliding in gallery only
                        if ((b.pos === 'square-3-gallery' || b.pos === 'm-square-gallery-GA') && ["5", "11", "17", "23"].indexOf(getURLParameter("photo")) === -1) {
                            continue;
                        }
                        bxParams += '/' + bKey;
                        for (var paramKey in b) {
                            param = b[paramKey];
                            //parameters which are not send to sas server (lazyLoad should never come here!)
                            if (paramKey === 'lazyLoad') {
                                continue;
                            }
                            bxParams += '/' + paramKey + '=' + param;
                            //if  pos -> add to adsDivs
                            if (paramKey === 'pos') {
                                adsDivs[bKey] = document.getElementById(b.pos);
                                internalConfig.sendRequest = true;
                            }
                        }
                    }
                    //Div not found in DOM
                } else {
                    notify.log('Div with id ' + b.pos + ' not found in DOM');
                }
            }
        }
        return true;
    }


    function getURLParameter(name) {
        return decodeURIComponent((new RegExp('[?|&]' + name + '=' + '([^&;]+?)(&|#|;|$)').exec(location.search) || [null, ''])[1].replace(/\+/g, '%20')) || null;
    }

    function setLoadLaterParams(fullAdsObj, bKey) {

        var paramsForUrL = '', divId = '';
        paramsForUrL += '/random=' + getRandomInt(10000000, 99999999) + internalConfig.paramViewId;

        if (fullAdsObj.ball) {
            for (var ballKey in fullAdsObj.ball) {
                paramsForUrL += '/' + ballKey + '=' + fullAdsObj.ball[ballKey];
            }
        }

        //adding other params
        paramsForUrL += bkParams;
        paramsForUrL += cxSegm;
        paramsForUrL += viewPort;
        paramsForUrL += ab;
        paramsForUrL += rubiconTarget;
        paramsForUrL += safety;
        paramsForUrL += consent;
        paramsForUrL += gdpr;

        for (var paramKey in fullAdsObj[bKey]) {
            var param = fullAdsObj[bKey][paramKey];
            //params not included in URL for server
            if (paramKey === 'lazyLoad') {
                continue;
            }
            //pos used into other variable
            if (paramKey === 'pos') {
                divId = param;

            }
            paramsForUrL += '/' + paramKey + '=' + param;
        }

        prepareLazyLoadDivs(paramsForUrL, divId, fullAdsObj[bKey]);

    }


    function prepareLazyLoadDivs(paramsForURL, divId, paramsObj) {
        //for this divs set params directly on div
        // if (paramsObj.pos === 'square-3-gallery' || paramsObj.pos === 'm-square-gallery-GA' || paramsObj.pos === 'leaderboard-gallery' || paramsObj.pos === 'm-leaderboard-gallery') {
        var commercialArticle = document.getElementById(paramsObj.pos);
        commercialArticle.setAttribute("data-targeting-params", paramsForURL);
        // }

        if (paramsObj.lazyLoad === 'yes') {
            var pseudoDiv = document.createElement("div");
            pseudoDiv.classList.add("_sasia-lazy-ad");
            pseudoDiv.setAttribute("data-lazy-params", paramsForURL);
            pseudoDiv.setAttribute("data-original-div-id", divId);
            pseudoDiv.style.margin = "0px";
            pseudoDiv.style.padding = "0px";
            pseudoDiv.style.minHeight = "1px";
            var originalDiv = document.getElementById(divId);
            var parent = originalDiv.parentElement;
            parent.insertBefore(pseudoDiv, originalDiv);
            return true;
        }
    }


    function lazyLoadAds(params, divId) {
        var url = internalConfig.jServerBaseUrl + params;
        postscribe('#' + divId, "<script src='" + url + "'></scr" + "ipt>", SASIA.ViewTracker.trackAdViews);
        //for outstream and outstream-m -> display block instead of inline-block
        setTimeout(function () {
            if (document.getElementById(divId).innerHTML.indexOf("try{AdsFallback") === -1) {
                if (divId === 'outstream' || divId === 'outstream-m') {
                    document.getElementById(divId).style.display = "block";
                } else {
                    document.getElementById(divId).style.display = "inline-block";
                }
                document.getElementById(divId).setAttribute('data-loaded', true);
            }
        }, 500)
    }


    function loadSpecificDiv(divToLoadId) {
        var divToLoad = document.getElementById(divToLoadId);

        var paramsForUrl = '/random=' + getRandomInt(10000000, 99999999) + thisPageSasParams;

        if (AdsObject !== 'undefined') {
            for (var AdsKey in AdsObject) {
                if (AdsObject.hasOwnProperty(AdsKey) && AdsObject[AdsKey].pos === divToLoadId) {
                    var adObj = AdsObject[AdsKey];
                    for (var paramKey in adObj) {
                        if (adObj.hasOwnProperty(paramKey)) {
                            var param = adObj[paramKey];

                            if (paramKey === 'size' && param.indexOf('branding') !== -1 && typeof cpexSkinObject === 'object' && cpexSkinObject.isReadyToRender) {
                                paramsForUrl += '/' + paramKey + '=' + param + ",1000x1000";
                            } else {
                                paramsForUrl += '/' + paramKey + '=' + param;
                            }
                        }
                    }
                }
            }
        }

        // old functionality - uncomment + remove var to revert
        // var paramsForUrl = divToLoad.attributes["data-targeting-params"].value;

        var url = internalConfig.jServerBaseUrl + paramsForUrl;
        divToLoad.innerText = '';
        postscribe('#' + divToLoadId, "<script src='" + url + "'></scr" + "ipt>", SASIA.ViewTracker.trackAdViews);
        setTimeout(function () {
            if (divToLoad.innerHTML.indexOf("try{AdsFallback") === -1) {
                divToLoad.style.display = "inline-block";
                divToLoad.setAttribute('data-loaded', true);
            }
            notify.log('loaded ' + divToLoadId)
        }, 500)

    }


    function reloadAllAds() {
        var allAdsDivs = document.querySelectorAll('div[data-targeting-params]');

        for (var key in allAdsDivs) {
            if (allAdsDivs.hasOwnProperty(key)) {
                var oneAdsDiv = allAdsDivs[key];
                var params = oneAdsDiv.attributes['data-targeting-params'].value;
                var divId = oneAdsDiv.id;
                var div = document.getElementById(divId);
                var url = internalConfig.jServerBaseUrl + params;
                div.innerText = '';

                postscribe('#' + divId, "<script src='" + url + "'></scr" + "ipt>", SASIA.ViewTracker.trackAdViews);

                if (divId === 'outstream' || divId === 'outstream-m') {
                    document.getElementById(divId).style.display = "block";
                } else {
                    document.getElementById(divId).style.display = "inline-block";
                }
                document.getElementById(divId).setAttribute('data-loaded', true);
            }

        }
        notify.log("reloaded all ads");

        var lazydivs = document.querySelectorAll("._sasia-lazy-ad");
        for (var lKey in lazydivs) {
            if (lazydivs.hasOwnProperty(lKey)) {
                var lazyDiv = lazydivs[lKey];
                lazyDiv.classList.remove("_sasia-lazy-ad");
            }
        }
        notify.log("removed params indicating lazyloading");


    }


    /**
     * Send request to Sas server, create script tag in head and fill ads divs
     */
    function sendRequestToBServer(result) {
        if (result && result.consentData) {
            console.log("3rd party consent");
            gdpr = "/gdpr=1";
            consent = "/consent=" + result.consentData;
        }

        var url = internalConfig.bServerBaseUrl + '/ball' + internalConfig.paramRandom + internalConfig.paramViewId + customBallParams + bkParams + cxSegm + viewPort + ab + rubiconTarget + safety + consent + gdpr + bxParams;

        var XMLHttp = new XMLHttpRequest();
        XMLHttp.open(internalConfig.method, url, true);
        XMLHttp.withCredentials = true;
        XMLHttp.onload = function () {
            if (XMLHttp.readyState === 4) {
                if (XMLHttp.status === 200) {
                    notify.log("Data from Ad Server were delivered.");
                    createScriptWithSasVariables(XMLHttp.response);
                    fillAdsSlots();
                } else {
                    notify.warn(XMLHttp.statusText);
                }
            }
        };

        XMLHttp.onerror = function () {
            notify.warn("There was an error making the request.");
        };

        XMLHttp.send();
        notify.log("Request sended to Ad Server");
    }


    /**
     * Get Random Number
     * @param a - range from
     * @param b - range end
     * @returns integer
     */
    function getRandomInt(a, b) {
        return Math.floor(Math.random() * (b - a + 1)) + a
    }

    /**
     * Creates script tag in head of the DOM
     * @param XMLResponse - response from Sas server with variables
     */
    function createScriptWithSasVariables(XMLResponse) {
        var script = document.createElement("script");
        script.innerHTML = XMLResponse;
        document.getElementsByTagName('head')[0].appendChild(script);
    }

    /**
     * Inserts values of variables into the Divs
     */
    function fillAdsSlots() {
        var url = window.location.hostname;
        for (var key in adsDivs) {

            var creative = window[key];

            if (!adsObject.hasOwnProperty(key)) {
                continue;
            }

            var divId = "#" + adsObject[key].pos;

            if (adsObject[key].pos === "m-sticky" && (creative.indexOf('data-rp-size-id=\\"60\\"') !== -1 || creative.indexOf('data-rp-size-id=\\"85\\"') !== -1)) {

                var sliderWidth = creative.indexOf('data-rp-size-id=\\"60\\"') !== -1 ? 320 : 300;
                var sliderHeight = creative.indexOf('data-rp-size-id=\\"60\\"') !== -1 ? 150 : 120;
                var sliderTag = creative;

                window.CPExSlideUp = window.CPExSlideUp || {};
                CPExSlideUp.que = CPExSlideUp.que || [];
                CPExSlideUp.que.push(function () {
                    if (typeof cpexCAFSettings !== 'undefined' && typeof cpexCAFSettings['slideup'] !== 'undefined') {
                        window.CPExSlideUp.setSettings(cpexCAFSettings['slideup']);
                    }
                    CPExSlideUp.showSlideUpWithAdTag(sliderTag, sliderWidth, sliderHeight);
                });
                var ss = document.createElement('script');
                ss.src = 'https://cdn.cpex.cz/slideup/cpex-slideup.js';
                document.head.appendChild(ss);

                continue;
            }

            if (adsObject[key].pos === "m-square-1" && creative.indexOf('data-rp-size-id="256"') !== -1) {
                document.getElementById("m-square-1").innerHTML += '<div id="interscroller-wrapper" style="width: 480px"></div>';
                document.getElementById("m-square-1").style.display = "inline-block";
                var si = document.createElement('script');
                si.src = 'https://cdn.cpex.cz/caf/v1/settings/vlm-caf-settings.js';
                document.head.appendChild(si);
                postscribe(divId, creative, SASIA.ViewTracker.trackAdViews);
                continue;
            }


            postscribe(divId, creative, SASIA.ViewTracker.trackAdViews);
            if (creative.indexOf("try{AdsFallback") === -1) {
                //for #outstream and #outstream-m -> display block instead of inline-block
                if (divId === '#outstream' || divId === '#outstream-m') {
                    adsDivs[key].style.display = "block";
                } else {
                    adsDivs[key].style.display = "inline-block";
                }
                adsDivs[key].setAttribute('data-loaded', true);
            }

        }

        //on kafe.cz display com-art-3-default if com-art-3 is not displayed
        var divStyle;
        if (url.indexOf("kafe.cz") !== -1 && document.getElementById("commercial-article-3") !== null) {
            divStyle = document.getElementById("commercial-article-3").style.display;
            if ((divStyle === "none" || divStyle === "") && document.getElementById("commercial-article-3-default") !== null) {
                document.getElementById("commercial-article-3-default").style.display = "inline-block";
            }
        }
        if (url.indexOf("kafe.cz") !== -1 && document.getElementById("m-commercial-article-3") !== null) {
            divStyle = document.getElementById("m-commercial-article-3").style.display;
            if ((divStyle === "none" || divStyle === "") && document.getElementById("m-commercial-article-3-default") !== null) {
                document.getElementById("m-commercial-article-3-default").style.display = "inline-block";
            }
        }

    }


    function checkForEmptyPos(url) {
        var problemSiteUrl = window.location.href;
        if (problemSiteUrl.indexOf("kafe.cz") !== -1 || problemSiteUrl.indexOf("denik.cz") !== -1) {
            var parsedUrl = url.match(/pos=[\d\w-_]+/g);
            if (parsedUrl !== null) {

                var allPos = ["button", "button-1", "button-2", "commercial-article-1", "commercial-article-1-ga", "commercial-article-1-hp", "commercial-article-2", "commercial-article-2-ga", "commercial-article-2-ga-hp", "commercial-article-2-hp", "commercial-article-3", "commercial-article-4-ga", "commercial-article-ks1", "commercial-article-ks2", "commercial-article-ks3", "commercial-article-ks4", "commercial-article-ks5", "commercial-article-ks6", "commercial-article-native-1", "commercial-article-native-2", "commercial-article-native-detail", "fullbanner-car-list", "fullbanner-chevrolet", "fullbanner-fiat", "fullbanner-ga", "fullbanner-hyundai", "fullbanner-opel", "fullbanner-par-list", "fullbanner-suzuki", "fullbanner-top", "leaderboard-bottom", "leaderboard-bottom-chevrolet", "leaderboard-bottom-fiat", "leaderboard-bottom-hyundai", "leaderboard-bottom-kia", "leaderboard-bottom-opel", "leaderboard-bottom-suzuki", "leaderboard-gallery", "leaderboard-gallery-soft-sip", "leaderboard-hp", "leaderboard-hp-1", "leaderboard-mapa", "leaderboard-middle", "leaderboard-middle-1", "leaderboard-middle-2", "leaderboard-top", "leaderboard-top-1", "leaderboard-top-2", "leaderboard-top-3", "leaderboard-top-chevrolet", "leaderboard-top-fiat", "leaderboard-top-hyundai", "leaderboard-top-kia", "leaderboard-top-mapa", "leaderboard-top-opel", "leaderboard-top-suzuki", "m-app-commercial-article-1", "m-app-commercial-article-1-ga", "m-app-commercial-article-2", "m-app-commercial-article-2-ga", "m-app-commercial-article-native-detail", "m-app-leaderboard-bottom", "m-app-leaderboard-gallery", "m-app-leaderboard-top", "m-app-poutak-top", "m-app-square-1", "m-app-square-2", "m-app-square-gallery-ga", "m-commercial-article-1", "m-commercial-article-1-ga", "m-commercial-article-2", "m-commercial-article-2-ga", "m-commercial-article-3", "m-commercial-article-native-1", "m-commercial-article-native-2", "m-commercial-article-native-detail", "m-leaderboard-bottom", "m-leaderboard-gallery", "m-leaderboard-gallery-soft", "m-leaderboard-top", "m-leaderboard-top-car-detail", "m-leaderboard-top-car-list", "m-leaderboard-top-hp", "m-leaderboard-top-rec-detail", "m-leaderboard-top-rec-hp", "m-leaderboard-top-rec-list", "m-outstream", "m-poutak-top", "m-selfpromo-1", "m-skyscraper-1", "m-skyscraper-2", "m-square-1", "m-square-2", "m-square-3", "m-square-bottom-car-detail", "m-square-bottom-car-list", "m-square-bottom-hp", "m-square-bottom-rec-detail", "m-square-bottom-rec-hp", "m-square-bottom-rec-list", "m-square-gallery-ga", "m-sticky", "megaboard-1", "middle-1", "middle-2", "middle-3", "middle-4", "outstream", "poutak-logo", "poutak-top", "roll", "selfpromo-1", "skyscraper-1", "skyscraper-2", "skyscraper-3", "skyscraper-ga", "skyscraper-gallery", "special-hp", "square-1", "square-2", "square-2-ga", "square-3-gallery", "sticky", "widesky-1-hp", "widesky-10-rec", "widesky-11-gallery", "widesky-2-hp", "widesky-3", "widesky-4", "widesky-5", "widesky-6", "widesky-7-fin", "widesky-8-fin", "widesky-9-rec", "commercial-article-3-GA", "hypertext-1", "hypertext-2", "hypertext-3", "hypertext-4"];

                for (var key in parsedUrl) {
                    var part = parsedUrl[key].substr(4).toLowerCase();
                    if (allPos.indexOf(part) === -1) {
                        sendToGA("EMPTYPOS", part);
                    }

                }
            }
        }
    }


    function checkForEmptySizes(url) {
        var problemSiteUrl = window.location.href;
        if (problemSiteUrl.indexOf("denik.cz") === -1) {
            var sizeValues = url.match(/size=[\d\w-_]+/g);
            if (sizeValues !== null) {

                var allSizes = ["1009x200", "250x89", "300x650", "450x600", "sticky", "630x60", "520x60", "760x200", "970x90", "1000x1000", "native", "video", "630x150", "234X60", "branding_1030", "970x200", "750x100", "1000x100", "470x275", "468x300", "branding_1008", "sticky-leaderboard", "videoAd-rollband", "videoAd-square", "videoAd-leaderboard", "branding_slozeny", "pr-clanek", "outstream", "800x600", "745x100", "620x100", "500x300", "336x280", "300x300", "320x50", "300x50", "320x100", "300x100", "250x250", "250x100", "120x600", "990x200", "990x100", "970x250", "970x210", "970x125", "970x100", "1000x300", "630x180", "branding", "960x100", "480x300", "1000x200", "300x600", "392x72", "120x90,", "120x60", "88x31", "300x250", "160x600", "120x240", "300x250", "728x90", "160x600"];

                for (var key in sizeValues) {
                    var oneSize = sizeValues[key].substr(5);
                    if (allSizes.indexOf(oneSize) === -1) {
                        sendToGA("MISSINGSIZE", oneSize);
                    }
                }
            }
            //no size defined
            else {
                sendToGA("EMPTYSIZE", " -.- ")
            }
        }
    }


    function getCookieValue(a, b) {
        b = document.cookie.match('(^|;)\\s*' + a + '\\s*=\\s*([^;]+)');
        return b ? b.pop() : '';
    }


    function serialize(a) {
        var b = [];
        for (var c in a) a.hasOwnProperty(c) && b.push(encodeURIComponent(c) + "=" + encodeURIComponent(a[c]));
        return b.join("&")
    }

    function createImage(a) {
        var b = new Image;
        b.src = a
    }

    function sendToGA(type, value) {
        var collector = "https://www.google-analytics.com/collect";
        var call = {
            "v": "1", //protocol version
            "tid": "UA-10339556-29",
            "cid": (58954569),
            "t": "event", //pageview,event,
            "dh": location.hostname,
            "ec": type,     // Event Category. Required.
            "ea": "Empty position", // Event Action. Required.
            "el": value || 'Unknown'  // Event label.
        };
        // track service call to deeperbot
        createImage(collector + "?" + serialize(call));
    }


}


window.SASIA_LAZYLOADER_DEBUG = !1, function (e) {
    var t, i, n = {};

    function a(e) {
        if (t) return t;
        t = this, e || (e = {}), t.checkInterval = e.checkInterval || a.defaultCheckInterval, t.intervalId = void 0, t.trackingData = {}
    }

    function d(e) {
        if (i) return i;
        i = this, e || (e = {})
    }

    void 0 === e.SASIA ? e.SASIA = n : n = e.SASIA, n.VERSION = "0.0.1", n.debug = function (t, i) {
        var n = "SASIA_" + t.toUpperCase() + "_DEBUG";
        "undefined" != typeof console && void 0 !== e[n] && "" !== e[n] && e[n] && (i = "SASIA." + t + ": " + i, console.log(i))
    }, a.impId = 0, a.prototype.packageName = "ViewTracker", a.defaultCheckInterval = 100, a.debug = function (e) {
        n.debug("ViewTracker", e)
    }, a.initialize = function (e) {
        return a.debug("Initializing"), t = new a(e)
    }, a.getInstance = function () {
        return t
    }, a.trackAdViews = function () {
        var e, t, i, n = document.querySelectorAll("._sasia_fcid");
        for (e in n) (t = n[e]) && t.nodeType && 1 === t.nodeType && ((i = {}).viewUrl = t.getAttribute("data-sasia-view-url"), i.viewTime = t.getAttribute("data-sasia-view-time"), i.viewPercent = t.getAttribute("data-sasia-view-percent"), i.viewUrl && "" != i.viewUrl && a.trackAdView(t, null, i))
    }, a.trackAdView = function (e, i, n) {
        var d, r, o;
        if (n || (n = {}), e.nodeType && 1 === e.nodeType ? (d = (i = e.id).replace("sasia-fcid-", ""), r = e) : (d = e, i || (i = "sasia-fcid-" + d), r = document.getElementById(i)), r && ((o = r.getAttribute("data-sasia-imp-id")) || (o = ++a.impId, r.setAttribute("data-sasia-imp-id", o)), a.debug("trackAdView: " + d + ":" + o), !t.trackingData[o])) {
            var c = parseInt(n.viewPercent, 10), s = parseInt(n.viewTime, 10), l = n.viewUrl;
            l && "" !== l && (c > 0 && s > 0 && l && "" != l && (t.trackingData[o] = {
                elem: r,
                inView: !1,
                inViewDuration: 0,
                inViewPercent: 0,
                isViewed: !1,
                fcId: d,
                impId: o,
                viewPercent: c,
                viewTime: s,
                viewUrl: l
            }), t.intervalId || t.startMonitoring())
        }
    }, a.prototype.startMonitoring = function () {
        a.debug("startMonitoring");
        var e = this;
        this.intervalId = setInterval(function () {
            e.checkViewed()
        }, this.checkInterval)
    }, a.prototype.stopMonitoring = function () {
        a.debug("stopMonitoring"), clearInterval(this.intervalId), this.intervalId = void 0
    }, a.prototype.checkViewed = function () {
        var t, i, n, a, d = 0;
        for (t in this.trackingData) if (this.trackingData.hasOwnProperty(t)) {
            if ((i = this.trackingData[t]).isViewed) continue;
            if (d++, !document.hasFocus() && !e.SASIA_VIEWTRACKER_ALLOW_BLURRED) continue;
            if (n = i.elem, !this.viewableStyle(n)) continue;
            a = n.getBoundingClientRect(), i.inViewPercent = this.checkViewedAd(a), i.inViewPercent >= i.viewPercent ? this.trackInView(i) : this.trackNotInView(i)
        }
        0 == d && this.stopMonitoring()
    }, a.prototype.trackInView = function (e) {
        var t;
        if (e.inView) {
            if (e.inViewDuration += this.checkInterval, a.debug("Ad " + e.fcId + ":" + e.impId + " in-view:" + e.inViewPercent + "%, duration:" + e.inViewDuration), e.inViewDuration >= e.viewTime) {
                e.isViewed = !0;
                try {
                    a.debug("Ad " + e.fcId + ":" + e.impId + " viewed! Url:" + e.viewUrl), (t = new XMLHttpRequest).open("GET", e.viewUrl), t.onload = function () {
                        200 == t.status ? a.debug("Callback success for FCID:" + e.fcId) : a.debug("Callback FAIL for FCID:" + e.fcId)
                    }, t.send()
                } catch (e) {
                    a.debug("Exception"), a.debug(e)
                }
            }
        } else e.inView = !0
    }, a.prototype.viewableStyle = function (t) {
        var i;
        return e.getComputedStyle ? i = e.getComputedStyle(t) : t.currentStyle && (i = t.currentStyle), "hidden" != i.visibility && "none" != i.display
    }, a.prototype.trackNotInView = function (e) {
        e.inViewPercent > 0 && a.debug("Ad " + e.fcId + ":" + e.impId + " in-view:" + e.inViewPercent + "%, duration:" + e.inViewDuration), e.inView = !1, e.inViewDuration = 0
    }, a.prototype.checkViewedAd = function (t) {
        var i, n, a, d, r, o, c, s, l, u, h;
        return s = 0, e.innerHeight = e.innerHeight || document.documentElement.clientHeight || document.body.clientHeight, e.innerWidth = e.innerWidth || document.documentElement.clientWidth || document.body.clientWidth, u = t.width || t.right - t.left, h = t.height || t.bottom - t.top, (n = t.top) < 0 ? (n = Math.abs(n)) >= h && (n = h) : n = 0, (i = t.bottom - e.innerHeight) < 0 && (i = 0), (i = h - i) < 0 && (i = 0), (a = t.left) < 0 ? (a = Math.abs(a)) >= u && (a = u) : a = 0, (d = t.right - e.innerWidth) < 0 && (d = 0), (d = u - d) < 0 && (d = 0), n < i && (r = i - n), a < d && (o = d - a), r > 0 && o > 0 && (c = r * o, l = h * u, s = Math.floor(c / l * 100)), s
    }, a.initialize(), d.debug = function (e) {
        n.debug("LazyLoader", e)
    }, d.initialize = function (e) {
        if (d.debug("Initializing"), "function" == typeof postscribe) return (i = new d(e)).distanceThreshold = 200, i;
        console.error("Postcribe not installed. SASIA.LazyLoader not initialized")
    }, d.startLazyLoading = function () {
        i && (d.debug("Start monitoring"), scrollHandler = function () {
            i.checkLazyLoaded()
        }, i.checkLazyLoaded(), d.debug("Adding scroll listener"), document.addEventListener("scroll", scrollHandler))
    }, d.prototype.checkLazyLoaded = function () {
        var e, t, i;
        if (d.debug("checkLazyLoaded"), (i = document.querySelectorAll("._sasia-lazy-ad")).length > 0) for (d.debug("Found " + i.length + " unloaded ads(s)"), e = 0; e < i.length; e++) t = i.item(e), this.needsLazyLoad(t.getBoundingClientRect()) && (d.debug("Loading 1 unloaded add within " + this.distanceThreshold + " distance threshold"), this.lazyLoadAd(t)); else d.debug("No unloaded ads found.")
    }, d.prototype.needsLazyLoad = function (t) {
        var i, n;
        return i = !1, n = !1, e.innerHeight = e.innerHeight || document.documentElement.clientHeight || document.body.clientHeight, e.innerWidth = e.innerWidth || document.documentElement.clientWidth || document.body.clientWidth, t.width || t.right - t.left, t.height || t.bottom - t.top, t.top >= 0 && t.top <= e.innerHeight + this.distanceThreshold && (i = !0), t.bottom <= e.innerHeight && t.bottom >= -this.distanceThreshold && (i = !0), t.left >= 0 && t.left <= e.innerWidth + this.distanceThreshold && (n = !0), t.right <= e.innerWidth && t.right >= -this.distanceThreshold && (n = !0), n && i
    }, d.prototype.lazyLoadAd = function (e) {
        d.debug("Loading ad");
        var t = "<script>TrackAds('" + e.attributes["data-lazy-params"].value + "', '" + e.attributes["data-original-div-id"].value + "')<\/script>";
        e.className = e.className.replace("_sasia-lazy-ad", ""), e.className += " _sasia-loaded", postscribe(e, t, n.ViewTracker.trackAdViews)
    }, d.setDistanceThreshold = function (e) {
        i.distanceThreshold = parseInt(e, 10)
    }, "function" == typeof postscribe && d.initialize(), n.ViewTracker = a, n.LazyLoader = d, n.ViewTracker.trackAdViews(), n.LazyLoader.startLazyLoading(), document.addEventListener ? document.addEventListener("DOMContentLoaded", function () {
        n.ViewTracker.trackAdViews(), n.LazyLoader.startLazyLoading()
    }) : document.attachEvent && e.attachEvent("onload", function () {
        n.ViewTracker.trackAdViews(), n.LazyLoader.startLazyLoading()
    })
}(window);
