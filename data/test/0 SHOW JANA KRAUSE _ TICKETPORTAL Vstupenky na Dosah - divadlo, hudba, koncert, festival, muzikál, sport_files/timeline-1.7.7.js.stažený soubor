// http://daniel.steigerwald.cz (MIT Licensed)

var useElasticSearch = true;

var $class = function (def) {
    var constructor = def.hasOwnProperty('constructor') ? def.constructor : function () { };
    for (var name in $class.Initializers) {
        $class.Initializers[name].call(constructor, def[name], def);
    }
    return constructor;
};
$class.Initializers = {

    Extends: function (parent) {
        if (parent) {
            var F = function () { };
            this._superClass = F.prototype = parent.prototype;
            this.prototype = new F;
        }
    },

    Mixins: function (mixins, def) {
        // kostruktoru pÅ™idÃ¡me metodu mixin
        this.mixin = function (mixin) {
            for (var key in mixin) {
                if (key in $class.Initializers) continue;
                this.prototype[key] = mixin[key];
            }
            this.prototype.constructor = this;
        };
        // a pÅ™idanou metodu hned vyuÅ¾ijeme pro rozÅ¡Ã­Å™enÃ­ prototype
        var objects = [def].concat(mixins || []);
        for (var i = 0, l = objects.length; i < l; i++) {
            this.mixin(objects[i]);
        }
    }

};
// end http://daniel.steigerwald.cz (MIT Licensed)

var lokality = new Array();
lokality["sk"] = 1;
lokality["cz"] = 2;
lokality["hu"] = 3;
lokality["pl"] = 4;
lokality["bg"] = 5;

var mapa_otvorena = false;

Date.prototype.addDays = function (days) {
    var dat = new Date(this.valueOf());
    dat.setDate(dat.getDate() + days);
    return dat;
}

function isnull(obj) {
    if (typeof (obj) == 'undefined') return true;
    if (obj == null) return true;

    return false;
}

function _in(a, array) {
    for (var i in array) {
        if (array.hasOwnProperty(i)) {
            if (a == array[i])
                return true;
        }
    }
    return false;
}

function isempty(obj) {
    if (obj instanceof Array) {
        if (obj.length == 0)
            return true;
        else
            return false;
    }
    return false;
}

function DateToString_small(datum, hour) {
    var format = datumFormat;
    format = format.replace("yyyy.", "").replace("yy.", "").replace(".yyyy", "").replace(".yy", "");

    if (hour == false) {
        format = format.replace(/H/g, "")
            .replace(/m/g, "")
            .replace(":", "")
            .replace(/^\s*/, "").replace(/\s*$/, "");
    }

    return Format_Datum(format, datum);
}

function DateToString(datum, hour) {

    var format = datumFormat;

    if (hour == false) {
        format = format.replace(/H/g, "")
            .replace(/m/g, "")
            .replace(":", "")
            .replace(/^\s*/, "").replace(/\s*$/, "");
    }

    return Format_Datum(format, datum);
}

function Format_Datum(format, datum) {
    var ret = format;

    ret = ret.replace("dd", (datum.getDate() < 10 ? ("0" + datum.getDate()) : datum.getDate()));
    ret = ret.replace("d", datum.getDate());
    ret = ret.replace("MM", ((datum.getMonth() + 1) < 10 ? ("0" + (datum.getMonth() + 1)) : (datum.getMonth() + 1)));
    ret = ret.replace("M", (datum.getMonth() + 1));
    ret = ret.replace("yyyy", datum.getFullYear());
    ret = ret.replace("yy", datum.getFullYear() % 100);
    ret = ret.replace("HH", (datum.getHours() < 10 ? ("0" + datum.getHours()) : datum.getHours()));
    ret = ret.replace("H", datum.getHours());
    ret = ret.replace("mm", (datum.getMinutes() < 10 ? ("0" + datum.getMinutes()) : datum.getMinutes()));
    ret = ret.replace("m", datum.getMinutes());

    return ret;
}

function Format_Range_Datum(datum1, datum2) {
    if (lokalita == "empik" || lokalita == "pl") {
        if (datum2 == null || (datum1.getFullYear() == datum2.getFullYear() && datum1.getMonth() == datum2.getMonth() && datum1.getDate() == datum2.getDate()))           // Nejedna sa o rozsah ale samostatny datum 2. augusta 2015 (Pondelok)
            return datum1.getDate() + " " + Date_strMonth_2(datum1) + " " + datum1.getFullYear() + " (" + Date_dayOfWeek(datum1) + ")";

        if (datum1.getFullYear() == datum2.getFullYear() && datum1.getMonth() == datum2.getMonth())
            return datum1.getDate() + "-" + datum2.getDate() + " " + Date_strMonth_2(datum1) + " " + datum1.getFullYear();

        if (datum1.getFullYear() == datum2.getFullYear())
            return datum1.getDate() + " " + Date_strMonth_2(datum1) + "-" + datum2.getDate() + " " + Date_strMonth_2(datum2) + " " + datum1.getFullYear();

        return datum1.getDate() + " " + Date_strMonth_2(datum1) + "." + datum1.getFullYear() + "-" + datum2.getDate() + " " + Date_strMonth_2(datum2) + " " + datum2.getFullYear();
    }

    if (userLang == 'HU') {
        if (datum2 == null || (datum1.getFullYear() == datum2.getFullYear() && datum1.getMonth() == datum2.getMonth() && datum1.getDate() == datum2.getDate()))
            return datum1.getFullYear() + "." + Date_strMonth_2(datum1).toLowerCase() + " " + datum1.getDate() + ". " + "(" + Date_dayOfWeek(datum1) + ")";

        if (datum1.getFullYear() == datum2.getFullYear() && datum1.getMonth() == datum2.getMonth())
            return datum1.getFullYear() + "." + Date_strMonth_2(datum1).toLowerCase() + " " + datum1.getDate() + ".-" + datum2.getDate() + ".";

        if (datum1.getFullYear() == datum2.getFullYear())
            return datum1.getFullYear() + "." + Date_strMonth_2(datum1).toLowerCase() + "." + datum1.getDate() + " - " + Date_strMonth_2(datum2).toLowerCase() + " " + datum2.getDate() + ".";

        return datum1.getFullYear() + "." + Date_strMonth_2(datum1).toLowerCase() + " " + datum1.getDate() + "." + " - " + datum2.getFullYear() + "." + Date_strMonth_2(datum2).toLowerCase() + " " + datum2.getDate() + ".";
    }


    if (datum2 == null || (datum1.getFullYear() == datum2.getFullYear() && datum1.getMonth() == datum2.getMonth() && datum1.getDate() == datum2.getDate()))
        return datum1.getDate() + ". " + Date_strMonth_2(datum1).toLowerCase() + " " + datum1.getFullYear() + " (" + Date_dayOfWeek(datum1) + ")";

    if (datum1.getFullYear() == datum2.getFullYear() && datum1.getMonth() == datum2.getMonth())
        return datum1.getDate() + ". - " + datum2.getDate() + ". " + Date_strMonth_2(datum1).toLowerCase() + " " + datum1.getFullYear();

    if (datum1.getFullYear() == datum2.getFullYear())
        return datum1.getDate() + ". " + Date_strMonth_2(datum1).toLowerCase() + " - " + datum2.getDate() + ". " + Date_strMonth_2(datum2).toLowerCase() + " " + datum1.getFullYear();

    return datum1.getDate() + ". " + Date_strMonth_2(datum1).toLowerCase() + " " + datum1.getFullYear() + " - " + datum2.getDate() + ". " + Date_strMonth_2(datum2).toLowerCase() + " " + datum2.getFullYear();
}

function TwoDigit(number) {
    if (number < 10) return "0" + number;
    else return "" + number;
}

function Format_Range_Datum_small(datum1, datum2)
{
    if (lokalita == "empik" || lokalita == "pl") {
        if (datum2 == null || (datum1.getFullYear() == datum2.getFullYear() && datum1.getMonth() == datum2.getMonth() && datum1.getDate() == datum2.getDate()))           // Nejedna sa o rozsah ale samostatny datum 2. augusta 2015 (Pondelok)
            return TwoDigit(datum1.getDate()) + "." + (datum1.getMonth() + 1) + " " + datum1.getFullYear();

        if (datum1.getFullYear() == datum2.getFullYear() && datum1.getMonth() == datum2.getMonth())
            return TwoDigit(datum1.getDate()) + "-" + TwoDigit(datum2.getDate()) + "." + ((datum1.getMonth() + 1) < 10 ? "0" + (datum1.getMonth() + 1) : (datum1.getMonth() + 1)) + "." + datum1.getFullYear();

        if (datum1.getFullYear() == datum2.getFullYear())
            return TwoDigit(datum1.getDate()) + "." + (datum1.getMonth() + 1) + "-" + TwoDigit(datum2.getDate()) + "." + (datum2.getMonth() + 1) + "." + datum1.getFullYear();

        return TwoDigit(datum1.getDate()) + "." + (datum1.getMonth() + 1) + "." + datum1.getFullYear() + "-" + TwoDigit(datum2.getDate()) + "." + (datum2.getMonth() + 1) + "." + datum2.getFullYear();
    }


    if (userLang == 'HU') {
        if (datum2 == null || (datum1.getFullYear() == datum2.getFullYear() && datum1.getMonth() == datum2.getMonth() && datum1.getDate() == datum2.getDate()))
            return datum1.getFullYear() + "." + (datum1.getMonth() + 1) + "." + datum1.getDate() + ".";

        if (datum1.getFullYear() == datum2.getFullYear() && datum1.getMonth() == datum2.getMonth())
            return datum1.getFullYear() + "." + (datum1.getMonth() + 1) + "." + datum1.getDate() + "-" + datum2.getDate() + ".";

        if (datum1.getFullYear() == datum2.getFullYear())
            return datum1.getFullYear() + "." + (datum1.getMonth() + 1) + "." + datum1.getDate() + ".-" + (datum2.getMonth() + 1) + "." + datum2.getDate() + ".";

        return datum1.getFullYear() + "." + (datum1.getMonth() + 1) + datum1.getDate() + " - " + datum2.getFullYear() + "." + (datum2.getMonth() + 1) + "." + datum2.getDate();
    }


    if (datum2 == null || (datum1.getFullYear() == datum2.getFullYear() && datum1.getMonth() == datum2.getMonth() && datum1.getDate() == datum2.getDate()))
        return datum1.getDate() + ". " + (datum1.getMonth() + 1) + ". " + datum1.getFullYear();

    if (datum1.getFullYear() == datum2.getFullYear() && datum1.getMonth() == datum2.getMonth())
        return datum1.getDate() + ". - " + datum2.getDate() + "." + (datum1.getMonth() + 1) + ". " + datum1.getFullYear();

    if (datum1.getFullYear() == datum2.getFullYear())
        return datum1.getDate() + "." + (datum1.getMonth() + 1) + ". - " + datum2.getDate() + "." + (datum2.getMonth() + 1) + ". " + datum1.getFullYear();

    return datum1.getDate() + "." + (datum1.getMonth() + 1) + "." + datum1.getFullYear() + " - " + datum2.getDate() + "." + (datum2.getMonth() + 1) + ". " + datum2.getFullYear();
}

function Format_mena(cena) {

    if (lokalita == "cz" || lokalita == "hu") {
        if (Number(cena.toFixed(0)) == cena) {
            if (cena < 1000)
                return cena.toFixed(0) + " " + lang["localCurrency"];
            else
                return ((cena - (cena % 1000)) / 1000) + " " + ((cena % 1000) < 100 ? "0" : "") + ((cena % 1000) < 10 ? "0" : "") + (cena % 1000).toFixed(0) + " " + lang["localCurrency"];
        }
        else {
            if (cena < 1000)
                return cena.toFixed(2) + " " + lang["localCurrency"];
            else 
                return ((cena - (cena % 1000)) / 1000) + " " + ((cena % 1000) < 100 ? "0" : "") + ((cena % 1000) < 10 ? "0" : "") + (cena % 1000).toFixed(2) + " " + lang["localCurrency"];
        }
    }

    return cena.toFixed(2) + " " + lang["localCurrency"];
}

// Vracia novy objekt datumu ktoremu nastavi cas na 0:0:0.000
function Date_remove_hour(datum) {
    var ret = new Date(datum);
    ret.setHours(0);
    ret.setMinutes(0);
    ret.setSeconds(0);
    ret.setMilliseconds(0);

    return ret;
}

// Vracia nazov dna (pondelok, Utorok, popr. Dnes, Zajtra) 
function Date_dayOfWeek(datum) {

    /*var d1 = Date_remove_hour(datum);
    var d2 = Date_remove_hour(DateNow());
    var dif = (d1.getTime() - d2.getTime()) / 3600000.0;

    if (dif > -1 && dif < 1)
        return lang["Dnes"];
    if (dif > 23 && dif < 25)
        return lang["Zajtra"];*/

    return lang["DayOfWeek_" + datum.getDay()];
}

// Vracia nazov mesiaca
function Date_strMonth(datum) {
    return lang["Month_" + (datum.getMonth() + 1)];
}

// Vracia nazov mesiaca v druhom pade
function Date_strMonth_2(datum) {
    return lang["Month_" + (datum.getMonth() + 1) + "_2"];
}

// Vracia aktualny datum a cas zosynchronizovany s webom
function DateNow() {
    return new Date();
}


// Cas posielame ako pocet minut od 24.9.2013 07:20:00 s presnostou na 1 minutu
// 1 minuta ma 60 000 ms
// 1.jan 1970 do 24.9.2013 7:20 je 23000000 minut
function JsonToolsToDate(numberDate) {
    return new Date((numberDate + 23000000) * 60000);
}

// Zisti ci prehliadac je mobilne zariadenie
var __ismobile__ = null;
function IsMobile() {

    if (__ismobile__ == null) {

        if (navigator.userAgent.match(/Android/i)
                || navigator.userAgent.match(/iPhone/i)
                || navigator.userAgent.match(/iPad/i)
                || navigator.userAgent.match(/iPod/i)
                || navigator.userAgent.match(/BlackBerry/i)
                || navigator.userAgent.match(/webOS/i)) {
            __ismobile__ = true;
            return true;
        }

        __ismobile__ = false;
        return false;
    }
    else {
        return __ismobile__;
    }
}

var QueryString = new Array();

function init_query_string() {
    var search = location.search.substr(1);
    var params = search.split("&");

    for (var i = 0; i < params.length; i++) {
        var param = params[i];

        if (param.indexOf("=") == -1)
            QueryString[param] = "";
        else {
            var p = param.split("=");
            QueryString[p[0]] = p[1];
        }
    }
}
init_query_string();

function linkIframe(url) {
    if (QueryString["iframe"] != null) {

        var newurl = url;

        if (newurl.indexOf("iframe") == -1) {

            if (newurl.indexOf("?") != -1)
                newurl += "&iframe";
            else
                newurl += "?iframe";
        }
        if (QueryString["fb"] != null) {
            if (newurl.indexOf("&fb") == -1 && newurl.indexOf("?fb") == -1) {

                if (newurl.indexOf("?") != -1)
                    newurl += "&fb";
                else
                    newurl += "?fb";
            }
        }
        if (QueryString["noembeded"] != null) {
            if (newurl.indexOf("&noembeded") == -1 && newurl.indexOf("?noembeded") == -1) {

                if (newurl.indexOf("?") != -1)
                    newurl += "&noembeded";
                else
                    newurl += "?noembeded";
            }
        }
        if (QueryString["idpartner"] != null) {
            if (newurl.indexOf("idpartner") == -1) {

                if (newurl.indexOf("?") != -1)
                    newurl += "&idpartner=" + QueryString["idpartner"];
                else
                    newurl += "?idpartner=" + QueryString["idpartner"];
            }
        }
        return newurl;
    }
    else {
        return url;
    }
}

function RemoveAllParameter() {
    return location.href.split('?')[0];
}

function addParameterToURL(paramName, paramVal, clearParam) {

    _url = location.href;

    if (typeof (clearParam) != "undefined" && clearParam != null && clearParam == true) {
        _url = RemoveAllParameter();
    }

    _url = _url.replace(new RegExp("[&;]?" + paramName + "=[^&;]+"), '');
    _url += (_url.split('?')[1] ? '&' : '?') + paramName + "=" + paramVal;
    return _url;
}

function RedirectParameter(paramName, inputID, clearParam) {
    var val = $('#' + inputID).val();
    var newUrl = addParameterToURL(paramName, encodeURIComponent(val), clearParam);
    window.location = newUrl;
}

var __isIframe__ = false;
if (window.location.href.indexOf("iframe") != -1)
    __isIframe__ = true;


var __isFB__ = false;
if (window.location.href.indexOf("&fb") != -1 || window.location.href.indexOf("?fb") != -1)
    __isFB__ = true;


function obnovUrl() {
    if (location.hash != "" && location.hash != "#") {
        var d = location.hash.replace("#", "").split("&");
        var data = new Array();

        for (var i in d) {
            if (d.hasOwnProperty(i)) {
                var item = d[i].split("=");
                data[item[0]] = item[1];
            }
        }

        if (isnull(data["category"]) == false)
            sessionStorage.SearchParamKategorie = data["category"];
        else
            sessionStorage.SearchParamKategorie = "";


        if (isnull(data["date"]) == false)
            sessionStorage.SearchParamDatumOd = data["date"];
        else
            sessionStorage.SearchParamDatumOd = "null";


        if (isnull(data["type"]) == false)
            sessionStorage.item_type = data["type"];

        if (isnull(data["menu"]) == false)
            sessionStorage.menuPodBanerom = data["menu"];

        sessionStorage.SearchParamDatumZapis = (new Date()).getTime();
        sessionStorage.SearchParamMesta = "";
    }
}
obnovUrl();

function getParameterByName(name, url) {
    if (!url) url = window.location.href;
    name = name.replace(/[\[\]]/g, "\\$&");
    var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),
        results = regex.exec(url);
    if (!results) return null;
    if (!results[2]) return '';
    return decodeURIComponent(results[2].replace(/\+/g, " "));
}


//*************************
//*** Region vyhladavac ***
//*************************
var diakrityka = new Array();
var searchTextChange = false;
var searchTextChangeTime = null;
var searchAjax = false;
var searchAjaxText = "";
var buff_podujatie = new Array();                       // Podujatia ktore nasiel a su vypisane v zozname vysledkov
var DOM_search_input = null;
var DOM_search_result = null;

var search_item_poradie = 0;
var search_start = null, search_end = null;

var search_item_selected = 0;
var old_search_text = "";
var mobile_search = false;

var diakrityka = new Array();

function Init_porovnaj() {
    var d = new Array();

    d['ě'] = 'e';
    d['é'] = 'e';
    d['ř'] = 'r';
    d['ť'] = 't';
    d['ý'] = 'y';
    d['ú'] = 'u';
    d['ů'] = 'u';
    d['í'] = 'i';
    d['ó'] = 'o';
    d['ô'] = 'o';
    d['á'] = 'a';
    d['ä'] = 'a';
    d['š'] = 's';
    d['ď'] = 'd';
    d['ľ'] = 'l';
    d['ž'] = 'z';
    d['ź'] = 'z';
    d['č'] = 'c';
    d['ň'] = 'n';

    diakrityka = d;
}
Init_porovnaj();

function toTSASimple(str) {
    return toTSA(str).join(' ');
}

function toTSA(str) {
    str = str.toLowerCase();

    var buff = new Array();
    buff.push(new Array());

    var poradieSlova = 0;
    for (var i = 0; i < str.length; i++) {

        if (str[i] == ' ' || str[i] == ',' || str[i] == '-' || str[i] == '.') {
            if (buff[buff.length - 1].length != 0 && i != (str.length - 1)) {
                buff.push(new Array());
                poradieSlova++;
            }
        }
        else {
            if (isnull(diakrityka[str[i]]))
                buff[poradieSlova].push(str[i]);
            else
                buff[poradieSlova].push(diakrityka[str[i]]);
        }
    }

    for (var i = 0; i < buff.length; i++)
        buff[i] = buff[i].join('');


    return buff;
}

function init_search() {
    search_item_selected = 0;
    $("#fullscreensearch-spead-info").html("");
    $("#fullscreen-search").modal("show");

    //window.setTimeout(function () { $("#fullscreen-search-input").val(""); $("#fullscreen-search-input").focus(); }, 100);

    window.setTimeout(function () {
        document.getElementById('fullscreen-search-input').focus();
    }, 1000);
    
    DOM_search_input = $("#fullscreen-search-input")[0];

    mobile_search = false;
    searchTextChange = true;
    searchTextChangeTime = new Date();
}

function search_input_change() {
    searchTextChange = true;
    searchTextChangeTime = new Date();
}

function check_search_input_change() {
    if (searchTextChange) {                                                                         // Ak sa zmenil text vo vyhladavacom poli
        if ((new Date()).getTime() - searchTextChangeTime.getTime() > 200) {                        // Ak sa viac ako 200 ms nezmenil text vo vyhladavacom poli

            if (location.href.indexOf('SellingPlaces') != -1) {                                     // Vyhladavac pre predajne miesta
                search_input_selling_change();
                setTimeout("check_search_input_change();", 500);
                searchTextChange = false;
                return;
            }

            var searchText = DOM_search_input.value;

            if (mobile_search == true && searchText != '') {
                if ($(".modal-body-search #search_erase_btn").hasClass('disabled'))
                    $(".modal-body-search #search_erase_btn").removeClass('disabled');
            }
            if (mobile_search == true && searchText == '') {
                if (!($(".modal-body-search #search_erase_btn").hasClass('disabled')))
                    $(".modal-body-search #search_erase_btn").addClass('disabled');
            }

            var search_result = new Array();

            if (searchText == old_search_text) {
                searchTextChange = false;
                setTimeout("check_search_input_change();", 500);
                return;
            }

            old_search_text = searchText;
            $(DOM_search_input).parent().addClass("open");

            if (searchText.length > 2) {                                                            // Do vyhladavacieho pola treba zadat aspon 3 znaky aby sa nieco vyhladavalo

                search_start = new Date();

                $("#fullscreensearch_help").addClass("hidden");
                $("#fullscreensearch_result").removeClass("hidden");

                var searchTSA = toTSA(searchText);                                                  //Rozdeli vyhladavany vyraz na slova a odstrani diakritiku

                for (var i = 0; i < searchTSA.length; i++)
                    search_result.push([]);

                for (var i = 0; i < searchTSA.length; i++) {
                    var text = searchTSA[i];

                    if (!isnull(index_alfa[text[0]])) {
                        var index = index_alfa[text[0]];
                        for (var j = 0; j < index.length; j++) {
                            var skore = compare_text(index[j][0], text);

                            if (skore >= (0.1 * text.length)) {
                                if (index[j][1].typObjektu != 6 && index[j][1].typObjektu != 7)
                                    search_result[i].push([skore, index[j][1]]);
                            }
                        }
                    }
                }

                for (var i = 0; i < search_result.length; i++)
                    search_result[i].sort(search_input_sort);
            }
            else {
                $("#fullscreensearch_help").removeClass("hidden");
                $("#fullscreensearch_result").addClass("hidden");
                $("#fulscreensearch-Precise, #fulscreensearch-events, #fullscreensearch-articles, #fullscreensearch-kategorie, #fullscreensearch-Mesto, #fullscreensearch-Hladisko").addClass("hidden");
            }

            show_find_result(search_result);
            searchTextChange = false;

            window.setTimeout(function () {
                document.getElementById('fullscreen-search-input').focus();
            }, 500);
        }
    }
    setTimeout("check_search_input_change();", 500);
}
check_search_input_change();

var HTML_NPodujatie = new Array();

function ScrollToFilter() { setTimeout("ScrollToFilter2();", 300); }
function ScrollToFilter2() {
    $('html, body').animate({
        scrollTop: $("#filterMenu").offset().top
    }, 1000);
}


// Na jednu polozku ukazuje podujatie, hladisko
// mesto, okres, kraj, kategoria a cas menia filter.
function show_find_result(s) {

    $("#search_li_podujatia").addClass("hidden");
    $("#search_li_clanky").addClass("hidden");
    $("#search_li_hladisko").addClass("hidden");
    $("#search_li_kategoria").addClass("hidden");
    $("#search_li_podujatia").addClass("hidden");

    var search_result = new Array();

    for (var i in s) {                          //Vytvorime si kopiu
        if (s.hasOwnProperty(i)) {
            search_result.push([]);
        }
    }

    for (var i in s) {                          // Vyberieme top 10 s kazdeho zadaneho slova
        if (s.hasOwnProperty(i)) {
            var c = 0;
            for (var j in s[i]) {
                if (s[i].hasOwnProperty(j)) {
                    search_result[i].push(s[i][j]);
                    c++;

                    if (c == 10)
                        break;
                }
            }
        }
    }

    // V search_result mame teraz pre kazde slovo maximalne 10 vysledkov
    search_item_poradie = 0;

    if (useElasticSearch) {
        search_ajax();
    } else {
        old_search_ajax();
    }

    HTML_Podujatie = new Array();
    HTML_NPodujatie = new Array();
    var HTML_Hladisko = new Array();
    var HTML_Kategoria = new Array();
    var HTML_mesto = new Array();
    var HTML_Filter = new Array();

    var pocet_hladisko = 0; var pocet_kategoria = 0; var pocet_mesto = 0;

    if (search_result.length == 1) {                    // V pripade, ze zadal iba jedno slovo
        buff_podujatie = new Array();
        buff_npodujatie = new Array();
        var HTML = new Array();

        for (var i in search_result[0]) {
            if (search_result[0].hasOwnProperty(i)) {
                var objekt = search_result[0][i][1];

                /*if (objekt.typObjektu == ObjectType.Podujatie) {
                    if (isnull(buff_podujatie[objekt.id])) {
    
                        HTML_NPodujatie.push('<a class="list-group-item" href="' + absoluteUri + 'Event/' + dic_podujatie[objekt.id].id_podujatie_out + '">');
                        HTML_NPodujatie.push('     <div class="event-picture"><img alt="img" class="img-responsive" src="' + dic_podujatie[objekt.id].obrazok + '"></div>');
                        HTML_NPodujatie.push('    <div class="event-info">');
                        HTML_NPodujatie.push('        <div class="event-name">' + objekt.nazov + '</div>');
                        //TODO DOROBIT CEZ dic_NPodujatie
                        //HTML_NPodujatie.push('        <div class="event-dates">' + popis_datum + '</div>');
                        //HTML_NPodujatie.push('        <div class="event-dates">' + popis_hladiska + '</div>');
                        HTML_NPodujatie.push('    </div>');
                        HTML_NPodujatie.push('</a>');
    
    
                        //HTML.push('<a id="search-item-result-' + search_item_poradie + '" href="' + absoluteUri + 'NEvent/' + objekt.id + '" onclick="DOM_search_input.value = \'' + objekt.nazov + '\';MobileHideSearchModal();" class="list-group-item">');
                        //HTML.push('  <p class="list-group-item-heading"><span>' + objekt.nazov + '</strong><span class="flag-icon flag-icon-' + lokalita + ' pull-right"></span></p>');
                        //HTML.push('  <p class="list-group-item-text">' + lang["nadakcia"] + '<small class="pull-right">' + lang["pocetVysledkov"] + ' ' + objekt.pocetPodujatiOUT + '</small></p>');
                        //HTML.push('</a>');
                        search_item_poradie++;
                    }
    
                    buff_podujatie[objekt.id] = 0;
                }*/

                if (objekt.typObjektu == ObjectType.NPodujatie) {
                    if (window.location.href.indexOf("/Articles") == -1) {
                        if (isnull(buff_npodujatie[objekt.id])) {

                            HTML_NPodujatie.push('<a class="list-group-item" href="' + absoluteUri + 'nevent/' + objekt.origID + linkIframe('') + '">');
                            HTML_NPodujatie.push('     <div class="event-picture"><img alt="img" class="img-responsive" src="' + dic_NPodujatie[objekt.id].obrazok + '"></div>');
                            HTML_NPodujatie.push('    <div class="event-info">');
                            HTML_NPodujatie.push('        <div class="event-name">' + objekt.nazov + '</div>');
                            //TODO DOROBIT CEZ dic_NPodujatie
                            //HTML_NPodujatie.push('        <div class="event-dates">' + popis_datum + '</div>');
                            //HTML_NPodujatie.push('        <div class="event-dates">' + popis_hladiska + '</div>');
                            HTML_NPodujatie.push('    </div>');
                            HTML_NPodujatie.push('</a>');


                            //HTML.push('<a id="search-item-result-' + search_item_poradie + '" href="' + absoluteUri + 'NEvent/' + objekt.id + '" onclick="DOM_search_input.value = \'' + objekt.nazov + '\';MobileHideSearchModal();" class="list-group-item">');
                            //HTML.push('  <p class="list-group-item-heading"><span>' + objekt.nazov + '</strong><span class="flag-icon flag-icon-' + lokalita + ' pull-right"></span></p>');
                            //HTML.push('  <p class="list-group-item-text">' + lang["nadakcia"] + '<small class="pull-right">' + lang["pocetVysledkov"] + ' ' + objekt.pocetPodujatiOUT + '</small></p>');
                            //HTML.push('</a>');
                            search_item_poradie++;
                        }
                    }

                    buff_npodujatie[objekt.id] = 0;
                }

                if (objekt.typObjektu == ObjectType.Hladisko) {
                    if (window.location.href.indexOf("/Articles") == -1) {
                        var c = 0;
                        var bp = new Array();

                        for (var ii in objekt.predstavenia) {
                            if (objekt.predstavenia.hasOwnProperty(ii)) {
                                if (isnull(bp[objekt.predstavenia[ii].podujatie.id_podujatie_out])) {
                                    bp[objekt.predstavenia[ii].podujatie.id_podujatie_out] = 0;
                                    c++;
                                }
                            }
                        }

                        if (c != 0) {

                            HTML_Hladisko.push('<a class="list-group-item" href="' + absoluteUri + 'Venue/' + objekt.id + linkIframe('') + '">');
                            HTML_Hladisko.push('    <div class="h4 list-group-item-heading">' + objekt.nazov + '</div>');
                            HTML_Hladisko.push('    <p class="list-group-item-text">' + dic_hladisko[objekt.id].getFormatAdresa() + '</p>');
                            HTML_Hladisko.push('</a>');
                            //TODO dorobit mozno pocet vysledkov

                            //HTML.push('<a id="search-item-result-' + search_item_poradie + '" href="' + absoluteUri + 'Venue/' + objekt.id + '" onclick="DOM_search_input.value = \'' + objekt.nazov + '\';MobileHideSearchModal();" class="list-group-item">');
                            //HTML.push('  <p class="list-group-item-heading"><span>' + objekt.nazov + '</span><span class="flag-icon flag-icon-' + lokalita + ' pull-right"></span></p>');
                            //HTML.push('  <p class="list-group-item-text">' + lang["hladisko"] + '<small class="pull-right">' + lang["pocetVysledkov"] + ' ' + c + '</small></p>');
                            //HTML.push('</a>');
                            search_item_poradie++;
                            pocet_hladisko++;
                        }
                    }
                }

                if (objekt.typObjektu == ObjectType.Kategoria) {
                    if (window.location.href.indexOf("/Articles") == -1) {
                        var c = objekt.pocet_podujati;
                        if (objekt.id_rodic == null) {
                            for (var i in objekt.potomkovia)
                                c += objekt.potomkovia[i].pocet_podujati;
                        }

                        if (c != 0) {

                            HTML_Kategoria.push('<a class="list-group-item" href="javascript:NastavFilter(' + objekt.id + ', null, null);" onclick="$(\'#fullscreen-search\').modal(\'hide\');ScrollToFilter();$(\'#filterMenu\').collapse(\'show\');">');
                            HTML_Kategoria.push('    <div class="h4 list-group-item-heading">' + (objekt.id_rodic != null ? dic_kategoria[objekt.id_rodic].nazov + " -> " : "") + objekt.nazov + '</div>');
                            HTML_Kategoria.push('    <p class="list-group-item-text">' + lang["pocetVysledkov"] + ' ' + c + '</p>');
                            HTML_Kategoria.push('</a>');

                            //HTML.push('<a id="search-item-result-' + search_item_poradie + '" href="javascript:NastavFilter(' + objekt.id + ', null, null);" onclick="DOM_search_input.value = \'' + (objekt.id_rodic != null ? dic_kategoria[objekt.id_rodic].nazov + " -> " : "") + objekt.nazov + '\';MobileHideSearchModal();$(\'#filterMenu\').collapse(\'show\');" class="list-group-item">');
                            //HTML.push('  <p class="list-group-item-heading"><span>' + (objekt.id_rodic != null ? dic_kategoria[objekt.id_rodic].nazov + " -> " : "") + objekt.nazov + '</span><span class="flag-icon flag-icon-' + lokalita + ' pull-right"></span></p>');
                            //HTML.push('  <p class="list-group-item-text">' + lang["kategoria"] + '<small class="pull-right">' + lang["pocetVysledkov"] + ' ' + c + '</small></p>');
                            //HTML.push('</a>');
                            search_item_poradie++;
                            pocet_kategoria++;
                        }
                    }
                }

                if (objekt.typObjektu == ObjectType.Mesto) {
                    if (window.location.href.indexOf("/Articles") == -1) {
                        var c = 0;
                        var bp = new Array();

                        for (var ii in objekt.predstavenia) {
                            if (objekt.predstavenia.hasOwnProperty(ii)) {
                                if (isnull(bp[objekt.predstavenia[ii].podujatie.id_podujatie_out])) {
                                    bp[objekt.predstavenia[ii].podujatie.id_podujatie_out] = 0;
                                    c++;
                                }
                            }
                        }

                        if (c != 0) {

                            HTML_mesto.push('<a class="list-group-item" href="javascript:NastavFilter(null, ' + objekt.id + ', null);" onclick="$(\'#fullscreen-search\').modal(\'hide\');ScrollToFilter();  $(\'#filterMenu\').collapse(\'show\');">');
                            HTML_mesto.push('    <div class="h4 list-group-item-heading">' + objekt.nazov + '</div>');
                            HTML_mesto.push('    <p class="list-group-item-text">' + lang["pocetVysledkov"] + ' ' + c + '</p>');
                            HTML_mesto.push('</a>');

                            //HTML.push('<a id="search-item-result-' + search_item_poradie + '" href="javascript:NastavFilter(null, ' + objekt.id + ', null);" onclick="DOM_search_input.value = \'' + objekt.nazov + '\';MobileHideSearchModal();$(\'#filterMenu\').collapse(\'show\');" class="list-group-item">');
                            //HTML.push('  <p class="list-group-item-heading"><span>' + objekt.nazov + '</span><span class="flag-icon flag-icon-' + lokalita + ' pull-right"></span></p>');
                            //HTML.push('  <p class="list-group-item-text">' + lang["mesto"] + '<small class="pull-right">' + lang["pocetVysledkov"] + ' ' + c + '</small></p>');
                            //HTML.push('</a>');
                            search_item_poradie++;
                            pocet_mesto++;
                        }
                    }
                }
            }
        }
        //$(DOM_search_result).html(HTML.join(''));
        //search_ajax();

        

    }

    if (window.location.href.indexOf("/Articles") == -1) {
        if (search_result.length > 1) {

            buff_podujatie = new Array();
            buff_npodujatie = new Array();
            buff_hladisko = new Array();
            buff_kategoria = new Array();
            var HTML = new Array();

            for (var i in search_result[0]) {
                if (search_result[0].hasOwnProperty(i)) {
                    var objekt1 = search_result[0][i][1];

                    for (var ii in search_result[1]) {
                        if (search_result[1].hasOwnProperty(ii)) {
                            var objekt2 = search_result[1][ii][1];

                            // jeden s vysledkov je hladisko -> zobrazi sa hladisko
                            if (objekt1.typObjektu == ObjectType.Kategoria || objekt2.typObjektu == ObjectType.Kategoria) {
                                var ok = (objekt1.typObjektu == ObjectType.Kategoria && Number(i) == 0) || (objekt2.typObjektu == ObjectType.Kategoria && Number(ii) == 0);
                                var objekt = objekt1.typObjektu == ObjectType.Kategoria ? objekt1 : objekt2;

                                if (objekt1.typObjektu == ObjectType.Kategoria && objekt2.typObjektu == ObjectType.Kategoria) {
                                    ok = objekt1.id == objekt2.id || Number(i) == 0 || Number(1);
                                    objekt = (objekt1.id == objekt2.id ? objekt1 : (Number(i) == 0 ? objekt1 : objekt2));
                                }

                                if (ok) {
                                    if (isnull(buff_kategoria[objekt.id])) {         // Zabranime opakovaniu vysledku
                                        //TODO prerobit, urobit metody na zobrazHladisko, zobrazKategoriu a pod.
                                        var c = 0;
                                        var bp = new Array();

                                        for (var _ii in objekt.predstavenia) {
                                            if (objekt.predstavenia.hasOwnProperty(_ii)) {
                                                if (isnull(bp[objekt.predstavenia[_ii].podujatie.id_podujatie_out])) {
                                                    bp[objekt.predstavenia[_ii].podujatie.id_podujatie_out] = 0;
                                                    c++;
                                                }
                                            }
                                        }

                                        buff_kategoria[objekt.id] = 0;

                                        if (c != 0) {

                                            var nazov = (objekt.typObjektu == ObjectType.Kategoria && objekt.id_rodic != null ? dic_kategoria[objekt.id_rodic].nazov + " -> " : "") + objekt.nazov;

                                            HTML_Filter.push('<a class="list-group-item" href="javascript:NastavFilter(' + (objekt.typObjektu == ObjectType.Kategoria ? objekt.id : "null") + ', ' + (objekt.typObjektu == ObjectType.Mesto ? objekt.id : "null") + ', null);" class="$(\'#filterMenu\').collapse(\'show\');">');
                                            HTML_Filter.push('    <div class="h4 list-group-item-heading">' + nazov + '</div>');
                                            HTML_Filter.push('    <p class="list-group-item-text">' + (objekt.typObjektu == ObjectType.Kategoria ? lang["kategoria"] : lang["mesto"]) + '<small class="pull-right">' + lang["pocetVysledkov"] + ' ' + c + '</small></p>');
                                            HTML_Filter.push('</a>');

                                            //HTML.push('<a id="search-item-result-' + search_item_poradie + '" href="' + absoluteUri + 'Venue/' + objekt.id + '" onclick="DOM_search_input.value = \'' + objekt.nazov + '\';MobileHideSearchModal();" class="list-group-item">');
                                            //HTML.push('  <p class="list-group-item-heading"><span>' + objekt.nazov + '</span><span class="flag-icon flag-icon-' + lokalita + ' pull-right"></span></p>');
                                            //HTML.push('  <p class="list-group-item-text">' + lang["hladisko"] + '<small class="pull-right">' + lang["pocetVysledkov"] + ' ' + c + '</small></p>');
                                            //HTML.push('</a>');
                                            search_item_poradie++;
                                        }
                                    }
                                }
                            }

                            // jeden s vysledkov je hladisko -> zobrazi sa hladisko
                            if (objekt1.typObjektu == ObjectType.Hladisko || objekt2.typObjektu == ObjectType.Hladisko) {
                                var ok = (objekt1.typObjektu == ObjectType.Hladisko && Number(i) == 0) || (objekt2.typObjektu == ObjectType.Hladisko && Number(ii) == 0);
                                var objekt = objekt1.typObjektu == ObjectType.Hladisko ? objekt1 : objekt2;

                                if (objekt1.typObjektu == ObjectType.Hladisko && objekt2.typObjektu == ObjectType.Hladisko) {
                                    ok = objekt1.id == objekt2.id || Number(i) == 0 || Number(1);
                                    objekt = (objekt1.id == objekt2.id ? objekt1 : (Number(i) == 0 ? objekt1 : objekt2));
                                }

                                if (ok) {
                                    if (isnull(buff_hladisko[objekt.id])) {         // Zabranime opakovaniu vysledku
                                        //TODO prerobit, urobit metody na zobrazHladisko, zobrazKategoriu a pod.
                                        var c = 0;
                                        var bp = new Array();

                                        for (var _ii in objekt.predstavenia) {
                                            if (objekt.predstavenia.hasOwnProperty(_ii)) {
                                                if (isnull(bp[objekt.predstavenia[_ii].podujatie.id_podujatie_out])) {
                                                    bp[objekt.predstavenia[_ii].podujatie.id_podujatie_out] = 0;
                                                    c++;
                                                }
                                            }
                                        }

                                        buff_hladisko[objekt.id] = 0;

                                        if (c != 0) {

                                            HTML_Hladisko.push('<a class="list-group-item" href="' + absoluteUri + 'Venue/' + objekt.id + linkIframe('') + '">');
                                            HTML_Hladisko.push('    <div class="h4 list-group-item-heading">' + objekt.nazov + '</div>');
                                            HTML_Hladisko.push('    <p class="list-group-item-text">' + dic_hladisko[objekt.id].getFormatAdresa() + "<span class='pull-right'>" + lang["PocetPodujati"] + c + '</span></p>');
                                            HTML_Hladisko.push('</a>');

                                            //HTML.push('<a id="search-item-result-' + search_item_poradie + '" href="' + absoluteUri + 'Venue/' + objekt.id + '" onclick="DOM_search_input.value = \'' + objekt.nazov + '\';MobileHideSearchModal();" class="list-group-item">');
                                            //HTML.push('  <p class="list-group-item-heading"><span>' + objekt.nazov + '</span><span class="flag-icon flag-icon-' + lokalita + ' pull-right"></span></p>');
                                            //HTML.push('  <p class="list-group-item-text">' + lang["hladisko"] + '<small class="pull-right">' + lang["pocetVysledkov"] + ' ' + c + '</small></p>');
                                            //HTML.push('</a>');
                                            search_item_poradie++;
                                            pocet_hladisko++;
                                        }
                                    }
                                }
                            }

                            // Napr festival pohoda -> zobrazi sa hladisko
                            if ((objekt1.typObjektu == ObjectType.Kategoria && objekt2.typObjektu == ObjectType.Hladisko) || (objekt2.typObjektu == ObjectType.Kategoria && objekt1.typObjektu == ObjectType.Hladisko)) {
                                var kat = objekt1.typObjektu == ObjectType.Kategoria ? objekt1 : objekt2;
                                var hladisko = objekt1.typObjektu == ObjectType.Hladisko ? objekt1 : objekt2;

                                // TODO vsetky podujatia aj podujatia deciek si pripravit vopred pri inicializacii
                                var ok = false;
                                var buff_podujatia_kat = new Array();
                                for (var idp in kat.podujatia) {
                                    if (kat.podujatia.hasOwnProperty(idp)) {
                                        buff_podujatia_kat[idp] = 0;
                                    }
                                }

                                for (var id_child in kat.potomkovia) {
                                    if (kat.potomkovia.hasOwnProperty(id_child)) {
                                        for (var idp in kat.potomkovia[id_child].podujatia) {
                                            if (kat.potomkovia[id_child].podujatia.hasOwnProperty(idp)) {
                                                buff_podujatia_kat[idp] = 0;
                                            }
                                        }
                                    }
                                }


                                for (var idp in hladisko.podujatia) {
                                    if (hladisko.podujatia.hasOwnProperty(idp)) {
                                        if (isnull(buff_podujatia_kat[idp]) == false) {
                                            ok = true;
                                            break;
                                        }
                                    }
                                }

                                if (ok) {
                                    if (isnull(buff_hladisko[hladisko.id])) {
                                        //TODO prerobit, urobit metody na zobrazHladisko, zobrazKategoriu a pod.
                                        var c = 0;
                                        var bp = new Array();

                                        for (var _ii in hladisko.predstavenia) {       // TODO da sa vyratat dopredu!
                                            if (hladisko.predstavenia.hasOwnProperty(_ii)) {
                                                if (isnull(bp[hladisko.predstavenia[_ii].podujatie.id_podujatie_out])) {
                                                    bp[hladisko.predstavenia[_ii].podujatie.id_podujatie_out] = 0;
                                                    c++;
                                                }
                                            }
                                        }

                                        buff_hladisko[hladisko.id] = 0;

                                        if (c != 0) {
                                            HTML_Hladisko.push('<a class="list-group-item" href="' + absoluteUri + 'Venue/' + hladisko.id + linkIframe('') + '">');
                                            HTML_Hladisko.push('    <div class="h4 list-group-item-heading">' + hladisko.nazov + '</div>');
                                            HTML_Hladisko.push('    <p class="list-group-item-text">' + dic_hladisko[hladisko.id].getFormatAdresa() + "<span class='pull-right'>" + lang["PocetPodujati"] + c + '</span></p>');
                                            HTML_Hladisko.push('</a>');

                                            //HTML.push('<a id="search-item-result-' + search_item_poradie + '" href="' + absoluteUri + 'Venue/' + hladisko.id + '" onclick="DOM_search_input.value = \'' + hladisko.nazov + '\';MobileHideSearchModal();" class="list-group-item">');
                                            //HTML.push('  <p class="list-group-item-heading"><span>' + hladisko.nazov + '</span><span class="flag-icon flag-icon-' + lokalita + ' pull-right"></span></p>');
                                            //HTML.push('  <p class="list-group-item-text">' + lang["hladisko"] + '<small class="pull-right">' + lang["pocetVysledkov"] + ' ' + c + '</small></p>');
                                            //HTML.push('</a>');
                                            search_item_poradie++;
                                            pocet_hladisko++;
                                        }
                                    }
                                }
                            }

                            // Jednoznacne najde npodujatie -> zobrazi npodujatie
                            if (objekt1.typObjektu == ObjectType.NPodujatie && objekt2.typObjektu == ObjectType.NPodujatie && objekt1.id == objekt2.id) {

                                if (isnull(buff_npodujatie[objekt1.id])) {

                                    HTML_NPodujatie.push('<a class="list-group-item" href="' + absoluteUri + 'nevent/' + objekt1.origID + linkIframe('') + '">');
                                    HTML_NPodujatie.push('     <div class="event-picture"><img alt="img" class="img-responsive" src="' + dic_NPodujatie[objekt1.id].obrazok + '"></div>');
                                    HTML_NPodujatie.push('    <div class="event-info">');
                                    HTML_NPodujatie.push('        <div class="event-name">' + objekt1.nazov + '</div>');
                                    //TODO DOROBIT CEZ dic_NPodujatie
                                    //HTML_NPodujatie.push('        <div class="event-dates">' + popis_datum + '</div>');
                                    //HTML_NPodujatie.push('        <div class="event-dates">' + popis_hladiska + '</div>');
                                    HTML_NPodujatie.push('    </div>');
                                    HTML_NPodujatie.push('</a>');

                                    //HTML.push('<a id="search-item-result-' + search_item_poradie + '" href="' + absoluteUri + 'NEvent/' + objekt1.id + '" onclick="DOM_search_input.value = \'' + objekt1.nazov + '\';MobileHideSearchModal();" class="list-group-item">');
                                    //HTML.push('  <p class="list-group-item-heading"><span>' + objekt1.nazov + '</span><span class="flag-icon flag-icon-' + lokalita + ' pull-right"></span></p>');
                                    //HTML.push('  <p class="list-group-item-text">' + lang["nadakcia"] + '<small class="pull-right">' + lang["pocetVysledkov"] + ' ' + objekt.pocetPodujatiOUT + '</small></p>');
                                    //HTML.push('</a>');
                                    search_item_poradie++;

                                    buff_npodujatie[objekt1.id] = 0;
                                }
                            }

                            // Jednoznacne najde npodujatie -> zobrazi npodujatie
                            /*if (objekt1.typObjektu == ObjectType.Podujatie || objekt2.typObjektu == ObjectType.Podujatie) {
            
                                var objekt = objekt1.typObjektu == ObjectType.Podujatie ? objekt1 : objekt2;
            
                                if (isnull(buff_podujatie[objekt.id])) {
            
                                    HTML_NPodujatie.push('<a class="list-group-item" href="' + absoluteUri + 'Event/' + dic_podujatie[objekt.id].id_podujatie_out + '">');
                                    HTML_NPodujatie.push('     <div class="event-picture"><img alt="img" class="img-responsive" src="' + dic_podujatie[objekt.id].obrazok + '"></div>');
                                    HTML_NPodujatie.push('    <div class="event-info">');
                                    HTML_NPodujatie.push('        <div class="event-name">' + objekt.nazov + '</div>');
                                    //TODO DOROBIT CEZ dic_NPodujatie
                                    //HTML_NPodujatie.push('        <div class="event-dates">' + popis_datum + '</div>');
                                    //HTML_NPodujatie.push('        <div class="event-dates">' + popis_hladiska + '</div>');
                                    HTML_NPodujatie.push('    </div>');
                                    HTML_NPodujatie.push('</a>');
            
                                    //HTML.push('<a id="search-item-result-' + search_item_poradie + '" href="' + absoluteUri + 'NEvent/' + objekt1.id + '" onclick="DOM_search_input.value = \'' + objekt1.nazov + '\';MobileHideSearchModal();" class="list-group-item">');
                                    //HTML.push('  <p class="list-group-item-heading"><span>' + objekt1.nazov + '</span><span class="flag-icon flag-icon-' + lokalita + ' pull-right"></span></p>');
                                    //HTML.push('  <p class="list-group-item-text">' + lang["nadakcia"] + '<small class="pull-right">' + lang["pocetVysledkov"] + ' ' + objekt.pocetPodujatiOUT + '</small></p>');
                                    //HTML.push('</a>');
                                    search_item_poradie++;
            
                                    buff_podujatie[objekt.id] = 0;
                                }
                            }*/

                            // Napr festival bratislava, ak najde dve mesta alebo dve kategorie, zobrazi vysledok prveho slova
                            if ((objekt1.typObjektu == ObjectType.Kategoria || objekt1.typObjektu == ObjectType.Mesto) && (objekt2.typObjektu == ObjectType.Kategoria || objekt2.typObjektu == ObjectType.Mesto)) {
                                var buff = new Array();

                                if (objekt1.typObjektu == objekt2.typObjektu && objekt1.id != objekt2.id)
                                    continue;

                                if (objekt1.typObjektu == ObjectType.Kategoria) {
                                    for (var _i in objekt1.podujatia)
                                        buff[objekt1.podujatia[_i].id] = 1;

                                    for (var p in objekt1.potomkovia) {
                                        if (objekt1.potomkovia.hasOwnProperty(p)) {
                                            for (var _i in objekt1.potomkovia[p].podujatia) {
                                                if (objekt1.potomkovia[p].podujatia.hasOwnProperty(_i)) {
                                                    buff[objekt1.potomkovia[p].podujatia[_i].id] = 1;
                                                }
                                            }
                                        }
                                    }
                                }


                                if (objekt1.typObjektu == ObjectType.Mesto) {
                                    for (var _i in objekt1.podujatia) {
                                        if (objekt1.podujatia.hasOwnProperty(_i)) {
                                            buff[objekt1.podujatia[_i].id] = 1;
                                        }
                                    }
                                }


                                if (objekt2.typObjektu == ObjectType.Kategoria) {
                                    for (var _i in objekt2.podujatia) {
                                        if (objekt2.podujatia.hasOwnProperty(_i)) {
                                            if (isnull(buff[objekt2.podujatia[_i].id]) == false) {
                                                buff[objekt2.podujatia[_i].id] = 2;
                                            }
                                        }
                                    }

                                    for (var p in objekt2.potomkovia) {
                                        if (objekt2.potomkovia.hasOwnProperty(p)) {
                                            for (var i in objekt2.potomkovia[p].podujatia) {
                                                if (objekt2.potomkovia[p].podujatia.hasOwnProperty(i)) {
                                                    if (isnull(buff[objekt2.potomkovia[p].podujatia[i].id]) == false) {
                                                        buff[objekt2.potomkovia[p].podujatia[i].id] = 2;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }

                                if (objekt2.typObjektu == ObjectType.Mesto) {
                                    for (var _i in objekt2.podujatia) {
                                        if (objekt2.podujatia.hasOwnProperty(_i)) {
                                            if (isnull(buff[objekt2.podujatia[_i].id]) == false) {
                                                buff[objekt2.podujatia[_i].id] = 2;
                                            }
                                        }
                                    }
                                }

                                var c = 0;
                                for (var _i in buff) {
                                    if (buff.hasOwnProperty(_i)) {
                                        if (buff[_i] == 2)
                                            c++;
                                    }
                                }

                                if (c != 0) {

                                    if (objekt1.typObjektu != objekt2.typObjektu) {
                                        var nazov = (objekt1.typObjektu == ObjectType.Kategoria && objekt1.id_rodic != null ? dic_kategoria[objekt1.id_rodic].nazov + " -> " : "") + objekt1.nazov + ', ' + (objekt2.typObjektu == ObjectType.Kategoria && objekt2.id_rodic != null ? dic_kategoria[objekt2.id_rodic].nazov + " -> " : "") + objekt2.nazov;

                                        HTML_Filter.push('<a class="list-group-item" href="javascript:NastavFilter(' + (objekt1.typObjektu == ObjectType.Kategoria ? objekt1.id : objekt2.id) + ', ' + (objekt1.typObjektu == ObjectType.Mesto ? objekt1.id : objekt2.id) + ', null);" class="$(\'#filterMenu\').collapse(\'show\');">');
                                        HTML_Filter.push('    <div class="h4 list-group-item-heading">' + nazov + '</div>');
                                        HTML_Filter.push('    <p class="list-group-item-text">' + (objekt1.typObjektu == ObjectType.Kategoria ? lang["kategoria"] + " / " + lang["mesto"] : lang["mesto"] + " / " + lang["kategoria"]) + '<small class="pull-right">' + lang["pocetVysledkov"] + ' ' + c + '</small></p>');
                                        HTML_Filter.push('</a>');
                                    }
                                    else {
                                        var nazov = (objekt1.typObjektu == ObjectType.Kategoria && objekt1.id_rodic != null ? dic_kategoria[objekt1.id_rodic].nazov + " -> " : "") + objekt1.nazov;

                                        HTML_Filter.push('<a class="list-group-item" href="javascript:NastavFilter(' + (objekt1.typObjektu == ObjectType.Kategoria ? objekt1.id : "null") + ', ' + (objekt1.typObjektu == ObjectType.Mesto ? objekt1.id : "null") + ', null);" class="$(\'#filterMenu\').collapse(\'show\');">');
                                        HTML_Filter.push('    <div class="h4 list-group-item-heading">' + nazov + '</div>');
                                        HTML_Filter.push('    <p class="list-group-item-text">' + (objekt1.typObjektu == ObjectType.Kategoria ? lang["kategoria"] : lang["mesto"]) + '<small class="pull-right">' + lang["pocetVysledkov"] + ' ' + c + '</small></p>');
                                        HTML_Filter.push('</a>');
                                    }
                                    //HTML.push('<a id="search-item-result-' + search_item_poradie + '" href="javascript:NastavFilter(' + (objekt1.typObjektu == ObjectType.Kategoria ? objekt1.id : objekt2.id) + ', ' + (objekt1.typObjektu == ObjectType.Mesto ? objekt1.id : objekt2.id) + ', null);" onclick="DOM_search_input.value = \'' + nazov + '\';MobileHideSearchModal();$(\'#filterMenu\').collapse(\'show\');" class="list-group-item">');
                                    //HTML.push('  <p class="list-group-item-heading"><span>' + nazov + '</span><span class="flag-icon flag-icon-' + lokalita + ' pull-right"></span></p>');
                                    //HTML.push('  <p class="list-group-item-text">' + (objekt1.typObjektu == ObjectType.Kategoria ? lang["kategoria"] + " / " + lang["mesto"] : lang["mesto"] + " / " + lang["kategoria"]) + '<small class="pull-right">' + lang["pocetVysledkov"] + ' ' + c + '</small></p>');
                                    //HTML.push('</a>');
                                    search_item_poradie++;
                                }
                            }
                        }
                    }
                }
            }

            //$(DOM_search_result).html(HTML.join(''));
            //search_ajax();
        }
    }

    DOM_group_main(HTML_NPodujatie, "fulscreensearch-events");
    DOM_second_results(HTML_Kategoria, "fullscreensearch-kategorie");
    DOM_second_results(HTML_Hladisko, "fullscreensearch-Hladisko");
    DOM_second_results(HTML_mesto, "fullscreensearch-Mesto");
    DOM_second_results(HTML_Filter, "fullscreensearch-Filter");

    if (pocet_hladisko == 0) {
        $("#search_li_hladisko").addClass("hidden");
    }
    else {
        $("#search_li_hladisko").removeClass("hidden");
        $("#search_li_hladisko button span").html("" + pocet_hladisko);
    }
    if (pocet_kategoria == 0) {
        $("#search_li_kategoria").addClass("hidden");
    }
    else {
        $("#search_li_kategoria").removeClass("hidden");
        $("#search_li_kategoria button span").html("" + pocet_kategoria);
    }
    if (pocet_mesto == 0) {
        $("#search_li_mesto").addClass("hidden");
    }
    else {
        $("#search_li_mesto").removeClass("hidden");
        $("#search_li_mesto button span").html("" + pocet_mesto);
    }
}

function DOM_group_main(HTML, id) {
    if (HTML.length != 0) {
        $("#" + id).removeClass("hidden");
        $("#" + id + " .list-group.main").html(HTML.join(""));
    }
    else {
        $("#" + id).addClass("hidden");
        $("#" + id + " .list-group.main").html("");
    }
}

function DOM_second_results(HTML, id) {
    if (HTML.length != 0) {
        $("#" + id).removeClass("hidden");
        $("#" + id + " .list-group.second-results").html(HTML.join(""));
    }
    else {
        $("#" + id).addClass("hidden");
        $("#" + id + " .list-group.second-results").html("");
    }
}

function MobileHideSearchModal() {
    if (mobile_search)
        $("#hladaj").removeClass("in");
}


var _hash = "!";
var _hashBackup = "";
var blokBtnSpatAktivne = false;
function ZablokujBtnSpat() {
    return;
    var noBackPlease = function () {
        window.location.href += "#";

        // making sure we have the fruit available for juice (^__^)
        window.setTimeout(function () {
            window.location.href += "!";
        }, 50);
    };

    window.onhashchange = function () {

        if (window.location.hash == "" && blokBtnSpatAktivne == true) {
            $("#hladaj").removeClass("in");
            PovolBtnSpat(-5);
            return;
        }

        if (window.location.hash !== _hash) {
            window.location.hash = _hash;

            if (blokBtnSpatAktivne == true) {
                $("#hladaj").removeClass("in");
                PovolBtnSpat(-4);
            }
        }
    }

    _hashBackup = window.location.hash.replace("#", "");

    if (window.location.hash != '')
        _hash = window.location.hash.replace("#", "") + "&!";

    blokBtnSpatAktivne = false;
    noBackPlease();

    window.setTimeout(function () { blokBtnSpatAktivne = true; }, 200);
}

function PovolBtnSpat(spat) {
    return;
    window.onhashchange = null;
    blokBtnSpatAktivne = false;

    if (supports_history_api()) {
        if (spat != 0)
            window.history.go(spat);
    }
    else {
        if (window.location.hash.indexOf("&!") != -1)
            window.location.hash = window.location.hash.replace("&!", "");
    }
}

function supports_history_api() {
    return !!(window.history && history.pushState);
}


function search_ajax() {
    if (searchAjax == false) {

        searchAjax = true;
        searchAjaxText = DOM_search_input.value;

        $.ajax({
            url: absoluteUri + "Grid/elasticsearch?search=" + encodeURI(searchAjaxText)
        }).done(function (data) {
            fulltext = data;
            show_ajax_result(fulltext);
            searchAjax = false;
        }).fail(function () {
            searchAjax = false;
        });
    }
}

function show_ajax_result(result) {

    if (
        !(/^\{\"error\"\:\S*/.test(result)) && result != '{}'
    ) {
        fulltext = JSON.parse(result);

        search_end = new Date();

        for (var i in fulltext) {
            if (fulltext.hasOwnProperty(i))
                fulltext[i]["poradie"] = i;
        }

        fulltext.sort(fulltext_elastic_sort);
        var pocet_event = 0;
        var pocet_article = 0;

        if (Array.isArray(fulltext) && result.json !== 0) {

            HTML = new Array();
            HTML = HTML_NPodujatie.length == 0 ? new Array() : HTML_NPodujatie;
            
            HTML_article = new Array();

            for (var i in fulltext) {
                if (fulltext.hasOwnProperty(i)) {
                    if (fulltext[i].type == "articles") {
                        ShowElasticResult(HTML_article, search_item_poradie, fulltext[i]);
                        pocet_article++;
                    }
                    if (window.location.href.indexOf("/Articles") == -1) {
                        if (fulltext[i].type == "events") {
                            ShowElasticResult(HTML, search_item_poradie, fulltext[i]);
                            pocet_event++;
                        }
                    }

                    /*if (pocet_event >= 3) {
                        for (var x in HTML_NPodujatie) {
                            HTML_article.push(HTML_NPodujatie[x]);
                        }
                    }*/

                    search_item_poradie++;
                }
            }

            $("#fulscreensearch-events-count").html(PocetVysledkov(pocet_event));
            $("#fulscreensearch-article-count").html(PocetVysledkov(pocet_article));


            if (pocet_event == 0) {
                $("#search_li_podujatia").addClass("hidden");
            }
            else {
                $("#search_li_podujatia").removeClass("hidden");
                $("#search_li_podujatia button span").html("" + pocet_event);
            }
            if (pocet_article == 0) {
                $("#search_li_clanky").addClass("hidden");
            }
            else {
                $("#search_li_clanky").removeClass("hidden");
                $("#search_li_clanky button span").html("" + pocet_article);
            }



            if (HTML.length > 0) {
                $("#fulscreensearch-events").removeClass("hidden");
                $("#fulscreensearch-events .list-group.main").html(HTML.join(''));
            }
            else {
                $("#fulscreensearch-events").addClass("hidden");
                $("#fulscreensearch-events .list-group.main").html("");
            }

            if (HTML_article.length > 0) {
                $("#fullscreensearch-articles").removeClass("hidden");
                $("#fullscreensearch-articles .list-group.main").html(HTML_article.join(''));
            }
            else {
                $("#fullscreensearch-articles").addClass("hidden");
                $("#fullscreensearch-articles .list-group.main").html("");
            }
            

            var _lang = lang["search_speedinfo_1"];
            if (search_item_poradie > 2 && search_item_poradie < 5) _lang = lang["search_speedinfo_2_4"];
            if (search_item_poradie > 5) _lang = lang["search_speedinfo_5"];
            
            if (!isnull(search_end) && !isnull(search_start))
                $("#fullscreensearch-spead-info").html(_lang.replace("{0}", search_item_poradie).replace("{1}", (search_end.getTime() - search_start.getTime())));
            else
                $("#fullscreensearch-spead-info").html("");

            search_item_poradie = 0;
            Prirad_id_search("fulscreensearch-Precise");
            Prirad_id_search("fulscreensearch-events");
            Prirad_id_search("fullscreensearch-articles");
            
            Prirad_id_search("fullscreensearch-kategorie");
            Prirad_id_search("fullscreensearch-Mesto");
            Prirad_id_search("fullscreensearch-Hladisko");
            Prirad_id_search("fullscreensearch-Filter");


            if ($("#search-item-result-1").length == 1) {
                $("#search-item-result-1").addClass("active");
                search_item_selected = 1;
            }

        }
    }
}

function ShowElasticResult(HTML, search_item_poradie, fulltext) {

    if (fulltext.location == 'bg')
        return;

    if (fulltext.type == "articles") {

        var url = absoluteUri;
        var l = fulltext['location'];
        if (l == lokalita || (lokalita == 'empik' && l == 'ik')) {
            url = url + 'Article/' + fulltext["id"];
        }
        else {
            url = url.replace("." + lokalita, "." + l);
            url = url + 'Article/' + fulltext["id"];
        }

        HTML.push('<a class="list-group-item" href="' + url + '">');
        //HTML.push('    <div class="event-picture"><img alt="img" class="img-responsive" src=""></div>');
        HTML.push('    <div class="event-info">');
        HTML.push('        <div class="event-name">' + fulltext["headline"] + '</div>');
        //HTML.push('        <div class="event-dates">10.5.2017 - 15.5.2017</div>');
        //HTML.push('        <div class="event-dates">Trencin, Sportova hala StevoArena</div>');
        HTML.push('        <div class="flag-icon flag-icon-' + l + ' pull-right"></div>');
        HTML.push('    </div>');
        HTML.push('</a>');
    }
    if (fulltext.type == "events") {

        if (fulltext.id == 64021 && fulltext.location == "sk")
            return;

        var url = absoluteUri;
        var l = fulltext['location'];
        if (l == lokalita || (lokalita == 'empik' && l == 'ik'))
            url = linkIframe(url + 'event/' + fulltext["id"] + "?target=1");
        else
            url = url + 'Home/WKrizovatkaOut/?kam=' + lokality[l] + '&page=1&idp=' + fulltext["id"] + (window.location.href.indexOf("iframe") != -1 ? "&iframe" : "");

        
        var img_src = '';
        var min_datum = new Date(2200, 1, 1, 0, 0, 0, 0);
        var max_datum = new Date(2000, 1, 1, 0, 0, 0, 0);
        var popis_datum = "";
        var popis_hladiska = "";
        var hladiska = new Array();
        var hladiska_pocet = 0;

        if (l == lokalita || (lokalita == 'empik' && l == 'ik')) {
            var podujatie_out = dic_podujatie_out[fulltext.id];

            if (isnull(podujatie_out)) {
                //img_src = "https://static.ticketportal." + lokalita + "/images/podujatie/default/o250x250-600x600_ticketportal.jpg";
                img_src = "https://www.ticketportal.sk/event/imageL/" + l + "/" + fulltext["id"] + "?rozmer=250";

                HTML.push('<a class="list-group-item" href="' + url + '">');
                HTML.push('     <div class="event-picture"><img alt="img" class="img-responsive" src="' + img_src + '"></div>');
                HTML.push('    <div class="event-info">');
                HTML.push('        <div class="event-name">' + fulltext["headline"] + '</div>');
                HTML.push('        <div class="flag-icon flag-icon-' + l + ' pull-right"></div>');
                HTML.push('    </div>');
                HTML.push('</a>');

                return;
            }

            for (var i in podujatie_out.podujatia) {
                if (podujatie_out.podujatia.hasOwnProperty(i)) {
                    var podujatie = podujatie_out.podujatia[i];
                    if (img_src == "")
                        img_src = podujatie.obrazok;

                    for (var j in podujatie.predstavenia) {
                        if (podujatie.predstavenia.hasOwnProperty(j)) {
                            var predstavenie = podujatie.predstavenia[j];

                            if (isnull(hladiska[predstavenie.hladisko.id])) {
                                hladiska[predstavenie.hladisko.id] = predstavenie.hladisko;
                                hladiska_pocet++;
                            }
                        }
                    }
                }
            }

            if (isnull(predstavenie))
                return;

            popis_datum = podujatie_out.gettextDatum();

            if (hladiska_pocet == 1) {
                var hladisko = null;
                for (var i in hladiska) {
                    if (hladiska.hasOwnProperty(i)) {
                        hladisko = hladiska[i];
                    }
                }

                popis_hladiska = hladisko.getFormatNazov(true, true);
            }
            if (hladiska_pocet == 2) {
                var hladisko1 = null;
                var hladisko2 = null;

                for (var i in hladiska) {
                    if (hladiska.hasOwnProperty(i)) {
                        if (hladisko1 == null) hladisko1 = hladiska[i];
                        else hladisko2 = hladiska[i];
                    }
                }

                if (hladisko1.mesto.nazov == hladisko2.mesto.nazov)
                    popis_hladiska = hladisko1.getFormatNazov(true, false) + ", " + hladisko1.getFormatNazov(true, false) + ", " + hladisko1.mesto.nazov;
                else
                    popis_hladiska = hladisko1.getFormatNazov(true, true) + ", " + hladisko2.getFormatNazov(true, true);
            }
            if (hladiska_pocet > 2) {
                for (var i in hladiska) {
                    if (hladiska.hasOwnProperty(i)) {
                        popis_hladiska += (popis_hladiska == "" ? "" : ", ") + hladiska[i].mesto.nazov;
                    }
                }
            }

            if (img_src.indexOf("orig_") != -1)
                img_src.replace("orig_", "o250x250-");

            if (img_src == "")
                img_src = "https://static.ticketportal." + lokalita + "/images/podujatie/default/o250x250-600x600_ticketportal.jpg";

        }
        else {
            img_src = "https://www.ticketportal.sk/event/imageL/" + l + "/" + fulltext["id"] + "?rozmer=250";
            popis_datum = " ";
            popis_hladiska = " ";
        }


        HTML.push('<a class="list-group-item" href="' + url + '">');
        HTML.push('     <div class="event-picture"><img alt="img" class="img-responsive" src="' + img_src + '"></div>');
        HTML.push('    <div class="event-info">');
        HTML.push('        <div class="event-name">' + fulltext["headline"] + '</div>');
        HTML.push('        <div class="event-dates">' + popis_datum + '</div>');
        HTML.push('        <div class="event-dates">' + popis_hladiska + '</div>');

        if (popis_hladiska.indexOf("Wiener Stadthalle") == -1) 
            HTML.push('        <div class="flag-icon flag-icon-' + l + ' pull-right"></div>');
        HTML.push('    </div>');
        HTML.push('</a>');


        /*HTML.push('<a id="search-item-result-' + search_item_poradie + '" href="' + url + '"  onclick="DOM_search_input.value = \'' + fulltext["headline"] + '\';MobileHideSearchModal();"  class="list-group-item">');
        HTML.push('  <p class="list-group-item-heading"><span>' + fulltext["headline"] + '</span><span class="flag-icon flag-icon-' + fulltext["location"].toLowerCase() + ' pull-right"></span></p>');
        HTML.push('  <p class="list-group-item-text">' + lang["podujatie"] + '<small class="pull-right"></small></p>');
        HTML.push('</a>');*/
    }
}

function Prirad_id_search(blok) {
    var items = $("#" + blok + " .list-group a");
    for (var i = 0; i < items.length; i++) {
        items[i].id = "search-item-result-" + search_item_poradie;
        search_item_poradie++;
    }
}

function PocetVysledkov(pocet) {
    if (pocet == 0)
        return lang["bezvysledkov"];

    if (pocet == 1)
        return "" + pocet + " " + lang["vysledok"];
    if (pocet > 1 && pocet < 5)
        return "" + pocet + " " + lang["vysledky"];

    return "" + pocet + " " + lang["vysledkov"];
}

function fulltext_elastic_sort(a, b) {
    if (a.location == lokalita && b.location != lokalita)
        return -1;
    if (a.location != lokalita && b.location == lokalita)
        return 1;

    if (a.poradie < b.poradie)
        return -1;
    
    return 1;
}

// Zavola vyhladanie na servery
function old_search_ajax() {
    if (searchAjax == false) {
        searchAjax = true;
        searchAjaxText = DOM_search_input.value;

        $.ajax({
            url: absoluteUri + "Grid/fulltext?search=" + searchAjaxText
        }).done(function (data) {
            eval(data);
            old_show_ajax_result(fulltext);
            searchAjax = false;
        }).fail(function () {
            searchAjax = false;
        });
    }
}

// Zobrazy vysledky vyhladavania zo servera
function old_show_ajax_result(fulltext) {

    if (fulltext.length != 0) {
        fulltext.sort(ajax_result_sort)
        HTML = new Array();


        var l = fulltext[0][1].toLowerCase()
        var c = 0;
        for (var i in fulltext) {
            if (fulltext.hasOwnProperty(i)) {
                // Ak je podujatie a zaroven podujatie uz nie je zobrazene rychlym vyhladanim || ak je npodujatie a zaroven nie je zobrazene rychlym vyhladanim
                if ((fulltext[i][3] == 1 && isnull(buff_podujatie[fulltext[i][0]])) || (fulltext[i][3] == 2 /*&& isnull(buff_npodujatie[fulltext[i][0]])*/)) {

                    if (fulltext[i][1].toLowerCase() != l)      // Detekuje zmenu krajiny, s kazdej je povoleny max. 5 vysledkov
                    {
                        l = fulltext[i][1].toLowerCase();
                        c = 0;
                    }

                    if (c < 5) {

                        if (fulltext[i][3] == 1) {

                            var url = absoluteUri;
                            var l = fulltext[i][1];
                            if (l == lokalita)
                                url = url + 'event/' + fulltext[i][0];
                            else
                                url = url + 'Home/WKrizovatkaOut/?kam=' + lokality[l] + '&page=1&idp=' + fulltext[i][0];


                        
                            img_src = "https://www.ticketportal.sk/event/imageL/" + l + "/" + fulltext[i][0] + "?rozmer=250";
                            popis_datum = " ";
                            popis_hladiska = " ";
                       
                            

                            HTML.push('<a class="list-group-item" href="' + url + '">');
                            HTML.push('     <div class="event-picture"><img alt="img" class="img-responsive" src="' + img_src + '"></div>');
                            HTML.push('    <div class="event-info">');
                            HTML.push('        <div class="event-name">' + fulltext[i][2] + '</div>');
                            HTML.push('        <div class="event-dates">' + popis_datum + '</div>');
                            HTML.push('        <div class="event-dates">' + popis_hladiska + '</div>');
                            HTML.push('        <div class="flag-icon flag-icon-' + l + ' pull-right"></div>');
                            HTML.push('    </div>');
                            HTML.push('</a>');

                            /*HTML.push('<a id="search-item-result-' + search_item_poradie + '" href="' + url + '"  onclick="DOM_search_input.value = \'' + fulltext[i][2] + '\';MobileHideSearchModal();"  class="list-group-item">');
                            HTML.push('  <p class="list-group-item-heading"><span>' + fulltext[i][2] + '</span><span class="flag-icon flag-icon-' + fulltext[i][1].toLowerCase() + ' pull-right"></span></p>');
                            HTML.push('  <p class="list-group-item-text">' + lang["podujatie"] + '<small class="pull-right"></small></p>');
                            HTML.push('</a>');*/
                            search_item_poradie++;
                        }
                        if (fulltext[i][3] == 2) {
                            var objekt = dic_NPodujatie[fulltext[i][0]];

                            var url = absoluteUri;
                            var l = fulltext[i][1];
                            if (l == lokalita)
                                url = url + 'nevent/' + fulltext[i][0];
                            else
                                url = url + 'Home/WKrizovatkaOut/?kam=' + lokality[l] + '&page=6&idp=' + fulltext[i][0];

                            /*HTML.push('<a id="search-item-result-' + search_item_poradie + '" href="' + url + '"  onclick="DOM_search_input.value = \'' + fulltext[i][2] + '\';MobileHideSearchModal();"  class="list-group-item">');
                            HTML.push('  <p class="list-group-item-heading"><span>' + fulltext[i][2] + '</span><span class="flag-icon flag-icon-' + fulltext[i][1].toLowerCase() + ' pull-right"></span></p>');
                            HTML.push('  <p class="list-group-item-text">' + '&nbsp;' + '<small class="pull-right">' + (isnull(objekt) ? '&nbsp;' : lang["pocetVysledkov"] + ' ' + objekt.pocetPodujatiOUT) + '</small></p>');
                            HTML.push('</a>');*/

                            HTML.push('<a class="list-group-item" href="' + url + '">');
                            HTML.push('     <div class="event-picture"></div>');
                            HTML.push('    <div class="event-info">');
                            HTML.push('        <div class="event-name">' + fulltext[i][2] + '</div>');
                            HTML.push('        <div class="event-dates"></div>');
                            HTML.push('        <div class="event-dates"></div>');
                            HTML.push('        <div class="flag-icon flag-icon-' + l + ' pull-right"></div>');
                            HTML.push('    </div>');
                            HTML.push('</a>');

                            search_item_poradie++;
                        }

                        buff_podujatie[fulltext[i][0]] = 0;
                    }

                    c++;
                }
            }
        }
        $("#fulscreensearch-events").removeClass("hidden");
        $("#fulscreensearch-events .list-group.main").html(HTML.join(''));
        //$(DOM_search_result).html($(DOM_search_result).html() + HTML.join(''));
    }
}

SearchItem = $class({

    constructor: function (id, nazov) {
        this.id = id;
        this.nazov = nazov;
        this.nazovTSA = toTSA(this.nazov);
        dic_kraje[this.id] = this;
        this.okresi = new Array();
        this.typObjektu = ObjectType.Kraj;

        addToIndexAlfa(this);
    }
});

// Zoraduje vysledky vyhladavania podla skore, typ objektu, poctu vysledkov
function search_input_sort(a, b) {
    if (a[1].nazov.toLowerCase() == "smetanova litomyšl program 2019")
        return -1;

    if (a[0] < b[0]) return 1;
    if (a[0] == b[0]) {
        if (a[1].typObjektu < b[1].typObjektu) return -1;
        if (a[1].typObjektu == b[1].typObjektu) {
            if (a[1].pocet_podujati < b[1].pocet_podujati) return 1;
            if (a[1].pocet_podujati == b[1].pocet_podujati) return 0;
            return -1;
        }
        return 1;
    }
    return -1;
}


function ajax_result_sort(a, b) {
    if (prioritySort[lokalita][a[1]] > prioritySort[lokalita][b[1]]) return -1;
    if (prioritySort[lokalita][a[1]] < prioritySort[lokalita][b[1]]) return 1;

    if (a[2] > b[2]) return 1;
    if (a[2] < b[2]) return -1;

    return 0;
}

var prioritySort = new Array();
prioritySort["sk"] = new Array();
prioritySort["sk"]["sk"] = 5;
prioritySort["sk"]["cz"] = 4;
prioritySort["sk"]["hu"] = 3;
prioritySort["sk"]["pl"] = 2;
prioritySort["sk"]["bg"] = 1;

prioritySort["cz"] = new Array();
prioritySort["cz"]["cz"] = 5;
prioritySort["cz"]["sk"] = 4;
prioritySort["cz"]["pl"] = 3;
prioritySort["cz"]["hu"] = 2;
prioritySort["cz"]["bg"] = 1;

prioritySort["hu"] = new Array();
prioritySort["hu"]["hu"] = 5;
prioritySort["hu"]["sk"] = 4;
prioritySort["hu"]["cz"] = 3;
prioritySort["hu"]["pl"] = 2;
prioritySort["hu"]["bg"] = 1;

prioritySort["pl"] = new Array();
prioritySort["pl"]["pl"] = 5;
prioritySort["pl"]["sk"] = 4;
prioritySort["pl"]["cz"] = 3;
prioritySort["pl"]["hu"] = 2;
prioritySort["pl"]["bg"] = 1;

prioritySort["bg"] = new Array();
prioritySort["bg"]["bg"] = 5;
prioritySort["bg"]["hu"] = 4;
prioritySort["bg"]["sk"] = 3;
prioritySort["bg"]["cz"] = 2;
prioritySort["bg"]["pl"] = 1;



// Porovna dva texty ktore uz su prevedene do TSA
// a - retazec v ktorom hladameg
// b - vyraz ktory vyhladavame
// vracia cislo od 0.0 do 1.0 kde 1.0 reprezentuje uplnu zhodu
function compare_text(a, b) {

    var pocet_b = 0;
    var score = 1.0;                                    // Pociatocne score
    var pocet_chyba = 0;

    var kons_notdiak = 4;                               // Zhoda bez diakrityky
    var kons_err = 1.0;                                 // Nezhoda v znaku

    // Cim vecsi vyhladavany retazec tym menej budu chyby ovplyvnovat vysledne score
    if (b.length > 5) { kons_err = 1.2; }
    if (b.length > 8) { kons_err = 1.4; }
    if (b.length > 10) { kons_err = 1.6; }


    for (i = 0; i < a.length; i++) {
        if (pocet_b >= b.length)
            break;

        if (a[i] == b[pocet_b]) {                    // Uplna zhoda
            score *= kons_notdiak;
            pocet_b++;
            pocet_chyba = 0;
        }
        else {
            score *= kons_err;

            // vynechal znak ? retazec "Offspring" a hladal "Ofspring"
            if ((i + 1) < a.length) {
                if (a[i + 1] == b[pocet_b]) {
                    pocet_b--;
                    pocet_chyba = 0;
                }
            }
            else {                        // Ak su chyby dve zasebou koncime prehladavanie, hladame odznovu
                pocet_chyba++;
                if (pocet_chyba == 2) {
                    break;
                }
            }
            pocet_b++;
        }
    }

    return (score / Math.pow(4, (b.length))) * b.length;
}

// 38 hore
// 40 dole
// 13 enter
$(document).keydown(function (event) {
    if (search_item_poradie != 0) {
        if ($("#fullscreen-search").hasClass("in")) {

            // sipka dole
            if (event.which == 40) {

                if (search_item_selected == search_item_poradie - 1) return;

                search_item_selected++;

                $('a.list-group-item.active').removeClass("active");
                $('#search-item-result-' + search_item_selected).addClass("active");

                event.preventDefault();
            }

            //sipka hore
            if (event.which == 38) {
                if (search_item_selected <= 0) return;

                search_item_selected--;
                $('a.list-group-item.active').removeClass("active");
                $('#search-item-result-' + search_item_selected).addClass("active");
                event.preventDefault();
            }

            // enter
            if (event.which == 13) {
                $('#search-item-result-' + search_item_selected)[0].click();
                event.preventDefault();
            }
        }
    }
});

// end region

//******************************
//*** Region Objektovy model ***
//******************************

var dic_kraje = new Array();            // Zoznam vsetkych krajou podla id
var dic_okresi = new Array();           // Zoznam vsetkych okresou podla id
var dic_mesta = new Array();            // Zoznam vsetkych miesto podla id
var dic_kategoria = new Array();        // Zoznam vsetkych kategorii podla id
var dic_hladisko = new Array();         // Zoznam vsetkych hladisk podla id
var dic_podujatie = new Array();        // Zoznam podujati podla id
var dic_podujatie_out = new Array();    // Zoznam podujati_out
var dic_NPodujatie = new Array();       // Zoznam Npodujati
var dic_predstavenie = new Array();     // Zoznam predstaveni podla id
var dic_slider = new Array();           // Zoznam slidrov podla idecka

var list_TopPodujatia = new Array();    // Zoznam top podujati podla poradia ako sa maju zobrazit
var list_NoveAkcie = new Array();       // Zoznam novych akcii -||-
var list_ZlavyAkcie = new Array()       // Zoznam zliav -||-

var dic_ZlavyAkcie = new Array();
var dic_TopPodujatia = new Array();
var dic_NoveAkcie = new Array();


var index_datum = new Array();          // indexuje predstavenia podla datumu v ktorom sa konaju
var index_alfa = new Array();           // indexuje objekty podla prveho pismena
var index_PodujatieOUT_Npodujatie = new Array();


ObjectType = {
    Kraj: 1,
    Okres: 2,
    Mesto: 3,
    Kategoria: 4,
    Hladisko: 5,
    Podujatie_out: 6,
    Podujatie: 7,
    NPodujatie: 8
}

Kraj = $class({

    constructor: function (id, nazov) {
        this.id = id;
        this.nazov = nazov;
        this.nazovTSA = toTSA(this.nazov);
        dic_kraje[this.id] = this;
        this.okresi = new Array();
        this.typObjektu = ObjectType.Kraj;

        addToIndexAlfa(this);
    }
});

Okres = $class({

    constructor: function (id, nazov, id_kraj) {
        this.id = id;
        this.nazov = nazov;
        this.nazovTSA = toTSA(this.nazov);
        this.typObjektu = ObjectType.Okres;

        if (id_kraj != null)
            this.kraj = dic_kraje[id_kraj];
        else
            this.kraj = null;

        this.mesta = new Array();

        dic_okresi[this.id] = this;

        if (id_kraj != null)
            this.kraj.okresi[this.id] = this;

        addToIndexAlfa(this);
    }
});

Mesto = $class({

    constructor: function (id, nazov, id_okres) {

        if (id_okres == -1)
            id_okres = null;

        this.id = id;
        this.nazov = nazov;
        this.nazovTSA = toTSA(this.nazov);
        this.typObjektu = ObjectType.Mesto;

        if (id_okres != null)
            this.okres = dic_okresi[id_okres];
        else
            this.okres = null;

        dic_mesta[this.id] = this;

        if (this.okres != null)
            this.okres.mesta[this.id] = this;

        this.predstavenia = new Array();
        this.podujatia = new Array();
        this.pocet_podujati = 0;

        addToIndexAlfa(this);
    }
});

Kategoria = $class({

    constructor: function (id, nazov, id_rodic, cssClass) {
        this.id = id;
        this.nazov = nazov;
        this.nazovTSA = toTSA(this.nazov);
        this.id_rodic = id_rodic;
        this.typObjektu = ObjectType.Kategoria;
        this.cssClass = cssClass;

        this.rodic = null;
        this.potomkovia = null;

        this.podujatia = new Array();
        this.pocet_podujati = 0;

        dic_kategoria[this.id] = this;

        addToIndexAlfa(this);
    },

    getCssClass: function () {
        return this.getHlavna().cssClass;
    },

    getHlavna: function () {
        if (this.id_rodic == null)
            return this;
        else
            return this.rodic.getHlavna();
    },

    getNazov: function () {

        return this.getHlavna().nazov;
        /*if (this.id_rodic == null)
            return this.nazov;
        else
            return this.rodic.nazov + ' - ' + this.nazov;*/
    }
});

Hladisko = $class({

    constructor: function (id, nazov, id_mesto, adresa, psc, telefon, email, www, LAT, LON) {
        this.id = id;
        this.nazov = nazov;
        this.nazovTSA = toTSA(this.nazov);
        this.mesto = dic_mesta[id_mesto];
        this.adresa = adresa;
        this.psc = psc;
        this.telefon = telefon;
        this.email = email;
        this.www = www;
        this.LAT = LAT;
        this.LON = LON;
        this.typObjektu = ObjectType.Hladisko;

        this.predstavenia = new Array();
        this.podujatia = new Array();
        this.pocet_podujati = 0;

        dic_hladisko[this.id] = this;
        addToIndexAlfa(this);
    },

    getFormatNazov: function (adresa, mesto) {

        var formatedNazov = "";
        if (isnull(this.mesto)) {
            formatedNazov = this.nazov;
        }
        else {
            formatedNazov = (this.nazov.indexOf(this.mesto.nazov) == -1 ? this.nazov : this.nazov.replace(this.mesto.nazov, ""));
        } 

        if (formatedNazov.substring(formatedNazov.length - 2) == ", ")
            formatedNazov = formatedNazov.substring(0, formatedNazov.length - 2);

        if (formatedNazov.substring(formatedNazov.length - 1) == ",")
            formatedNazov = formatedNazov.substring(0, formatedNazov.length - 1);

        if (adresa && mesto)
            return formatedNazov + ", " + this.adresa + " " + (isnull(this.mesto) ? mesto : this.mesto.nazov);

        if (adresa && !mesto)
            return formatedNazov + ", " + this.adresa;

        if (!adresa && !mesto)
            return formatedNazov;
    },

    getFormatAdresa: function () {
        return this.adresa + ", " + this.mesto.nazov;
    }
});

Podujatie_out = $class({
    constructor: function (id, nazov, url, klucove_slova, ExternalUrl) {
        this.id = id;
        this.nazov = nazov;
        this.nazovTSA = toTSA(this.nazov + " " + klucove_slova);
        this.url = url;
        this.ExternalUrl = ExternalUrl;
        this.rychlyNakup = false;
        this.typObjektu = ObjectType.Podujatie_out;
        this.datumi = null;

        this.podujatia = new Array();
        dic_podujatie_out[this.id] = this;
        addToIndexAlfa(this);

        this.stav_itemu = 0;                //  0-nezistene, 1 normalny, 2 viac info, 3 - vypredane, 4 zrusene, 5 - pripravujeme
        this.status = "";
        this.zaciatok_predaja = null;
    },

    spracuj_stavy_predstaveni: function () {

        var koniec = false;

        for (var id_podujatie in this.podujatia) {
            if (this.podujatia.hasOwnProperty(id_podujatie)) {
                var podujatie = this.podujatia[id_podujatie];
                for (var id_predstavenie in podujatie.predstavenia) {
                    if (podujatie.predstavenia.hasOwnProperty(id_predstavenie)) {
                        var predstavenie = podujatie.predstavenia[id_predstavenie];

                        if (predstavenie.stav == 1) {
                            this.stav_itemu = 1;
                            this.status = "";
                            koniec = true;
                        }

                        if (predstavenie.stav == 9 && (this.stav_itemu == 0 || this.stav_itemu == 5)) {
                            this.stav_itemu = 5;
                            if (this.zaciatok_predaja == null || predstavenie.zaciatok_predaja < this.zaciatok_predaja) {
                                this.status = Pripravujeme_status_text(predstavenie.zaciatok_predaja);
                                this.zaciatok_predaja = predstavenie.zaciatok_predaja;
                            }
                        }

                        if (predstavenie.stav == 7 && (this.stav_itemu == 0 || this.stav_itemu == 4 || this.stav_itemu == 5)) {
                            this.stav_itemu = 4;
                            this.status = lang["StatusPerf7C"];
                        }

                        if ((predstavenie.stav == 8 || predstavenie.stav == 6 || predstavenie.stav == 16) && (this.stav_itemu == 0 || this.stav_itemu == 5)) {
                            this.stav_itemu = 3;

                            if (predstavenie.stav == 16) {
                                this.status = lang["StatusPerf16C"];
                            } else {
                                if (predstavenie.stav == 6 || predstavenie.stav == 16)
                                    this.status = lang["StatusPerf6C"];
                                else
                                    this.status = lang["StatusPerf8C"];
                            }
                        }

                        if (predstavenie.stav > 1 && predstavenie.stav < 6 && this.stav_itemu != 1) {
                            this.stav_itemu = 2;
                            this.status = lang["ViacInfo"];
                        }
                    }
                }
            }
        }
    },
    
    gettextDatum: function () {
        if (this.datumi != null)
            return this.datumi;

        var min = new Date(2200, 1, 1, 0, 0, 0, 0);
        var max = new Date(1900, 1, 1, 0, 0, 0, 0);
        var _max = new Date(1900, 1, 1, 0, 0, 0, 0);

        for (var p in this.podujatia) {
            for (var i in this.podujatia[p].predstavenia) {
                var predstavenie = this.podujatia[p].predstavenia[i];

                var allow_zaciatok = true;
                var allow_koniec = true;

                // V tychto pripadoch sa standardne nezobrazuje datum
                if (predstavenie.id_kategoria_predstavenie == 1 || predstavenie.id_kategoria_predstavenia == 2 || predstavenie.id_kategoria_predstavenia == 4 || predstavenie.id_kategoria_predstavenia == 5 || predstavenie.id_kategoria_predstavenia == 6 || predstavenie.id_kategoria_predstavenia == 8) {
                    allow_zaciatok = false;
                    allow_koniec = false;
                    if (predstavenie.TypZobrazeniaDatumu == 1)
                        allow_zaciatok = true;
                    if (predstavenie.TypZobrazeniaDatumu == 2) {
                        allow_zaciatok = true;
                        allow_koniec = true;
                    }
                }

                if (predstavenie.datumi instanceof Date) {
                    if (predstavenie.datumi < min && allow_zaciatok) {
                        min = predstavenie.datumi;
                    }
                    if (predstavenie.datumi > max && allow_zaciatok) {
                        max = predstavenie.datumi;
                    }
                    if (predstavenie.datumi > max && allow_koniec) {
                        max = predstavenie.datumi;
                    }
                }
                else {
                    for (var d in predstavenie.datumi) {
                        if (predstavenie.datumi[d] < min && allow_zaciatok) {
                            min = predstavenie.datumi[d];
                        }
                        if (predstavenie.datumi[d] > max && allow_zaciatok) {
                            max = predstavenie.datumi[d];
                        }
                        if (predstavenie.datumi[d] > max && allow_koniec) {
                            max = predstavenie.datumi[d];
                        }
                    }
                }
            }
        }

        if (min.getTime() == max.getTime() || max.getTime() == _max.getTime())
            this.datumi = min.getDate() + " " + Date_strMonth_2(min) + " " + min.getFullYear();
        else
            this.datumi = Format_Range_Datum(min, max);

        if (min.getFullYear() == 2200)
            this.datumi = "";

        return this.datumi;
    }
});

function Pripravujeme_status_text(datum) {
    var teraz = new Date();
    var dnes_start = new Date(teraz.getFullYear(), teraz.getMonth(), teraz.getDate(), 0, 0, 0, 0);
    var dnes_end = new Date(dnes_start.getTime() + 24 * 60 * 60 * 1000 - 1000);
    var zajtra_start = new Date(dnes_end.getTime() + 1000);
    var zajtra_end = new Date(zajtra_start + 24 * 60 * 60 * 1000 - 1000);



    if (datum > dnes_start && datum < dnes_end)
        return lang["VPredajiDnes"] + " " + (datum.getHours() < 9 ? "0" : "") + datum.getHours() + ":" + (datum.getMinutes() < 9 ? "0" : "") + datum.getMinutes();

    if (datum > zajtra_start && datum < zajtra_end)
        return lang["VPredajiZajtra"] + " " + (datum.getHours() < 9 ? "0" : "") + datum.getHours() + ":" + (datum.getMinutes() < 9 ? "0" : "") + datum.getMinutes();

    if ((datum.getTime() - teraz.getTime()) > 63072000000)//viac ako 2 roky
        return lang["StatusPerf9C"];
    else
        return lang["VPredajiOd"] + " " + DateToString(datum);
}

Podujatie = $class({

    constructor: function (id, nazov, id_kategoria, vedlajsie_kategorie, priorita, obrazok, id_podujatie_out, zvyraznenie, skore_pocet) {

        if (id == -1)
            return;

        this.id = id;
        this.nazov = nazov;
        this.nazovTSA = toTSA(this.nazov);
        this.kategoria = dic_kategoria[id_kategoria];
        this.obrazok = obrazok;
        this.id_podujatie_out = id_podujatie_out;

        this.fitness = 0;
        this.priorita = priorita;
        this.zvyraznenie = zvyraznenie;
        this.skore_pocet = skore_pocet;
        this.datumi = null;

        if (this.kategoria == null)
            this.kategoria = dic_kategoria[3];

        this.predstavenia = new Array();

        // Tu  zacina alchymia npodujatia, kategorie mozu v indexe podujati obsahovat aj npodujatia namiesto podujatia, vyuzivame polymorfizmus 
        if (isnull(index_PodujatieOUT_Npodujatie[this.id_podujatie_out]) == false)
            this.NPodujatie = index_PodujatieOUT_Npodujatie[this.id_podujatie_out];
        else
            this.NPodujatie = null;

        var fakePodID = this.NPodujatie == null ? this.id : this.NPodujatie.id;

        if (isnull(this.kategoria.podujatia[fakePodID])) {
            this.kategoria.podujatia[fakePodID] = this.NPodujatie == null ? this : this.NPodujatie;
            this.kategoria.pocet_podujati++;
        }

        if (this.kategoria.rodic != null) {
            if (isnull(this.kategoria.rodic[fakePodID])) {
                this.kategoria.rodic.podujatia[fakePodID] = this.NPodujatie == null ? this : this.NPodujatie;
                this.kategoria.rodic.pocet_podujati++;
            }
        }

        if (vedlajsie_kategorie != null) {
            for (var i in vedlajsie_kategorie) {
                if (vedlajsie_kategorie.hasOwnProperty(i)) {
                    var vedlajsia_kateogiria = dic_kategoria[vedlajsie_kategorie[i]];
                    if (isnull(vedlajsia_kateogiria) == false) {
                        if (isnull(vedlajsia_kateogiria.podujatia[fakePodID])) {
                            vedlajsia_kateogiria.podujatia[fakePodID] = this.NPodujatie == null ? this : this.NPodujatie;;
                            vedlajsia_kateogiria.pocet_podujati++;
                        }

                        if (vedlajsia_kateogiria.rodic != null) {
                            if (isnull(vedlajsia_kateogiria.rodic[fakePodID])) {
                                vedlajsia_kateogiria.rodic.podujatia[fakePodID] = this.NPodujatie == null ? this : this.NPodujatie;;
                                vedlajsia_kateogiria.rodic.pocet_podujati++;
                            }
                        }
                    }
                }
            }
        }


        this.typObjektu = ObjectType.Podujatie;

        dic_podujatie[this.id] = this;
        dic_podujatie_out[this.id_podujatie_out].podujatia[this.id] = this;

        addToIndexAlfa(this);
    },
    
    gettextDatum: function () {

        if (this.datumi != null)
            return this.datumi;

        var min = new Date(2200, 1, 1, 0, 0, 0, 0);
        var max = new Date(1900, 1, 1, 0, 0, 0, 0);
        var _max = new Date(1900, 1, 1, 0, 0, 0, 0);

        for (var i in this.predstavenia) {
            var predstavenie = this.predstavenia[i];

            var allow_zaciatok = true;
            var allow_koniec = true;

            // V tychto pripadoch sa standardne nezobrazuje datum
            if (predstavenie.id_kategoria_predstavenie == 1 || predstavenie.id_kategoria_predstavenia == 2 || predstavenie.id_kategoria_predstavenia == 4 || predstavenie.id_kategoria_predstavenia == 5 || predstavenie.id_kategoria_predstavenia == 6 || predstavenie.id_kategoria_predstavenia == 8)
            {
                allow_zaciatok = false;
                allow_koniec = false;
                if (predstavenie.TypZobrazeniaDatumu == 1)
                    allow_zaciatok = true;
                if (predstavenie.TypZobrazeniaDatumu == 2) {
                    allow_zaciatok = true;
                    allow_koniec = true;
                }
            }

            if (predstavenie.datumi instanceof Date) {
                if (predstavenie.datumi < min && allow_zaciatok) {
                    min = predstavenie.datumi;
                }
                if (predstavenie.datumi > max && allow_zaciatok) {
                    max = predstavenie.datumi;
                }
                if (predstavenie.datumi > max && allow_koniec) {
                    max = predstavenie.datumi;
                }
            }
            else {
                for (var d in predstavenie.datumi) {
                    if (predstavenie.datumi[d] < min && allow_zaciatok) {
                        min = predstavenie.datumi[d];
                    }
                    if (predstavenie.datumi[d] > max && allow_zaciatok) {
                        max = predstavenie.datumi[d];
                    }
                    if (predstavenie.datumi[d] > max && allow_koniec) {
                        max = predstavenie.datumi[d];
                    }
                }
            }
        }

        if (min.getTime() == max.getTime() || max.getTime() == _max.getTime())
            this.datumi = DateToString(min, false); //min.getDate() + " " + Date_strMonth_2(min) + " " + min.getFullYear();
        else
            this.datumi = Format_Range_Datum_small(min, max);

        if (min.getFullYear() == 2200)
            this.datumi = "";

        return this.datumi;
    }
});

var virtualPodujatieOUTID = 2147483648;

NPodujatie = $class({
    constructor: function (id, nazov, obrazok, ZobrazenieVTimeline) {
        this.id = id;
        this.origID = id - 2147483648;
        this.nazov = nazov;
        this.nazovTSA = toTSA(this.nazov);
        this.obrazok = obrazok;
        this.ZobrazenieVTimeline = ZobrazenieVTimeline;
        this.typObjektu = ObjectType.NPodujatie;

        this.PodujatiaOUT = new Array();
        this.pocetPodujatiOUT = 0;
        this.datumi = null;

        // Dedene  zpodujatia
        this.kategoria = null;
        this.priorita = null;
        this.zvyraznenie = false;
        this.skore_pocet = null;
        this.predstavenia = new Array();
        this.id_podujatie_out = null;

        dic_NPodujatie[this.id] = this;
        addToIndexAlfa(this);
    },

    SpracujPodujatia: function () {
        for (var id_podujatie_out in this.PodujatiaOUT) {
            if (this.PodujatiaOUT.hasOwnProperty(id_podujatie_out)) {
                var podujatie_out = dic_podujatie_out[id_podujatie_out];

                for (var id_podujatie in podujatie_out.podujatia) {
                    if (podujatie_out.podujatia.hasOwnProperty(id_podujatie)) {
                        var podujatie = podujatie_out.podujatia[id_podujatie];

                        if (this.kategoria == null)
                            this.kategoria = podujatie.kategoria;
                        this.priorita += podujatie.priorita;
                        this.skore_pocet += podujatie.skore_pocet;
                        this.zvyraznenie = podujatie.zvyraznenie ? true : this.zvyraznenie;
                    }
                }
            }
        }
    },

    SpracujIndex: function () {
        if (this.ZobrazenieVTimeline == 0) {
            for (var id_podujatie_out in this.PodujatiaOUT) {
                if (this.PodujatiaOUT.hasOwnProperty(id_podujatie_out)) {
                    index_PodujatieOUT_Npodujatie[id_podujatie_out] = this;
                }
            }
        }
    },

    VirtualizujPodujatieOUT: function () {
        virtualPodujatieOUTID += 1;
        var virtualPodujatieOUT = new Podujatie_out(virtualPodujatieOUTID, this.nazov, "", "");
        this.id_podujatie_out = virtualPodujatieOUT.id;
    },
    
    gettextDatum: function () {

        if (this.datumi != null)
            return this.datumi;

        var min = new Date(2200, 1, 1, 0, 0, 0, 0);
        var max = new Date(1900, 1, 1, 0, 0, 0, 0);

        for (var i in this.predstavenia) {
            var predstavenie = this.predstavenia[i];

            var allow_zaciatok = true;
            var allow_koniec = true;

            // V tychto pripadoch sa standardne nezobrazuje datum
            if (predstavenie.id_kategoria_predstavenie == 1 || predstavenie.id_kategoria_predstavenia == 2 || predstavenie.id_kategoria_predstavenia == 4 || predstavenie.id_kategoria_predstavenia == 5 || predstavenie.id_kategoria_predstavenia == 6 || predstavenie.id_kategoria_predstavenia == 8) {
                allow_zaciatok = false;
                allow_koniec = false;
                if (predstavenie.TypZobrazeniaDatumu == 1)
                    allow_zaciatok = true;
                if (predstavenie.TypZobrazeniaDatumu == 2) {
                    allow_zaciatok = true;
                    allow_koniec = true;
                }
            }

            if (predstavenie.datumi instanceof Date) {
                if (predstavenie.datumi < min && allow_zaciatok) {
                    min = predstavenie.datumi;
                }
                if (predstavenie.datumi > max && allow_zaciatok) {
                    max = predstavenie.datumi;
                }
                if (predstavenie.datumi > max && allow_koniec) {
                    max = predstavenie.datumi;
                }
            }
            else {
                for (var d in predstavenie.datumi) {
                    if (predstavenie.datumi[d] < min && allow_zaciatok) {
                        min = predstavenie.datumi[d];
                    }
                    if (predstavenie.datumi[d] > max && allow_zaciatok) {
                        max = predstavenie.datumi[d];
                    }
                    if (predstavenie.datumi[d] > max && allow_koniec) {
                        max = predstavenie.datumi[d];
                    }
                }
            }
        }

        if (min == max)
            this.datumi = min.getDate() + " " + Date_strMonth(min) + " " + min.getFullYear();
        else
            this.datumi = Format_Range_Datum_small(min, max);

        if (min.getFullYear() == 2200)
            this.datumi = "";

        return this.datumi;
    }
});

Predstavenie = $class({

    constructor: function (id, id_podujatie, zaciatok, koniec, den_konania, popis_konania, id_hladisko, id_javisko, id_prevadzkovatel, id_kategoria_predstavenie, stav, rychlyNakup, jeHT, zmena, zaciatok_predaja, TypZobrazeniaDatumu) {
        this.id = id;

        if (isnull(dic_podujatie[id_podujatie]))
            return;

        //Alchymia pokracuje :-), predstavenie bude odkazovat bud na podujatie alebo na npodujatie
        if (isnull(dic_podujatie[id_podujatie].NPodujatie)) {
            this.podujatie = dic_podujatie[id_podujatie];
            this.podujatieOrig = null;
        }
        else {
            this.podujatie = dic_podujatie[id_podujatie].NPodujatie;
            this.podujatieOrig = dic_podujatie[id_podujatie];
        }

        if (typeof (this.podujatie) == "undefined")
            return;

        this.zaciatok = JsonToolsToDate(zaciatok);
        this.zmena = JsonToolsToDate(zmena);
        

        if (this.zaciatok < Date_remove_hour(new Date()))
            this.zaciatok = Date_remove_hour(new Date());

        this.koniec = JsonToolsToDate(koniec);
        this.den_konania = den_konania;
        this.popis_konania = popis_konania;
        this.hladisko = dic_hladisko[id_hladisko];
        this.id_javisko = id_javisko;
        this.id_prevadzkovatel = id_prevadzkovatel;
        this.id_kategoria_predstavenie = id_kategoria_predstavenie;
        this.stav = stav;
        this.rychlyNakup = rychlyNakup;
        this.jeHT = jeHT;
        this.zaciatok_predaja = (this.stav == 9) ? JsonToolsToDate(zaciatok_predaja) : null;
        this.TypZobrazeniaDatumu = TypZobrazeniaDatumu;

        if (this.rychlyNakup == true && this.stav == 1 && this.podujatie.typObjektu == ObjectType.Podujatie)
            dic_podujatie_out[this.podujatie.id_podujatie_out].rychlyNakup = true;

        this.datumi = this.zaciatok;                                                    // Ak je predstavenie priebezne, t.j. hra sa v roznych datumoch

        if (id_kategoria_predstavenie == 0) {
            var z = Date_remove_hour(this.zaciatok).getTime();
            var k = Date_remove_hour(this.koniec).getTime();

            if (k - z >= 86400000) {                                                     // Ak je koniec v iny den ako zaciatok
                this.datumi = new Array();

                var t = z;
                while (true) {
                    var datum = new Date(t);
                    datum.setHours(23);
                    datum.setMinutes(59);
                    datum.setSeconds(59);

                    if (datum.getTime() > k) {
                        datum = new Date(k);
                        this.datumi.push(datum);
                        break;
                    }

                    this.datumi.push(datum);
                    t += 86400000;
                }
            } else {    // ak je koniec vacsi ako zaciatok ale koniec je v ten isty den ako zaciatok, tak zobrazujeme az pokial predstavenie neskonci
                if (this.zaciatok < this.koniec)
                    this.datumi = this.koniec;
            }
        }

        if (id_kategoria_predstavenie != 0) {
            if (this.koniec < this.zaciatok);
            else {                                                                      // Ak je koniec vacsi ako zaciatok

                var z = this.zaciatok.getTime();
                var k = this.koniec.getTime();

                if (k - z > 86400000) {                                                 // Ak je medzi koncom a zaciatkom viac ako 1 den, tak sa ozaj jedna o priebezne predstavenie                               

                    this.datumi = new Array();

                    for (var i = z; i < k; i += 86400000) {
                        var datum = new Date(i);
                        var den = datum.getDay();

                        var pridat = false;
                        if ((this.den_konania & 64) != 0 && den == 1)
                            pridat = true;
                        if ((this.den_konania & 32) != 0 && den == 2)
                            pridat = true;
                        if ((this.den_konania & 16) != 0 && den == 3)
                            pridat = true;
                        if ((this.den_konania & 8) != 0 && den == 4)
                            pridat = true;
                        if ((this.den_konania & 4) != 0 && den == 5)
                            pridat = true;
                        if ((this.den_konania & 2) != 0 && den == 6)
                            pridat = true;
                        if ((this.den_konania & 1) != 0 && den == 0)
                            pridat = true;

                        if (this.den_konania == -127)
                            pridat = true;

                        if (pridat)
                            this.datumi.push(datum);
                    }
                }
            }
        }

        if (!isnull(this.podujatieOrig)) {
            this.podujatieOrig.predstavenia[this.id] = this;
        }


        if (!isnull(this.podujatie)) {

            this.podujatie.predstavenia[this.id] = this;
            this.hladisko.predstavenia[this.id] = this;

            if (isnull(this.hladisko.podujatia[this.podujatie.id]) == true) {
                this.hladisko.podujatia[this.podujatie.id] = this.podujatie;
                this.hladisko.pocet_podujati++;
            }

            if (!isnull(this.hladisko.mesto)) {
                this.hladisko.mesto.predstavenia[this.id] = this;

                if (isnull(this.hladisko.mesto.podujatia[this.podujatie.id]) == true) {
                    this.hladisko.mesto.podujatia[this.podujatie.id] = this.podujatie;
                    this.hladisko.mesto.pocet_podujati++;
                }
            }
            dic_predstavenie[this.id] = this;

            if (this.datumi instanceof Date) {
                if (index_datum[Date_remove_hour(this.zaciatok).getTime()] == null)
                    index_datum[Date_remove_hour(this.zaciatok).getTime()] = new Array();

                index_datum[Date_remove_hour(this.zaciatok).getTime()][this.id] = this;
            }
            else {
                for (var i in this.datumi) {
                    if (this.datumi.hasOwnProperty(i)) {
                        if (index_datum[Date_remove_hour(this.datumi[i]).getTime()] == null)
                            index_datum[Date_remove_hour(this.datumi[i]).getTime()] = new Array();

                        index_datum[Date_remove_hour(this.datumi[i]).getTime()][this.id] = this;
                    }
                }
            }
        }
    },

    getTextDatum: function () {
        if (_in(this.id_kategoria_predstavenie, [1, 2, 4, 5, 6, 8]))
            return this.popis_konania;

        return DateToString(this.zaciatok, true);

        if (this.datumi instanceof Date)
            return DateToString(this.datumi, true);
        else
            return DateToString(this.datumi[0], true);
    },

    getTextStav: function () {
        return lang["StatusPerf" + this.stav + "C"];
    },

    getTextStavPopis: function () {
        return lang["StatusPerf" + this.stav];
    },

    getEventUrl: function () {

        if (this.podujatie.typObjektu == ObjectType.Podujatie) {

            var url = 'event/' + this.podujatie.id_podujatie_out;
            var url2 = dic_podujatie_out[this.podujatie.id_podujatie_out].url;

            return url2 == null || url2 == '' ? url : 'event/' + url2;
        }
        if (this.podujatie.typObjektu == ObjectType.NPodujatie) {
            return 'nevent/' + this.podujatie.origID;
        }
    },

    getPerformanceUrl: function () {
        return 'performance/' + this.id;
    }
});

Slider = $class({
    constructor: function (id, nazov, id_podujatie_out, linka, obrazok, priorita) {
        this.id = id;
        this.nazov = nazov;
        this.id_podujatie_out = id_podujatie_out;
        this.linka = linka;
        this.obrazok = obrazok;
        this.priorita = priorita;

        this.kategorie = new Array();
        dic_slider[this.id] = this;
    }
});

TopPodujatia = $class({
    constructor: function (id_podujatie_out, pocet, datum_od, datum_do) {
        this.podujatie_out = dic_podujatie_out[id_podujatie_out];
        this.pocet = pocet;
        this.datum_od = JsonToolsToDate(datum_od);
        this.datum_do = JsonToolsToDate(datum_do);

        if (typeof (this.podujatie_out) != 'undefined') {
            list_TopPodujatia.push(this);
            dic_TopPodujatia[id_podujatie_out] = this;
        }
    }
});

NoveAkcie = $class({
    constructor: function (id_predstavenie) {
        this.predstavenie = dic_predstavenie[id_predstavenie];

        if (isnull(this.predstavenie) == false) {
            list_NoveAkcie.push(this);
            dic_NoveAkcie[id_predstavenie] = this;
        }
    }
});

ZlavyAkcie = $class({
    constructor: function (id_predstavenie, nazov, popis, typ, zaciatok) {
        this.predstavenie = dic_predstavenie[id_predstavenie];
        this.nazov = nazov;
        this.popis = popis;
        this.typ = typ,
        this.zaciatok = JsonToolsToDate(zaciatok);

        list_ZlavyAkcie.push(this);
        dic_ZlavyAkcie[id_predstavenie] = this;
    }
});



function addToIndexAlfa(obj) {
    for (var i = 0; i < obj.nazovTSA.length; i++) {
        if (isnull(index_alfa[obj.nazovTSA[i][0]]))
            index_alfa[obj.nazovTSA[i][0]] = new Array();

        index_alfa[obj.nazovTSA[i][0]].push([obj.nazovTSA[i], obj]);
    }
}

// Spracuje data z jsws/DxGrid do objektoveho modelu
function __init__() {

    // Kraje prevedieme do objektov
    for (var i = 0; i < data_kraj.length; i += 2)
        var k = new Kraj(data_kraj[i], data_kraj[i + 1]);

    // Spracovanie okresov
    var id_okres = 0;
    for (var i = 0; i < data_okres.length; i += 3) {
        id_okres = id_okres + data_okres[i];
        var o = new Okres(id_okres, data_okres[i + 1], data_okres[i + 2]);
    }

    // Spracovanie miest
    var id_mesto = 0;
    id_okres = 0;
    for (var i = 0; i < data_mesto.length; i += 3) {
        id_mesto = id_mesto + data_mesto[i];
        id_okres = id_okres + data_mesto[i + 2];
        var o = new Mesto(id_mesto, data_mesto[i + 1], id_okres);
    }

    // Spracovenie kategorii
    for (var i = 0; i < data_kategorie.length; i += 4)
        var k = new Kategoria(data_kategorie[i], data_kategorie[i + 1], data_kategorie[i + 2], data_kategorie[i + 3]);

    // Doplnenie rodica na zaklade id_rodica
    // A rodicom priradujeme potomkov
    for (var i in dic_kategoria) {
        if (dic_kategoria.hasOwnProperty(i)) {
            var k = dic_kategoria[i];
            if (k.id_rodic != null) {
                k.rodic = dic_kategoria[k.id_rodic];

                if (k.rodic.potomkovia == null)
                    k.rodic.potomkovia = new Array();

                k.rodic.potomkovia[k.id] = k;
            }
        }
    }

    // Ak je kategoria Sport -> hokej -> khl tak sportu priradime potomka khl
    for (var i in dic_kategoria) {
        if (dic_kategoria.hasOwnProperty(i)) {
            var k = dic_kategoria[i];

            if (k.id_rodic != null) {
                if (k.rodic.id_rodic != null)
                    k.rodic.rodic.potomkovia[k.id] = k;
            }
        }
    }

    // Spracujeme hladiska
    id_mesto = 0;
    var id_hladisko = 0;
    for (var i = 0; i < data_hladisko.length; i += 10) {
        id_hladisko = id_hladisko + data_hladisko[i];
        id_mesto = id_mesto + data_hladisko[i + 2];
        var h = new Hladisko(id_hladisko, data_hladisko[i + 1], id_mesto, data_hladisko[i + 3], data_hladisko[i + 4], data_hladisko[i + 5], data_hladisko[i + 6], data_hladisko[i + 7], data_hladisko[i + 8], data_hladisko[i + 9]);
    }

    // Spracuje podujatie out
    var id_pod_out = 0;
    for (var i = 0; i < data_podujatie_out.length; i += 5) {
        id_pod_out = id_pod_out + data_podujatie_out[i];
        var po = new Podujatie_out(id_pod_out, data_podujatie_out[i + 1], data_podujatie_out[i + 2], data_podujatie_out[i + 3], data_podujatie_out[i + 4]);
    }

    // Spracujeme NPodujatie - zaklad
    for (var i = 0; i < data_nadakcia.length; i += 4) {
        var np = new NPodujatie(data_nadakcia[i] + 2147483648, data_nadakcia[i + 1], data_nadakcia[i + 2], data_nadakcia[i + 3]);
    }
    for (var i = 0; i < data_nadakcia_akcia.length; i += 2) {
        var idNpodujatie = data_nadakcia_akcia[i] + +2147483648;
        var idPodujatieOUT = data_nadakcia_akcia[i + 1];

        if (!isnull(dic_NPodujatie[idNpodujatie])) {
            dic_NPodujatie[idNpodujatie].PodujatiaOUT[idPodujatieOUT] = dic_podujatie_out[idPodujatieOUT];
            dic_NPodujatie[idNpodujatie].pocetPodujatiOUT++;
        }
    }
    for (var i in dic_NPodujatie) {
        if (dic_NPodujatie.hasOwnProperty(i)) {
            dic_NPodujatie[i].SpracujIndex();
            dic_NPodujatie[i].VirtualizujPodujatieOUT();
        }
    }

    // Spracujeme podujatia
    var id_podujatie = 0;
    var id_podujatie_out = 0;
    for (var i = 0; i < data_podujatie.length; i += 9) {
        id_podujatie = id_podujatie + data_podujatie[i];
        id_podujatie_out = id_podujatie_out + data_podujatie[i + 6];

        var p = new Podujatie(id_podujatie, data_podujatie[i + 1], data_podujatie[i + 2], data_podujatie[i + 3], data_podujatie[i + 4], data_podujatie[i + 5], id_podujatie_out, data_podujatie[i + 7], data_podujatie[i + 8]);
    }

    // Spracujeme NPodujatie - dedenie vlastnosti od podujatia
    for (var i in dic_NPodujatie) {
        if (dic_NPodujatie.hasOwnProperty(i)) {
            dic_NPodujatie[i].SpracujPodujatia();
        }
    }


    pocet_podujati = 0;
    for (var i in dic_podujatie) {
        if (dic_podujatie.hasOwnProperty(i)) {
            pocet_podujati++;
        }
    }


    // Spracujeme predstavenia
    var id_predstavenie = 0;
    id_podujatie = 0;
    var zaciatok = 0;
    var koniec_predstavenie = 0;
    var den_konania = 0;
    id_hladisko = 0;
    id_javisko = 0;
    var id_prevadzkovatel = 0;
    for (var i = 0; i < data_predstavenie.length; i += 16) {
        id_predstavenie = id_predstavenie + data_predstavenie[i];
        id_podujatie = id_podujatie + data_predstavenie[i + 1];
        zaciatok = zaciatok + data_predstavenie[i + 2];
        koniec_predstavenie = koniec_predstavenie + data_predstavenie[i + 3];
        den_konania = den_konania + data_predstavenie[i + 4];
        var popis_konania = data_predstavenie[i + 5];
        id_hladisko = id_hladisko + data_predstavenie[i + 6];
        id_javisko = id_javisko + data_predstavenie[i + 7];
        id_prevadzkovatel = id_prevadzkovatel + data_predstavenie[i + 8];
        var id_kategoria_predstavenia = data_predstavenie[i + 9];
        var stav = data_predstavenie[i + 10];
        var rychlynakup = data_predstavenie[i + 11];
        var jeHT = data_predstavenie[i + 12];
        var zmena = data_predstavenie[i + 13];
        var zaciatok_predaja = data_predstavenie[i + 14];
        var TypZobrazeniaDatumu = data_predstavenie[i + 15];

        var p = new Predstavenie(id_predstavenie, id_podujatie, zaciatok, koniec_predstavenie, den_konania, popis_konania, id_hladisko, id_javisko, id_prevadzkovatel, id_kategoria_predstavenia, stav, rychlynakup, jeHT, zmena, zaciatok_predaja, TypZobrazeniaDatumu);
    }

    // Spracovanie slidera (zobrazuje sa ako velke obrazky v pravo)
    for (var i = 0; i < data_slider.length; i += 6) {
        var s = new Slider(data_slider[i], data_slider[i + 1], data_slider[i + 2], data_slider[i + 3], data_slider[i + 4], data_slider[i + 5]);
    }

    for (var i = 0; i < data_slider_kategoria.length; i += 2) {
        var id_slider = data_slider_kategoria[i];
        var id_kategoria = data_slider_kategoria[i + 1];

        dic_slider[id_slider].kategorie[id_kategoria] = dic_kategoria[id_kategoria];
    }

    // Spracujeme top podujatia
    for (var i = 0; i < data_top.length; i += 5)
        var top = new TopPodujatia(data_top[i], data_top[i + 2], data_top[i + 3], data_top[i + 4]);

    // spracujeme nove akcie
    for (var i = 0; i < data_nove_akcie.length; i += 1)
        var nove = new NoveAkcie(data_nove_akcie[i]);

    // Spracujeme zlavy
    for (var i = 0; i < data_zlavy.length; i += 5)
        var zlavy = new ZlavyAkcie(data_zlavy[i], data_zlavy[i + 1], data_zlavy[i + 2], data_zlavy[i + 3], data_zlavy[i + 4]);

    for (var i in dic_podujatie_out) {
        if (dic_podujatie_out.hasOwnProperty(i)) {
            dic_podujatie_out[i].spracuj_stavy_predstaveni();
        }
    }


    for (var i in dic_podujatie)
        dic_podujatie[i].gettextDatum();

    for (var i in dic_NPodujatie)
        dic_NPodujatie[i].gettextDatum();
}

__init__();

// end region

//****************************
//*** Region Vyhladavanie  ***
//****************************

SearchParam = $class({

    constructor: function (nazov, kraje, okres, mesta, kategorie, datum_od, datum_do, hladisko, geo, jeHT) {

        if (nazov instanceof String)
            this.nazov = nazov;
        else
            this.nazov = null;

        if (kraje instanceof Array) {
            this.kraje = new Array();

            for (var i in kraje) {
                if (kraje.hasOwnProperty(i)) {
                    var k = kraje[i];
                    if (k instanceof Kraj)
                        this.kraje[k.id] = k;
                }
            }
        }
        else {
            if (kraje instanceof Kraj) {
                this.kraje = new Array();
                this.kraje[kraje.id] = kraje;
            }
            else
                this.kraje = null;
        }

        if (okres instanceof Okres)
            this.okres = okres;
        else
            this.okres = null;

        if (mesta instanceof Array) {
            this.mesta = new Array();

            for (var i in mesta) {
                if (mesta.hasOwnProperty(i)) {
                    var m = mesta[i];
                    if (m instanceof Mesto)
                        this.mesta[m.id] = m;
                }
            }
        }
        else {
            if (mesta instanceof Mesto) {
                this.mesta = new Array();
                this.mesta[mesta.id] = mesta;
            }
            else
                this.mesta = null;
        }

        if (kategorie instanceof Array) {
            this.kategorie = new Array();

            for (var i in kategorie) {
                if (kategorie.hasOwnProperty(i)) {
                    var k = kategorie[i];

                    if (k instanceof Kategoria)
                        this.kategorie[k.id] = k;
                }
            }
        } else {
            if (kategorie instanceof Kategoria) {
                this.kategorie = new Array();
                this.kategorie[kategorie.id] = kategorie;
            }
            else
                this.kategorie = null;
        }

        if (datum_od instanceof Date)
            this.datum_od = datum_od;
        else
            this.datum_od = null;

        if (datum_do instanceof Date)
            this.datum_do = datum_do;
        else
            this.datum_do = null;

        if (hladisko instanceof Hladisko)
            this.hladisko = hladisko;
        else
            this.hladisko = null;

        if (geo != null && geo instanceof Object) {
            if (!isnull(geo.minLAT) && !isnull(geo.maxLAT) && !isnull(geo.minLON) && !isnull(geo.maxLON))
                this.geo = geo;
        }
        else
            this.geo = null;

        if (isnull(jeHT))
            this.jeHT = null;
        else
            this.jeHT = jeHT;
    },

    addMesta: function (mesta) {
        if (mesta instanceof Array) {

            if (this.mesta == null)
                this.mesta = new Array();

            for (var i in mesta) {
                if (mesta.hasOwnProperty(i)) {
                    var m = mesta[i];

                    if (m instanceof Mesto)
                        this.mesta[m.id] = m;
                }
            }
        } else {
            if (mesta instanceof Mesto) {

                if (this.mesta == null)
                    this.mesta = new Array();
                this.mesta[mesta.id] = mesta;
            }
        }
    },

    setMesta: function (mesta) {
        this.mesta = new Array();

        if (mesta instanceof Array) {
            for (var i in mesta) {
                if (mesta.hasOwnProperty(i)) {
                    var m = mesta[i];

                    if (m instanceof Mesto)
                        this.mesta[m.id] = m;
                }
            }
        } else {
            if (mesta instanceof Mesto) {
                this.mesta[mesta.id] = mesta;
            }
        }
    },

    removeMesto: function (mesto) {
        if (mesto instanceof Mesto) {
            delete this.mesta[mesto.id];
        }

        var pocet = 0;
        for (var i in this.mesta) {
            if (this.mesta.hasOwnProperty(i))
                pocet++;
        }

        if (pocet == 0)
            this.mesta = null;
    },

    hasMesto: function (mesto) {
        if (mesto instanceof Mesto) {
            if (this.mesta == null)
                return false;

            if (isnull(this.mesta[mesto.id]))
                return false;

            return true;
        }
        else {
            return false;
        }
    },

    //-----------------------

    addKraje: function (kraje) {
        if (kraje instanceof Array) {

            if (this.kraje == null)
                this.kraje = new Array();

            for (var i in kraje) {
                if (kraje.hasOwnProperty(i)) {
                    var k = kraje[i];

                    if (k instanceof Kraj)
                        this.kraje[k.id] = k;
                }
            }
        } else {
            if (kraje instanceof Kraj) {

                if (this.kraje == null)
                    this.kraje = new Array();
                this.kraje[kraje.id] = kraje;
            }
        }
    },

    removeKraj: function (kraj) {
        if (kraj instanceof Kraj) {
            delete this.kraje[kraj.id];
        }

        var pocet = 0;
        for (var i in this.kraje) {
            if (this.kraje.hasOwnProperty(i))
                pocet++;
        }

        if (pocet == 0)
            this.kraje = null;
    },

    hasKraj: function (kraj) {
        if (kraj instanceof Kraj) {
            if (this.kraje == null)
                return false;

            if (isnull(this.kraje[kraj.id]))
                return false;

            return true;
        }
        else {
            return false;
        }
    },

    //-----------------

    addKategorie: function (kategorie) {

        if (kategorie instanceof Array) {

            if (this.kategorie == null)
                this.kategorie = new Array();

            for (var i in kategorie) {
                if (kategorie.hasOwnProperty(i)) {
                    var k = kategorie[i];

                    if (k instanceof Kategoria)
                        this.kategorie[k.id] = k;
                }
            }
        } else {
            if (kategorie instanceof Kategoria) {

                if (this.kategorie == null)
                    this.kategorie = new Array();
                this.kategorie[kategorie.id] = kategorie;
            }
        }
    },

    removeKategoria: function (kategoria) {
        if (kategoria instanceof Kategoria) {
            delete this.kategorie[kategoria.id];
        }

        var pocet = 0;
        for (var i in this.kategorie) {
            if (this.kategorie.hasOwnProperty(i))
                pocet++;
        }

        if (pocet == 0)
            this.kategorie = null;
    },

    setKategorie: function (kategorie) {
        this.kategorie = new Array();

        if (kategorie instanceof Array) {
            for (var i in kategorie) {
                if (kategorie.hasOwnProperty(i)) {
                    var k = kategorie[i];

                    if (k instanceof Kategoria)
                        this.kategorie[k.id] = k;
                }
            }
        } else {
            if (kategorie instanceof Kategoria) {
                this.kategorie[kategorie.id] = kategorie;
            }
        }
    },

    hasKategoria: function (kategoria) {
        if (kategoria instanceof Kategoria) {
            if (this.kategorie == null)
                return false;

            if (isnull(this.kategorie[kategoria.id]))
                return false;

            return true;
        }
        else {
            return false;
        }
    },

    setGeo: function (geo) {
        if (geo != null && geo instanceof Object) {
            if (!isnull(geo.minLAT) && !isnull(geo.maxLAT) && !isnull(geo.minLON) && !isnull(geo.maxLON))
                this.geo = geo;
        }
        else
            this.geo = null;
    },

    isEmpty: function () {
        if (this.nazov != null)
            return false;
        if (this.kraje != null)
            return false;
        if (this.okres != null)
            return false;
        if (this.mesta != null)
            return false;
        if (this.kategorie != null)
            return false;
        if (this.datum_od != null)
            return false;
        if (this.datum_do != null)
            return false;
        if (this.hladisko != null)
            return false;
        if (this.geo != null)
            return false;

        return true;
    }
});

// Podla objektu parametrizujuceho vyhladavanie, vyhlada predstavenia vyhovujuce filtru
// Vysledkom je slovnik dic[predstavenie.id] = predstavenie;
function search(param) {

    var result = new Array();

    if (param.isEmpty()) {                                // Pre pripad ze vyhladavaci filter je prazdny, vraime vsetko

        for (var i in dic_predstavenie) {
            if (dic_predstavenie.hasOwnProperty(i)) {
                if (dic_predstavenie[i].stav == 1 || dic_predstavenie[i].stav == 9)
                    result[dic_predstavenie[i].id] = dic_predstavenie[i];
            }
        }

        return result;
    }

    var kraj_pouzity = false;
    var okres_pouzity = false;
    var mesto_pouzite = false;
    var kategoria_pouzita = false;
    var datum_od_pouzity = false;
    var hladisko_pouzite = false;
    var geo_pouzite = false;
    var jeHT_pouzite = false;

    // V tomto kroku do result vlozime vysledky ktore vyhovuju jednemu s filtrov;
    // + si zapametame, podla ktoreho filtra mame vysledky v resulte.

    // Najprv sa snazime filtrovat len podla jedneho filtra
    // V poradi pri ktorom predpokladame, ze vystupom bude najmenej podujati

    if (param.hladisko != null) {                           // Najprv hladame podla hladiska
        search_hladisko(param.hladisko, result);
        hladisko_pouzite = true;
    }
    else {
        if (param.mesta != null) {                          // Nasledne podla mesta
            search_mesta(param.mesta, result);
            mesto_pouzite = true;
            okres_pouzity = true;
            kraj_pouzity = true;
        }
        else {
            if (param.kategorie != null) {                  // Kategorii
                search_kategorie(param.kategorie, result);
                kategoria_pouzita = true;
            }
            else {

                if (param.okres != null) {                  // Okresu
                    search_okres(param.okres, result);
                    okres_pouzity = true;
                    kraj_pouzity = true;
                }
                else {
                    if (param.datum_od != null) {           // Datum od
                        search_datum(param.datum_od, param.datum_do, result);
                        datum_od_pouzity = true;
                    }
                    else {
                        if (param.kraje != null) {
                            search_kraj(param.kraje, result);
                            kraj_pouzity = true;
                        }
                        else {
                            if (param.geo != null) {
                                search_geo(param.geo, result);
                                geo_pouzite = true;
                            }
                            else {
                                if (param.jeHT != null) {
                                    search_jeHT(param.jeHT, result);
                                    jeHT_pouzite = true;
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    if (result.length == 0)                 // Ak nic nenaslo podla prveho filtra, tak nema zmysel pokracovat dalej
        return result;

    // V dalsom kroku do result vysledky nepridavame ale odoberame, pokial nevyhovuju filtru
    if (param.mesta != null && mesto_pouzite == false)
        filter_mesta(param.mesta, result);

    if (param.kategorie != null && kategoria_pouzita == false)
        filter_kategorie(param.kategorie, result);

    if (param.okres != null && okres_pouzity == false)
        filter_okres(param.okres, result);

    if (param.datum_od != null && datum_od_pouzity == false)
        filter_datum(param.datum_od, param.datum_do, result);

    if (param.kraj != null && kraj_pouzity == false)
        filter_kraj(param.kraje, result);

    if (param.geo != null && geo_pouzite == false)
        filter_geo(param.geo, result);

    if (param.jeHT != null && jeHT_pouzite == false)
        filter_jeHT(param.jeHT, result);

    return result;
}


// Vyhlada predstavenie v kraji
function search_kraj(kraje, result) {

    for (var k in kraje) {
        if (kraje.hasOwnProperty(k)) {
            var kraj = kraje[k];

            for (var i in kraj.okresi) {
                if (kraj.okresi.hasOwnProperty(i)) {
                    search_okres(kraj.okresi[i], result);
                }
            }
        }
    }
}

// Vyhlada predstavenia v okrese, do result ulozi vysledok
function search_okres(okres, result) {

    for (var i in okres.mesta) {
        if (okres.mesta.hasOwnProperty(i))
            search_mesto(okres.mesta[i], result);
    }
}

// Vyhlada predstavenia v meste, do result ulozi vysledok
function search_mesta(mesta, result) {
    for (var i in mesta) {
        if (mesta.hasOwnProperty(i)) {
            var m = mesta[i];

            if (m instanceof Mesto)
                search_mesto(m, result);
        }
    }
}

// Vyhlada predstavenia v meste a vlozi ich do resultu
function search_mesto(mesto, result) {

    for (var i in mesto.predstavenia) {
        if (mesto.predstavenia.hasOwnProperty(i)) {
            var predstavenie = mesto.predstavenia[i];

            if (isnull(result[predstavenie.id]))
                result[predstavenie.id] = predstavenie;
        }
    }
}

// Vyhlada predstavenia pre hladisko a vlozi ich do resultu
function search_hladisko(hladisko, result) {
    for (var i in hladisko.predstavenia) {
        if (hladisko.predstavenia.hasOwnProperty(i)) {
            var predstavenie = hladisko.predstavenia[i];

            if (isnull(result[predstavenie.id]))
                result[predstavenie.id] = predstavenie;
        }
    }
}

// Vyhlada predstavenia v geo suradniciach a vlozi ich do resultu
function search_geo(geo, result) {
    for (var i in dic_hladisko) {
        if (dic_hladisko.hasOwnProperty(i)) {
            var hladisko = dic_hladisko[i];

            if (!isnull(hladisko.LAT) && !isnull(hladisko.LON)) {
                if (hladisko.LAT >= geo.minLAT && hladisko.LAT <= geo.maxLAT && hladisko.LON >= geo.minLON && hladisko.LON <= geo.maxLON) {
                    search_hladisko(hladisko, result);
                }
            }
        }
    }
}

// Vyhlada predstavenia v kategoriach a vlozi ich do resultu
function search_kategorie(kategorie, result) {
    for (var i in kategorie) {
        if (kategorie.hasOwnProperty(i)) {
            var k = kategorie[i];

            if (k instanceof Kategoria)
                search_kategoria(k, result);
        }
    }
}

// Vyhlada predstavenia v kategorii a vlozi ich do resultu
function search_kategoria(kategoria, result) {
    for (var i in kategoria.podujatia) {
        if (kategoria.podujatia.hasOwnProperty(i)) {
            var podujatie = kategoria.podujatia[i];

            for (var ii in podujatie.predstavenia) {
                if (podujatie.predstavenia.hasOwnProperty(ii)) {
                    var predstavenie = podujatie.predstavenia[ii];

                    if (isnull(result[predstavenie.id]))
                        result[predstavenie.id] = predstavenie;
                }
            }
        }
    }

    // Toto uz netreba lebo podujatia potomkov sme si uz predpripravili
    /*if (kategoria.potomkovia != null) {
        for (var j in kategoria.potomkovia) {
            var k = kategoria.potomkovia[j];

            for (var i in k.podujatia) {
                var podujatie = k.podujatia[i];

                for (var ii in podujatie.predstavenia) {
                    var predstavenie = podujatie.predstavenia[ii];

                    if (isnull(result[predstavenie.id]))
                        result[predstavenie.id] = predstavenie;
                }
            }
        }
    }*/
}

// Vyhlada predstavenia podla datumu
function search_datum(datum_od, datum_do, result) {

    if (datum_od != null) {

        for (var ik in index_datum) {
            if (index_datum.hasOwnProperty(ik)) {
                var datum = new Date(Number(ik));
                var ok = false;

                if (datum.getTime() >= datum_od.getTime()) {

                    if (datum_do != null) {
                        if (datum.getTime() <= datum_do.getTime())
                            ok = true;
                    }
                    else {
                        ok = true;
                    }
                }

                if (ok) {
                    for (var ii in index_datum[ik]) {
                        if (index_datum[ik].hasOwnProperty(ii)) {
                            var predstavenie = index_datum[ik][ii];

                            if (isnull(result[predstavenie.id]))
                                result[predstavenie.id] = predstavenie;
                        }
                    }
                }
            }
        }
    }
}

function search_jeHT(jeHT, result) {
    for (var i in dic_predstavenie) {
        if (dic_predstavenie.hasOwnProperty(i)) {
            var predstavenie = dic_predstavenie[i];

            if (predstavenie.jeHT == jeHT)
                result[predstavenie.id] = predstavenie;
        }
    }
}

function filter_kraj(kraje, result) {
    var f = new Array();
    search_kraj(kraje, f);

    for (var i in result) {
        if (result.hasOwnProperty(i)) {
            if (isnull(f[i]))
                delete result[i];
        }
    }

    delete f;
}

function filter_okres(okres, result) {
    var f = new Array();
    search_okres(okres, f);

    for (var i in result) {
        if (result.hasOwnProperty(i)) {
            if (isnull(f[i]))
                delete result[i];
        }
    }

    delete f;
}

function filter_mesto(mesto, result) {

    var f = new Array();
    search_mesto(mesto, f);

    for (var i in result) {
        if (result.hasOwnProperty(i)) {
            if (isnull(f[i]))
                delete result[i];
        }
    }

    delete f;
}

function filter_mesta(mesta, result) {

    var f = new Array();
    search_mesta(mesta, f);

    for (var i in result) {
        if (result.hasOwnProperty(i)) {
            if (isnull(f[i]))
                delete result[i];
        }
    }

    delete f;
}

function filter_hladisko(hladisko, result) {

    var f = new Array();
    search_hladisko(hladisko, f);

    for (var i in result) {
        if (result.hasOwnProperty(i)) {
            if (isnull(f[i]))
                delete result[i];
        }
    }


    delete f;
}

function filter_kategoria(kategoria, result) {

    var f = new Array();
    search_kategoria(kategoria, f);

    for (var i in result) {
        if (result.hasOwnProperty(i)) {
            if (isnull(f[i]))
                delete result[i];
        }
    }

    delete f;
}

function filter_kategorie(kategorie, result) {

    var f = new Array();
    search_kategorie(kategorie, f);

    for (var i in result) {
        if (result.hasOwnProperty(i)) {
            if (isnull(f[i]))
                delete result[i];
        }
    }

    delete f;
}

function filter_datum(datum_od, datum_do, result) {

    var f = new Array();
    search_datum(datum_od, datum_do, f);

    for (var i in result) {
        if (result.hasOwnProperty(i)) {
            if (isnull(f[i]))
                delete result[i];
        }
    }

    delete f;
}

function filter_geo(geo, result) {
    var f = new Array();
    search_geo(geo, f);

    for (var i in result) {
        if (result.hasOwnProperty(i)) {
            if (isnull(f[i]))
                delete result[i];
        }
    }

    delete f;
}

function filter_jeHT(jeHT, result) {
    var f = new Array();
    search_jeHT(jeHT, f);

    for (var i in result) {
        if (result.hasOwnProperty(i)) {
            if (isnull(f[i]))
                delete result[i];
        }
    }

    delete f;
}

// end region

//*********************************
//*** Region Generator timeline ***
//*********************************

PerformanceGroupType = {
    PrvyDen: "PrvyDen",
    DruhyDen: "DruhyDen",
    Vikend: "Vikend",
    Tyzden: "Tyzden",
    DoKoncaMesiaca: "DoKoncaMesiaca",
    Mesiac: "Mesiac",
    Hladisko: "Hladisko",
    DoKoncaVsetkeho: "DoKOncaVsetkeho"
}

timeline_settings_init();

PerformanceGroup = $class({

    constructor: function (datum_od, datum_do, typ) {
        this.datum_od = datum_od;
        this.datum_do = datum_do;
        this.typ = typ;

        this.zobrazene = new Array();                       // Skupina okamzite zobrazena - zoradeny zoznam
        this.skrite = new Array();                          // Skupina dalse - zoradeny zoznam

        this.dic_predstavenia = new Array();                // Vsetky predstavenia       
        this.dic_podujatie = new Array();                   // Vsetky podujatia

    },

    getPopis: function () {

        var teraz = Date_remove_hour(DateNow());

        if (this.typ == PerformanceGroupType.PrvyDen) {
            if (teraz.getDate() == this.datum_od.getDate() && teraz.getMonth() == this.datum_od.getMonth() && teraz.getFullYear() == this.datum_od.getFullYear())
                return lang["Dnes"];
            else
                return lokalita == 'hu' ? Format_Range_Datum(this.datum_od, null) : lang["Dna"] + " " + Format_Range_Datum(this.datum_od, null);
        }

        if (this.typ == PerformanceGroupType.DruhyDen) {
            var difH = (this.datum_od.getTime() - teraz.getTime()) / 3600000.0;

            if (difH > 23 && difH < 25)
                return lang["Zajtra"];
            else
                return lokalita == 'hu' ? Format_Range_Datum(this.datum_od, null) : lang["Dna"] + " " + Format_Range_Datum(this.datum_od, null);
        }


        var NedelaPolnoc = Date_remove_hour(DateNow());
        var denvt = NedelaPolnoc.getDay();
        if (denvt == 0) denvt = 7;
        NedelaPolnoc.setTime(NedelaPolnoc.getTime() + (8 - denvt) * (24 * 3600 * 1000) - 1000);


        if (this.typ == PerformanceGroupType.Vikend) {
            if (this.datum_od.getTime() < NedelaPolnoc.getTime())
                return lang["TentoVikend"];
            else
                return lang["PocasVikendu"] + " " + Format_Range_Datum(this.datum_od, this.datum_do);
        }

        if (this.typ == PerformanceGroupType.Tyzden) {
            if (this.datum_od.getTime() < NedelaPolnoc.getTime())
                return lang["TentoTyzden"];
            else
                return lang["VTyzdni"] + " " + Format_Range_Datum(this.datum_od, this.datum_do);
        }

        var KoniecTohtoMesiaca = new Date(teraz.getMonth() == 11 ? teraz.getFullYear() + 1 : teraz.getFullYear(), teraz.getMonth() == 11 ? 0 : teraz.getMonth() + 1, 1, 0, 0, 0, 0);
        KoniecTohtoMesiaca.setTime(KoniecTohtoMesiaca.getTime() - 1000);

        if (this.typ == PerformanceGroupType.DoKoncaMesiaca) {
            if (this.datum_od.getTime() < KoniecTohtoMesiaca.getTime())
                return lang["TentoMesiac"];
            else
                return lang["DoKoncaMesiaca"] + " " + Date_strMonth_2(this.datum_od) + (this.datum_od.getFullYear() != teraz.getFullYear() ? " " + this.datum_od.getFullYear() : "");
        }

        if (this.typ == PerformanceGroupType.Mesiac)
            return Date_strMonth(this.datum_od) + " " + this.datum_od.getFullYear();

        if (this.typ == PerformanceGroupType.DoKoncaVsetkeho)
            return (lang["od"][0]).toUpperCase() + lang["od"].substr(1) + " " + Date_strMonth_2(this.datum_od) + " " + this.datum_od.getFullYear();
    },

    getPopisHorizontalTimeline: function () {

        var teraz = Date_remove_hour(DateNow());

        if (this.typ == PerformanceGroupType.PrvyDen) {
            if (teraz.getDate() == this.datum_od.getDate() && teraz.getMonth() == this.datum_od.getMonth() && teraz.getFullYear() == this.datum_od.getFullYear())
                return lang["Dnes"];
            else
                return DateToString(this.datum_od, false);
        }

        if (this.typ == PerformanceGroupType.DruhyDen) {
            var difH = (this.datum_od.getTime() - teraz.getTime()) / 3600000.0;

            if (difH > 23 && difH < 25)
                return lang["Zajtra"];
            else
                return DateToString(this.datum_od, false);
        }


        var NedelaPolnoc = Date_remove_hour(DateNow());
        var denvt = NedelaPolnoc.getDay();
        if (denvt == 0) denvt = 7;
        NedelaPolnoc.setTime(NedelaPolnoc.getTime() + (8 - denvt) * (24 * 3600 * 1000) - 1000);


        if (this.typ == PerformanceGroupType.Vikend) {
            if (this.datum_od.getTime() < NedelaPolnoc.getTime())
                return lang["TentoVikend"];
            else
                return /*lang["PocasVikendu"] + " " +*/ Format_Range_Datum(this.datum_od, this.datum_do);
        }

        if (this.typ == PerformanceGroupType.Tyzden) {
            if (this.datum_od.getTime() < NedelaPolnoc.getTime())
                return lang["TentoTyzden"];
            else
                return /*lang["VTyzdni"] + " " +*/ Format_Range_Datum(this.datum_od, this.datum_do);
        }

        var KoniecTohtoMesiaca = new Date(teraz.getMonth() == 11 ? teraz.getFullYear() + 1 : teraz.getFullYear(), teraz.getMonth() == 11 ? 0 : teraz.getMonth() + 1, 1, 0, 0, 0, 0);
        KoniecTohtoMesiaca.setTime(KoniecTohtoMesiaca.getTime() - 1000);

        if (this.typ == PerformanceGroupType.DoKoncaMesiaca) {
            if (this.datum_od.getTime() < KoniecTohtoMesiaca.getTime()) {
                return lang["TentoMesiac"];
            }
            else {
                if (userLang == 'HU')
                    return (this.datum_od.getFullYear() != teraz.getFullYear() ? this.datum_od.getFullYear() + " " : "") + Date_strMonth_2(this.datum_od);
                else
                    return Date_strMonth_2(this.datum_od) + (this.datum_od.getFullYear() != teraz.getFullYear() ? " " + this.datum_od.getFullYear() : "");
            }
        }

        if (this.typ == PerformanceGroupType.Mesiac) {
            if (userLang == 'HU')
                return this.datum_od.getFullYear() + " " + Date_strMonth(this.datum_od);
            else
                return Date_strMonth(this.datum_od) + " " + this.datum_od.getFullYear();
        }
    },

    getPopis2: function () {
        if (this.typ == PerformanceGroupType.DoKoncaVsetkeho) return "";
        return Format_Range_Datum(this.datum_od, this.datum_do);
    },

    // Pokus o pridanie predstavenia
    // Prida sa len ak sa predstavenie kona v datume ktory prislucha tejto skupine
    // A ak nie je pridane ine predstavenie, ktore ma rovnake podujatie
    add: function (predstavenie) {
        if (item_type == 2) {
            if (isnull(this.dic_podujatie[predstavenie.podujatie.id])) {
                this.dic_podujatie[predstavenie.podujatie.id] = predstavenie.podujatie;
            }
            this.dic_predstavenia[predstavenie.id] = predstavenie;
        }
        else {
        if (isnull(this.dic_podujatie[predstavenie.podujatie.id])) {
            this.dic_podujatie[predstavenie.podujatie.id] = predstavenie.podujatie;
            this.dic_predstavenia[predstavenie.id] = predstavenie;
        }
        }
    },

    // Zoradi prvky v grupe podla datumu a roztriedi ich do skupiny zobrazene a skrite
    spracuj: function () {

        var zobraz = 6;
        if (this.typ == PerformanceGroupType.DoKoncaVsetkeho)
            zobraz = 30;
        else
            zobraz = PocetZobrazenychVGrupe[this.typ];

        //var sum = 0, pocet = 0;
        for (var i in this.dic_predstavenia) {
            if (this.dic_predstavenia.hasOwnProperty(i)) {
                var priedstavenie = this.dic_predstavenia[i];
                var podujatie = priedstavenie.podujatie;

                if (podujatie.nazov.toLowerCase().indexOf("parkovací lístek") != -1) {
                    podujatie.fitness = -1;
                }
                else {
                    podujatie.fitness = (podujatie.zvyraznenie == true ? 50000 : 0) + podujatie.skore_pocet + podujatie.priorita;
                }
            }
        }

        // Predstavenia vlozime do pola a zoradime podla priority
        var buff = [];
        for (var i in this.dic_predstavenia) {
            if (this.dic_predstavenia.hasOwnProperty(i)) {
                buff.push(this.dic_predstavenia[i]);
            }
        }

        if (typeof (sort_date) != 'undefined' && sort_date == true)
            buff.sort(Performance_group_item_sort_only_date);
        else
            buff.sort(Performance_group_item_sort);

        // Ak sa nastavy zobrazIbaPodujatia na false, tak bude tolko obrazkov kolko je predstaveni, inak tolko kolko je podujati
        var zobrazIbaPodujatia = false;
        if (item_type == 0 || item_type == 3)
            zobrazIbaPodujatia = false;


        if (zobrazIbaPodujatia) {                               // v tomto pripade budu v timeline iba jedno podujatie 
            var buff_podujatia = new Array();
            var pocitadlo = 0;

            // Vytvorime si slovnik id_podujatie_out -> predstavenia zoradenie podla datumu
            var dic_podujatia_pre = new Array();
            for (var i = 0; i < buff.length; i++) {
                var predstavenie = buff[i];
                var id_pod_out = predstavenie.podujatie.id_podujatie_out;

                if (isnull(dic_podujatia_pre[id_pod_out]))
                    dic_podujatia_pre[id_pod_out] = new Array();

                dic_podujatia_pre[id_pod_out].push(predstavenie);
            }

            for (var i in dic_podujatia_pre) {
                if (dic_podujatia_pre.hasOwnProperty(i))
                dic_podujatia_pre[i].sort(Performance_group_item_sort_date)
            }


            for (var i = 0; i < buff.length; i++) {
                var predstavenie = buff[i];
                var id_pod_out = predstavenie.podujatie.id_podujatie_out;

                if (isnull(buff_podujatia[id_pod_out])) {
                    if (pocitadlo < zobraz)
                        this.zobrazene.push(dic_podujatia_pre[id_pod_out][0]);  // Vlozime najskorsie predstavenie s podujatia
                    else
                        this.skrite.push(dic_podujatia_pre[id_pod_out][0]);

                    pocitadlo++;
                    buff_podujatia[id_pod_out] = 0;
                }
            }

        }
        else {
            for (var i = 0; i < buff.length; i++) {
                var predstavenie = buff[i];

                if (i < zobraz)
                    this.zobrazene.push(predstavenie);
                else
                    this.skrite.push(predstavenie);
            }
        }

        if (this.typ == PerformanceGroupType.PrvyDen || this.typ == PerformanceGroupType.DruhyDen)
        {
            if (typeof (sort_date) != 'undefined' && sort_date == true)
                this.zobrazene.sort(Performance_group_item_sort_only_date);
            else
                this.zobrazene.sort(Performance_group_item_sort);
        }
        else
        {
            if (this.typ == PerformanceGroupType.DoKoncaVsetkeho) {
                this.zobrazene.sort(Performance_group_item_sort);
            }
            else {

                if (typeof (sort_date) != 'undefined' && sort_date == true)
                    this.zobrazene.sort(Performance_group_item_sort_only_date);
                else
                    this.zobrazene.sort(Performance_group_item_sort_date_score);
            }
        }
        
        this.skrite.sort(Performance_group_item_sort_date);
    }
});

// Prvy den, Vikend, Tyzden, Mesiac a dalsie mesiace
function Generate_PerformanceGroups(search_result) {

    var group = new Array();
    var buff = new Array();

    var min_datum = new Date(2200, 1, 1);
    var max_datum = new Date(2000, 1, 1);
    var min_predstavenie = null

    // Zistime minimalny a maximalny datum konania predstaveni
    for (var i in search_result) {
        if (search_result.hasOwnProperty(i)) {
            var predstavenie = search_result[i];

            // zabespeka ze do timeline sa nedostane predstavenie ktore sa odohralo v minulosti, alebo skor ako je datum vo filtry
            var m = new Date();
            if (search_param.datum_od != null)
                m = search_param.datum_od;

            if (predstavenie.datumi instanceof Date) {
                if (predstavenie.datumi > m && predstavenie.datumi < min_datum)
                    min_datum = predstavenie.datumi;

                if (predstavenie.datumi > max_datum)
                    max_datum = predstavenie.datumi;
            }
            else {
                for (var d in predstavenie.datumi) {
                    if (predstavenie.datumi.hasOwnProperty(d)) {
                        if (predstavenie.datumi[d] > m && predstavenie.datumi[d] < min_datum)
                            min_datum = predstavenie.datumi[d];

                        if (predstavenie.datumi[d] > max_datum)
                            max_datum = predstavenie.datumi[d];
                    }
                }
            }
        }
    }

    // Normalizujeme casi na cele dni
    min_datum = Date_remove_hour(min_datum);
    max_datum = Date_remove_hour(max_datum);

    if (min_datum < Date_remove_hour(DateNow()))
        min_datum = Date_remove_hour(DateNow());

    var den_v_tyzdni = min_datum.getDay() == 0 ? 7 : min_datum.getDay();

    // Vlozime prvy den
    // pondelok, tento tyzden, tento mesiac
    var den_start = min_datum;
    //var den_end = (new Date(den_start.getTime() + 24 * 3600 * 1000 - 1000));
    var den_end = new Date(den_start.getFullYear(), den_start.getMonth(), den_start.getDate(), 23, 59, 59)
    group.push(new PerformanceGroup(min_datum, den_end, PerformanceGroupType.PrvyDen));

    // Zajtra  vkladame len v sobotu aby sme zaplnili tento tyzden
    // sobota, nedela, buduci tyzden, tento mesiac
    if (den_v_tyzdni == 6) {
        var druhy_den_start = (new Date(den_start.getTime() + 24 * 3600 * 1000));
        var druhy_den_end = (new Date(druhy_den_start.getTime() + 24 * 3600 * 1000 - 1000));
        group.push(new PerformanceGroup(druhy_den_start, druhy_den_end, PerformanceGroupType.DruhyDen));
    }

    // Vkladame vikend, len ak je piatok
    // piatok, vikend, buduci tyzden, tento mesiac
    if (den_v_tyzdni == 5) {
        var vikend_start = (new Date(den_start.getTime() + (6 - den_v_tyzdni) * 24 * 3600 * 1000));
        var vikend_end = (new Date(vikend_start.getTime() + 48 * 3600 * 1000 - 1000));

        if (vikend_end.getHours() == 22)
            vikend_end = new Date(vikend_end.getTime() + 3600 * 1000);

        group.push(new PerformanceGroup(vikend_start, vikend_end, PerformanceGroupType.Vikend));
    }

    // Vkladame tyzden dnes, zajtra, tento tyzden
    // pondelok, tento tyzden, tento mesiac
    if (den_v_tyzdni <= 4) {
        var tyzden_start = (new Date(den_start.getTime() + 24 * 3600 * 1000));
        var tyzden_end = (new Date(den_start.getTime() + (8 - den_v_tyzdni) * 24 * 3600 * 1000 - 1000));

        // Tyzden vkladame iba ak nepresahuje do dalsieho mesiaca
        if (tyzden_start.getMonth() == tyzden_end.getMonth()) {

            if (tyzden_end.getHours() == 22)
                tyzden_end = new Date(tyzden_end.getTime() + 3600 * 1000);

            group.push(new PerformanceGroup(tyzden_start, tyzden_end, PerformanceGroupType.Tyzden));
        }
    }

    // Tento mesiac
    var tento_mesiac_start = (new Date(group[group.length - 1].datum_do.getTime() + 1000));
    if (tento_mesiac_start.getMonth() == den_start.getMonth()) {
        var a = new Date(den_start.getMonth() != 11 ? den_start.getFullYear() : den_start.getFullYear() + 1, den_start.getMonth() != 11 ? den_start.getMonth() + 1 : 0, 1, 0, 0, 0, 0);
        var tento_mesiac_end = (new Date(a.getTime() - 1000));

        if ((tento_mesiac_end.getTime() - tento_mesiac_start.getTime()) > 3600)
            group.push(new PerformanceGroup(tento_mesiac_start, tento_mesiac_end, PerformanceGroupType.DoKoncaMesiaca));
    }

    // Ostatne mesiace
    var start = new Date(den_start.getMonth() != 11 ? den_start.getFullYear() : den_start.getFullYear() + 1, den_start.getMonth() != 11 ? den_start.getMonth() + 1 : 0, 1, 0, 0, 0, 0);
    while (true) {

        if (start > max_datum)
            break;

        var send = new Date(start.getMonth() != 11 ? start.getFullYear() : start.getFullYear() + 1, start.getMonth() != 11 ? start.getMonth() + 1 : 0, 1, 0, 0, 0, 0);
        end = new Date(send.getTime() - 1000);
        group.push(new PerformanceGroup(start, end, PerformanceGroupType.Mesiac));

        start = send;
    }

    // Vytvorime si slovnik ktory ku kazdemu dnu priraduje grupu
    for (var i in group) {
        if (group.hasOwnProperty(i)) {
            var grupa = group[i];

            var start = grupa.datum_od;
            while (true) {
                buff[start.getTime()] = grupa;
                start = start.addDays(1);       // letny a zimny pojebany cas
                //start = new Date(start.getTime() + 24 * 3600 * 1000);

                if (start > grupa.datum_do)
                    break;
            }
        }
    }

    for (var i in search_result) {
        if (search_result.hasOwnProperty(i)) {
            var predstavenie = search_result[i];

            if (predstavenie.datumi instanceof Date) {
                var datum = Date_remove_hour(predstavenie.datumi).getTime();
                var grupa = buff[datum];
                if (!isnull(grupa))
                    grupa.add(predstavenie);
            }
            else {
                for (var d in predstavenie.datumi) {
                    if (predstavenie.datumi.hasOwnProperty(d)) {
                        var datum = Date_remove_hour(predstavenie.datumi[d]).getTime();
                        var grupa = buff[datum];
                        if (!isnull(grupa))
                            grupa.add(predstavenie);
                    }
                }
            }
        }
    }

    for (var i in group) {
        if (group.hasOwnProperty(i)) {
            group[i].spracuj();
        }
    }

    return group;
}

// blok je od dnes do konca tyzdna, do konca mesiaca, dalsi mesiac etc
function Generate_PerformanceGroups_tento_tyzden(search_result) {

    var group = new Array();
    var buff = new Array();

    var min_datum = new Date(2200, 1, 1);
    var max_datum = new Date(2000, 1, 1);
    var min_predstavenie = null

    // Zistime minimalny a maximalny datum konania predstaveni
    for (var i in search_result) {
        if (search_result.hasOwnProperty(i)) {
            var predstavenie = search_result[i];

            // zabespeka ze do timeline sa nedostane predstavenie ktore sa odohralo v minulosti, alebo skor ako je datum vo filtry
            var m = new Date();
            if (search_param.datum_od != null)
                m = search_param.datum_od;

            if (predstavenie.datumi instanceof Date) {
                if (predstavenie.datumi > m && predstavenie.datumi < min_datum)
                    min_datum = predstavenie.datumi;

                if (predstavenie.datumi > max_datum)
                    max_datum = predstavenie.datumi;
            }
            else {
                for (var d in predstavenie.datumi) {
                    if (predstavenie.datumi.hasOwnProperty(d)) {
                        if (predstavenie.datumi[d] > m && predstavenie.datumi[d] < min_datum)
                            min_datum = predstavenie.datumi[d];

                        if (predstavenie.datumi[d] > max_datum)
                            max_datum = predstavenie.datumi[d];
                    }
                }
            }
        }
    }

    // Normalizujeme casi na cele dni
    min_datum = Date_remove_hour(min_datum);
    max_datum = Date_remove_hour(max_datum);

    if (min_datum < Date_remove_hour(DateNow()))
        min_datum = Date_remove_hour(DateNow());

    var den_v_tyzdni = min_datum.getDay() == 0 ? 7 : min_datum.getDay();

    // Vlozime prvy den
    // pondelok, tento tyzden, tento mesiac
    var den_start = min_datum;
    //var den_end = (new Date(den_start.getTime() + 24 * 3600 * 1000 - 1000));
    /*var den_end = new Date(den_start.getFullYear(), den_start.getMonth(), den_start.getDate(), 23, 59, 59)
    group.push(new PerformanceGroup(min_datum, den_end, PerformanceGroupType.PrvyDen));*/

    // Zajtra  vkladame len v sobotu aby sme zaplnili tento tyzden
    // sobota, nedela, buduci tyzden, tento mesiac
    /*if (den_v_tyzdni == 6) {
        var druhy_den_start = (new Date(den_start.getTime() + 24 * 3600 * 1000));
        var druhy_den_end = (new Date(druhy_den_start.getTime() + 24 * 3600 * 1000 - 1000));
        group.push(new PerformanceGroup(druhy_den_start, druhy_den_end, PerformanceGroupType.DruhyDen));
    }*/

    // Vkladame vikend, len ak je piatok
    // piatok, vikend, buduci tyzden, tento mesiac
    /*if (den_v_tyzdni == 5) {
        var vikend_start = (new Date(den_start.getTime() + (6 - den_v_tyzdni) * 24 * 3600 * 1000));
        var vikend_end = (new Date(vikend_start.getTime() + 48 * 3600 * 1000 - 1000));
        group.push(new PerformanceGroup(vikend_start, vikend_end, PerformanceGroupType.Vikend));
    }*/

    // Vkladame tyzden dnes, zajtra, tento tyzden
    // pondelok, tento tyzden, tento mesiac
    
    var tyzden_start = den_start
    var tyzden_end = (new Date(den_start.getTime() + (8 - den_v_tyzdni) * 24 * 3600 * 1000 - 1000));

    // Tyzden vkladame iba ak nepresahuje do dalsieho mesiaca
    if (tyzden_start.getMonth() == tyzden_end.getMonth()) {
        group.push(new PerformanceGroup(tyzden_start, tyzden_end, PerformanceGroupType.Tyzden));
    }


    // Tento mesiac
    var tento_mesiac_start = (new Date(group[group.length - 1].datum_do.getTime() + 1000));
    if (tento_mesiac_start.getMonth() == den_start.getMonth()) {
        var a = new Date(den_start.getMonth() != 11 ? den_start.getFullYear() : den_start.getFullYear() + 1, den_start.getMonth() != 11 ? den_start.getMonth() + 1 : 0, 1, 0, 0, 0, 0);
        var tento_mesiac_end = (new Date(a.getTime() - 1000));

        if ((tento_mesiac_end.getTime() - tento_mesiac_start.getTime()) > 3600)
            group.push(new PerformanceGroup(tento_mesiac_start, tento_mesiac_end, PerformanceGroupType.DoKoncaMesiaca));
    }

    // Ostatne mesiace
    var start = new Date(den_start.getMonth() != 11 ? den_start.getFullYear() : den_start.getFullYear() + 1, den_start.getMonth() != 11 ? den_start.getMonth() + 1 : 0, 1, 0, 0, 0, 0);
    while (true) {

        if (start > max_datum)
            break;

        var send = new Date(start.getMonth() != 11 ? start.getFullYear() : start.getFullYear() + 1, start.getMonth() != 11 ? start.getMonth() + 1 : 0, 1, 0, 0, 0, 0);
        end = new Date(send.getTime() - 1000);
        group.push(new PerformanceGroup(start, end, PerformanceGroupType.Mesiac));

        start = send;
    }

    // Vytvorime si slovnik ktory ku kazdemu dnu priraduje grupu
    for (var i in group) {
        if (group.hasOwnProperty(i)) {
            var grupa = group[i];

            var start = grupa.datum_od;
            while (true) {
                buff[start.getTime()] = grupa;
                start = start.addDays(1);       // letny a zimny pojebany cas
                //start = new Date(start.getTime() + 24 * 3600 * 1000);

                if (start > grupa.datum_do)
                    break;
            }
        }
    }

    for (var i in search_result) {
        if (search_result.hasOwnProperty(i)) {
            var predstavenie = search_result[i];

            if (predstavenie.datumi instanceof Date) {
                var datum = Date_remove_hour(predstavenie.datumi).getTime();
                var grupa = buff[datum];
                if (!isnull(grupa))
                    grupa.add(predstavenie);
            }
            else {
                for (var d in predstavenie.datumi) {
                    if (predstavenie.datumi.hasOwnProperty(d)) {
                        var datum = Date_remove_hour(predstavenie.datumi[d]).getTime();
                        var grupa = buff[datum];
                        if (!isnull(grupa))
                            grupa.add(predstavenie);
                    }
                }
            }
        }
    }

    for (var i in group) {
        if (group.hasOwnProperty(i))
            group[i].spracuj();
    }

    return group;
}

// blok tento mesiac zacina od dnes do konca mesiaca, a potom  bloky kazdy dalsi mesiac
function Generate_PerformanceGroups_tento_mesiac(search_result) {

    var group = new Array();
    var buff = new Array();

    var min_datum = new Date(2200, 1, 1);
    var max_datum = new Date(2000, 1, 1);
    var min_predstavenie = null

    // Zistime minimalny a maximalny datum konania predstaveni
    for (var i in search_result) {
        if (search_result.hasOwnProperty(i)) {
            var predstavenie = search_result[i];

            // zabespeka ze do timeline sa nedostane predstavenie ktore sa odohralo v minulosti, alebo skor ako je datum vo filtry
            var m = new Date();
            if (search_param.datum_od != null)
                m = search_param.datum_od;

            if (predstavenie.datumi instanceof Date) {
                if (predstavenie.datumi > m && predstavenie.datumi < min_datum)
                    min_datum = predstavenie.datumi;

                if (predstavenie.datumi > max_datum)
                    max_datum = predstavenie.datumi;
            }
            else {
                for (var d in predstavenie.datumi) {
                    if (predstavenie.datumi.hasOwnProperty(d)) {
                        if (predstavenie.datumi[d] > m && predstavenie.datumi[d] < min_datum)
                            min_datum = predstavenie.datumi[d];

                        if (predstavenie.datumi[d] > max_datum)
                            max_datum = predstavenie.datumi[d];
                    }
                }
            }
        }
    }

    // Normalizujeme casi na cele dni
    min_datum = Date_remove_hour(min_datum);
    max_datum = Date_remove_hour(max_datum);

    if (min_datum < Date_remove_hour(DateNow()))
        min_datum = Date_remove_hour(DateNow());

    var den_v_tyzdni = min_datum.getDay() == 0 ? 7 : min_datum.getDay();

    // Vlozime prvy den
    // pondelok, tento tyzden, tento mesiac
    var den_start = min_datum;
    //var den_end = (new Date(den_start.getTime() + 24 * 3600 * 1000 - 1000));
    /*var den_end = new Date(den_start.getFullYear(), den_start.getMonth(), den_start.getDate(), 23, 59, 59)
    group.push(new PerformanceGroup(min_datum, den_end, PerformanceGroupType.PrvyDen));*/

    // Zajtra  vkladame len v sobotu aby sme zaplnili tento tyzden
    // sobota, nedela, buduci tyzden, tento mesiac
    /*if (den_v_tyzdni == 6) {
        var druhy_den_start = (new Date(den_start.getTime() + 24 * 3600 * 1000));
        var druhy_den_end = (new Date(druhy_den_start.getTime() + 24 * 3600 * 1000 - 1000));
        group.push(new PerformanceGroup(druhy_den_start, druhy_den_end, PerformanceGroupType.DruhyDen));
    }*/

    // Vkladame vikend, len ak je piatok
    // piatok, vikend, buduci tyzden, tento mesiac
    /*if (den_v_tyzdni == 5) {
        var vikend_start = (new Date(den_start.getTime() + (6 - den_v_tyzdni) * 24 * 3600 * 1000));
        var vikend_end = (new Date(vikend_start.getTime() + 48 * 3600 * 1000 - 1000));
        group.push(new PerformanceGroup(vikend_start, vikend_end, PerformanceGroupType.Vikend));
    }*/

    // Vkladame tyzden dnes, zajtra, tento tyzden
    // pondelok, tento tyzden, tento mesiac

    //var tyzden_start = den_start
    //var tyzden_end = (new Date(den_start.getTime() + (8 - den_v_tyzdni) * 24 * 3600 * 1000 - 1000));

    // Tyzden vkladame iba ak nepresahuje do dalsieho mesiaca
    //if (tyzden_start.getMonth() == tyzden_end.getMonth()) {
    //    group.push(new PerformanceGroup(tyzden_start, tyzden_end, PerformanceGroupType.Tyzden));
    //}


    // Tento mesiac
    var tento_mesiac_start = den_start;
    if (tento_mesiac_start.getMonth() == den_start.getMonth()) {
        var a = new Date(den_start.getMonth() != 11 ? den_start.getFullYear() : den_start.getFullYear() + 1, den_start.getMonth() != 11 ? den_start.getMonth() + 1 : 0, 1, 0, 0, 0, 0);
        var tento_mesiac_end = (new Date(a.getTime() - 1000));

        if ((tento_mesiac_end.getTime() - tento_mesiac_start.getTime()) > 3600)
            group.push(new PerformanceGroup(tento_mesiac_start, tento_mesiac_end, PerformanceGroupType.DoKoncaMesiaca));
    }

    // Ostatne mesiace
    var start = new Date(den_start.getMonth() != 11 ? den_start.getFullYear() : den_start.getFullYear() + 1, den_start.getMonth() != 11 ? den_start.getMonth() + 1 : 0, 1, 0, 0, 0, 0);
    while (true) {

        if (start > max_datum)
            break;

        var send = new Date(start.getMonth() != 11 ? start.getFullYear() : start.getFullYear() + 1, start.getMonth() != 11 ? start.getMonth() + 1 : 0, 1, 0, 0, 0, 0);
        end = new Date(send.getTime() - 1000);
        group.push(new PerformanceGroup(start, end, PerformanceGroupType.Mesiac));

        start = send;
    }

    // Vytvorime si slovnik ktory ku kazdemu dnu priraduje grupu
    for (var i in group) {
        if (group.hasOwnProperty(i)) {
            var grupa = group[i];

            var start = grupa.datum_od;
            while (true) {
                buff[start.getTime()] = grupa;
                start = start.addDays(1);       // letny a zimny pojebany cas
                //start = new Date(start.getTime() + 24 * 3600 * 1000);

                if (start > grupa.datum_do)
                    break;
            }
        }
    }

    for (var i in search_result) {
        if (search_result.hasOwnProperty(i)) {
            var predstavenie = search_result[i];

            if (predstavenie.datumi instanceof Date) {
                var datum = Date_remove_hour(predstavenie.datumi).getTime();
                var grupa = buff[datum];
                if (!isnull(grupa))
                    grupa.add(predstavenie);
            }
            else {
                for (var d in predstavenie.datumi) {
                    if (predstavenie.datumi.hasOwnProperty(d)) {
                        var datum = Date_remove_hour(predstavenie.datumi[d]).getTime();
                        var grupa = buff[datum];
                        if (!isnull(grupa))
                            grupa.add(predstavenie);
                    }
                }
            }
        }
    }

    for (var i in group) {
        if (group.hasOwnProperty(i))
            group[i].spracuj();
    }

    return group;
}

// blok iba jeden chlievik
function Generate_PerformanceGroups_jeden_chlievik(search_result) {

    var group = new Array();
    var buff = new Array();

    var min_datum = new Date(2200, 1, 1);
    var max_datum = new Date(2000, 1, 1);
    var min_predstavenie = null

    // Zistime minimalny a maximalny datum konania predstaveni
    for (var i in search_result) {
        if (search_result.hasOwnProperty(i)) {
            var predstavenie = search_result[i];

            // zabespeka ze do timeline sa nedostane predstavenie ktore sa odohralo v minulosti, alebo skor ako je datum vo filtry
            var m = new Date();
            if (search_param.datum_od != null)
                m = search_param.datum_od;

            if (predstavenie.datumi instanceof Date) {
                if (predstavenie.datumi > m && predstavenie.datumi < min_datum)
                    min_datum = predstavenie.datumi;

                if (predstavenie.datumi > max_datum)
                    max_datum = predstavenie.datumi;
            }
            else {
                for (var d in predstavenie.datumi) {
                    if (predstavenie.datumi.hasOwnProperty(d)) {
                        if (predstavenie.datumi[d] > m && predstavenie.datumi[d] < min_datum)
                            min_datum = predstavenie.datumi[d];

                        if (predstavenie.datumi[d] > max_datum)
                            max_datum = predstavenie.datumi[d];
                    }
                }
            }
        }
    }

    // Normalizujeme casi na cele dni
    min_datum = Date_remove_hour(min_datum);
    max_datum = Date_remove_hour(max_datum);

    if (min_datum < Date_remove_hour(DateNow()))
        min_datum = Date_remove_hour(DateNow());

    var den_v_tyzdni = min_datum.getDay() == 0 ? 7 : min_datum.getDay();

    // Vlozime prvy den
    // pondelok, tento tyzden, tento mesiac
    var den_start = min_datum;

    // Tento mesiac
    var tento_mesiac_start = den_start;
    if (tento_mesiac_start.getMonth() == den_start.getMonth()) {
        var a = new Date(2200, den_start.getMonth() != 11 ? den_start.getMonth() + 1 : 0, 1, 0, 0, 0, 0);
        var tento_mesiac_end = (new Date(a.getTime() - 1000));

        if ((tento_mesiac_end.getTime() - tento_mesiac_start.getTime()) > 3600)
            group.push(new PerformanceGroup(tento_mesiac_start, tento_mesiac_end, PerformanceGroupType.DoKoncaMesiaca));
    }

    // Vytvorime si slovnik ktory ku kazdemu dnu priraduje grupu
    for (var i in group) {
        if (group.hasOwnProperty(i)) {
            var grupa = group[i];

            var start = grupa.datum_od;
            while (true) {
                buff[start.getTime()] = grupa;
                start = start.addDays(1);       // letny a zimny pojebany cas
                //start = new Date(start.getTime() + 24 * 3600 * 1000);

                if (start > grupa.datum_do)
                    break;
            }
        }
    }

    for (var i in search_result) {
        if (search_result.hasOwnProperty(i)) {
            var predstavenie = search_result[i];

            if (predstavenie.datumi instanceof Date) {
                var datum = Date_remove_hour(predstavenie.datumi).getTime();
                var grupa = buff[datum];
                if (!isnull(grupa))
                    grupa.add(predstavenie);
            }
            else {
                for (var d in predstavenie.datumi) {
                    if (predstavenie.datumi.hasOwnProperty(d)) {
                        var datum = Date_remove_hour(predstavenie.datumi[d]).getTime();
                        var grupa = buff[datum];
                        if (!isnull(grupa))
                            grupa.add(predstavenie);
                    }
                }
            }
        }
    }

    for (var i in group) {
        if (group.hasOwnProperty(i))
            group[i].spracuj();
    }

    return group;
}

// Bloky podla hladiska
function Generate_PerformanceGroups_Hladisko(search_result) {

    var group = new Array();
    var buff = new Array();

    var min_predstavenie = null
    var dic_hladiska = new Array();


    for (var i in search_result) {
        if (search_result.hasOwnProperty(i)) {
            var hladisko = search_result[i].hladisko;

            if (isnull(dic_hladiska[hladisko.id])) {
                dic_hladiska[hladisko.id] = hladisko;
            }
        }
    }

    dic_hladiska.sort(Performance_group_hladisko_sort);

    for (var i in dic_hladiska) {
        if (dic_hladiska.hasOwnProperty(i)) {
            var grupa = new PerformanceGroupHladisko(dic_hladiska[i]);
            group.push(grupa);
            dic_hladiska[i]["grupa"] = grupa;
        }
    }

    for (var i in search_result) {
        if (search_result.hasOwnProperty(i)) {
            var predstavenie = search_result[i];
            predstavenie.hladisko.grupa.add(predstavenie);
        }
    }

    for (var i in group) {
        if (group.hasOwnProperty(i))
            group[i].spracuj();
    }

    return group;
}

PerformanceGroupHladisko = $class({

    constructor: function (hladisko) {
        this.hladisko = hladisko;
        this.typ = PerformanceGroupType.Hladisko

        this.zobrazene = new Array();                       // Skupina okamzite zobrazena - zoradeny zoznam
        this.skrite = new Array();                          // Skupina dalse - zoradeny zoznam

        this.dic_predstavenia = new Array();                // Vsetky predstavenia       
        this.dic_podujatie = new Array();                   // Vsetky podujatia
    },

    getPopis: function () {
        return this.hladisko.nazov;
    },

    getPopisHorizontalTimeline: function () {

        return "";
    },

    getPopis2: function () {
        return this.hladisko.getFormatAdresa();
    },

    // Pokus o pridanie predstavenia
    // Prida sa len ak sa predstavenie kona v datume ktory prislucha tejto skupine
    // A ak nie je pridane ine predstavenie, ktore ma rovnake podujatie
    add: function (predstavenie) {
        if (isnull(this.dic_podujatie[predstavenie.podujatie.id])) {
            this.dic_podujatie[predstavenie.podujatie.id] = predstavenie.podujatie;
            this.dic_predstavenia[predstavenie.id] = predstavenie;
        }
    },

    // Zoradi prvky v grupe podla datumu a roztriedi ich do skupiny zobrazene a skrite
    spracuj: function () {
        var zobraz = PocetZobrazenychVGrupe[this.typ];

        //var sum = 0, pocet = 0;
        for (var i in this.dic_predstavenia) {
            if (this.dic_predstavenia.hasOwnProperty(i)) {
                var priedstavenie = this.dic_predstavenia[i];
                var podujatie = priedstavenie.podujatie;

                if (podujatie.nazov.toLowerCase().indexOf("parkovací lí­stek") != -1)
                    podujatie.fitness = -1;
                else
                    podujatie.fitness = (podujatie.zvyraznenie == true ? 50000 : 0) + podujatie.skore_pocet + podujatie.priorita;
            }
        }

        // Predstavenia vlozime do pola a zoradime podla priority
        var buff = [];
        for (var i in this.dic_predstavenia) {
            if (this.dic_predstavenia.hasOwnProperty(i))
                buff.push(this.dic_predstavenia[i]);
        }

        buff.sort(Performance_group_item_sort);

        // Ak sa nastavy zobrazIbaPodujatia na false, tak bude tolko obrazkov kolko je predstaveni, inak tolko kolko je podujati
        var zobrazIbaPodujatia = false;
        if (item_type == 0 || item_type == 3)
            zobrazIbaPodujatia = false;


        if (zobrazIbaPodujatia) {                               // v tomto pripade budu v timeline iba jedno podujatie 
            var buff_podujatia = new Array();
            var pocitadlo = 0;

            // Vytvorime si slovnik id_podujatie_out -> predstavenia zoradenie podla datumu
            var dic_podujatia_pre = new Array();
            for (var i = 0; i < buff.length; i++) {
                var predstavenie = buff[i];
                var id_pod_out = predstavenie.podujatie.id_podujatie_out;

                if (isnull(dic_podujatia_pre[id_pod_out]))
                    dic_podujatia_pre[id_pod_out] = new Array();

                dic_podujatia_pre[id_pod_out].push(predstavenie);
            }

            for (var i in dic_podujatia_pre) {
                if (dic_podujatia_pre.hasOwnProperty(i))
                    dic_podujatia_pre[i].sort(Performance_group_item_sort_date);
            }


            for (var i = 0; i < buff.length; i++) {
                var predstavenie = buff[i];
                var id_pod_out = predstavenie.podujatie.id_podujatie_out;

                if (isnull(buff_podujatia[id_pod_out])) {
                    if (pocitadlo < zobraz)
                        this.zobrazene.push(dic_podujatia_pre[id_pod_out][0]);  // Vlozime najskorsie predstavenie s podujatia
                    else
                        this.skrite.push(dic_podujatia_pre[id_pod_out][0]);

                    pocitadlo++;
                    buff_podujatia[id_pod_out] = 0;
                }
            }

        }
        else {
            for (var i = 0; i < buff.length; i++) {
                var predstavenie = buff[i];

                if (i < zobraz)
                    this.zobrazene.push(predstavenie);
                else
                    this.skrite.push(predstavenie);
            }
        }

        if (this.typ == PerformanceGroupType.PrvyDen || this.typ == PerformanceGroupType.DruhyDen) {
            this.zobrazene.sort(Performance_group_item_sort);
        }
        else {
            this.zobrazene.sort(Performance_group_item_sort_date_score);
        }

        this.skrite.sort(Performance_group_item_sort_date);
    }
});

// zoradesnie podla score
function Performance_group_item_sort(predstavenie1, predstavenie2) {

    if (predstavenie1.podujatie.nazov.indexOf("{.:") != -1)
        return 1;

    if (predstavenie1.podujatie.gettextDatum() == "" && predstavenie2.podujatie.gettextDatum() != "")
        return 1;
    if (predstavenie1.podujatie.gettextDatum() != "" && predstavenie2.podujatie.gettextDatum() == "")
        return -1;

    if (predstavenie1.podujatie.fitness > predstavenie2.podujatie.fitness)
        return -1;
    if (predstavenie1.podujatie.fitness < predstavenie2.podujatie.fitness)
        return 1;

    return 0;
}

// Zoradenie podla datumu a casu
function Performance_group_item_sort_date(predstavenie1, predstavenie2) {


    if (predstavenie1.podujatie.gettextDatum() == "" && predstavenie2.podujatie.gettextDatum() != "")
        return 1;
    if (predstavenie1.podujatie.gettextDatum() != "" && predstavenie2.podujatie.gettextDatum() == "")
        return -1;
    if (predstavenie1.podujatie.gettextDatum() == "" && predstavenie2.podujatie.gettextDatum() == "")
    {
        if (predstavenie1.podujatie.fitness > predstavenie2.podujatie.fitness)
            return -1;
        if (predstavenie1.podujatie.fitness < predstavenie2.podujatie.fitness)
            return 1;
    }

    if (predstavenie1.datumi instanceof Date)
        datum1 = predstavenie1.datumi;
    else
        datum1 = predstavenie1.datumi[0];

    if (predstavenie2.datumi instanceof Date)
        datum2 = predstavenie2.datumi;
    else
        datum2 = predstavenie2.datumi[0];

    if (datum1 > datum2)
        return 1;
    if (datum1 < datum2)
        return -1;

    return Performance_group_item_sort(predstavenie1, predstavenie2);
}

// Zoradenie podla IBA podla datumu a casu
function Performance_group_item_sort_only_date(predstavenie1, predstavenie2) {

    if (predstavenie1.datumi instanceof Date)
        datum1 = predstavenie1.datumi;
    else
        datum1 = predstavenie1.datumi[0];

    if (predstavenie2.datumi instanceof Date)
        datum2 = predstavenie2.datumi;
    else
        datum2 = predstavenie2.datumi[0];

    if (datum1 > datum2)
        return 1;
    if (datum1 < datum2)
        return -1;

    return Performance_group_item_sort(predstavenie1, predstavenie2);
}

// Zoradenie podla datumu a score
function Performance_group_item_sort_date_score(predstavenie1, predstavenie2) {

    if (predstavenie1.podujatie.fitness == -1)
        return 1;

    if (predstavenie1.datumi instanceof Date)
        datum1 = predstavenie1.datumi;
    else
        datum1 = predstavenie1.datumi[0];

    if (predstavenie2.datumi instanceof Date)
        datum2 = predstavenie2.datumi;
    else
        datum2 = predstavenie2.datumi[0];

    if (datum1.getFullYear() > datum2.getFullYear())
        return 1;
    if (datum1.getFullYear() < datum2.getFullYear())
        return -1;

    if (datum1.getMonth() > datum2.getMonth())
        return 1;
    if (datum1.getMonth() < datum2.getMonth())
        return -1;

    if (datum1.getDate() > datum2.getDate())
        return 1;
    if (datum1.getDate() < datum2.getDate())
        return -1;

    if (predstavenie1.podujatie.fitness > predstavenie2.podujatie.fitness)
        return -1;
    if (predstavenie1.podujatie.fitness < predstavenie2.podujatie.fitness)
        return 1;

    return 0;
}

function Performance_group_hladisko_sort(hladisko1, hladisko2)
{
    if (hladisko1.nazov > hladisko2.nazov)
        return 1;
    if (hladisko1.nazov < hladisko2.nazov)
        return -1;

    return 0;
}

function GenerateLastHideGroup(search_groups, index)
{
    var min_datum = new Date(2200, 1, 1, 0, 0, 0, 0);
    var den_end = new Date(1900, 1, 1, 0, 0, 0, 0);
    var buff = new Array();

    for (var i in search_groups) {
        if (search_groups.hasOwnProperty(i)) {
            var ii = Number(i);
            if (ii >= index) {
                if (search_groups[i].datum_od < min_datum) min_datum = search_groups[i].datum_od;
                if (search_groups[i].datum_do > den_end) den_end = search_groups[i].datum_do;

                for (var id in search_groups[i].zobrazene) {
                    if (search_groups[i].zobrazene.hasOwnProperty(id)) {
                        buff.push(search_groups[i].zobrazene[id]);
                    }
                }
            }
        }
    }

    var group = new PerformanceGroup(min_datum, den_end, PerformanceGroupType.DoKoncaVsetkeho)
    
    for (var i in buff) {
        if (buff.hasOwnProperty(i)) {
            group.add(buff[i]);
        }
    }

    group.spracuj();
    return group;
}


var prvy_blok = 0;
var timeline_vygenerovany = false;
var ZobrazenaMapa = false;
var last_group = null;

//GENERATOR TEMPLATES
function Template_timeline(HTML) {

    if (timeline_vygenerovany == false) {

        HTML.push("<!-- TIMELINE -->");
        HTML.push("<section id='timeline' class='timeline-block'>");
        if (window.location.href.indexOf("iframe") != -1) {
            HTML.push("  <div class='container-fluid'>");
            HTML.push("  <div class='row gutt1'>");
        } else {
            HTML.push("  <div class='container'>");
            HTML.push("  <div class='row gutt2'>");
        }
        HTML.push("    <div class='timeline' style='position:relative'>");

        if (Specialreklamy.length >= 5) {
            HTML.push('<div id="reklama_SkycraperBaner_left" class="hidden-xs hidden-sm hidden-md visibility-lg banleft" style="left:-150px">');
            HTML.push('  <a border="0" target="_blank" href="' + Specialreklamy[4][1] + '">');
            HTML.push('    <img border="0" src="' + Specialreklamy[4][0] + '" align="middle" class="img-responsive">');
            HTML.push('  </a>');
            HTML.push('</div>');
            HTML.push('<div id="reklama_SkycraperBaner_right" class="hidden-xs hidden-sm hidden-md visibility-lg banright" style="left: 1240px">');
            HTML.push('  <a border="0" target="_blank" href="' + Specialreklamy[4][1] + '">');
            HTML.push('    <img border="0" src="' + Specialreklamy[4][0] + '" align="middle" class="img-responsive">');
            HTML.push('  </a>');
            HTML.push('</div>');
        }

        HTML.push("      <div id='timeline_content_blocks'>");
    }

    ZobrazenaMapa = false;
    var poradie_blok = 0, c = 0;
    var zobrazeny_mesiac = false;
    var pocetVTimeline = 0;

    var maSkryte = false;

    for (var i in search_groups) {
        if (search_groups.hasOwnProperty(i)) {
            if (i >= index_posun_timeline) {

                //var efect = poradie_blok == 0 ? "" : "wow fadeInRight";
                //var delay = poradie_blok == 0 ? "" : "data-wow-delay='0s'";

                var group = search_groups[i];

                if (group.zobrazene.length != 0) {
                    var efect = c == 0 ? "" : "wow fadeInRight";
                    var delay = c == 0 ? "" : "data-wow-delay='0s'";
                    var cssClass = c == 0 ? "animated fadeInRight" : "";

                    if (zobrazeny_mesiac == true && pocetVTimeline >= minPocetvTimeline) {                           // Musi sa na uvodko zobrazit aspon jeden cely mesiac a minimalne 50 stvorcekov
                        cssClass += " hidden";

                        if (maSkryte == false) {                                                                       // Odtialto sa zacnu generovat skrite mesiace, vygenerujeme este sumar
                            last_group = GenerateLastHideGroup(search_groups, Number(i));
                            Template_timeline_block(-1, last_group, efect, delay, HTML, cssClass.replace(" hidden", " donekonecna"));
                        }

                        maSkryte = true;
                    }

                    search_groups[i]["index"] = i;
                    Template_timeline_block(poradie_blok, search_groups[i], efect, delay, HTML, cssClass);

                    if (group.typ == PerformanceGroupType.DoKoncaMesiaca || group.typ == PerformanceGroupType.Mesiac)
                        zobrazeny_mesiac = true;

                    pocetVTimeline += group.zobrazene.length;

                    if (c == 0)
                        prvy = poradie_blok;
                    c++;


                }
                poradie_blok++;
            }
        }
    }

    /*if (maSkryte) {
        HTML.push("  <div class='panel-footer' id='btn_vsetky_mesiace'>");
        HTML.push("    <div class='panel-loading text-center'>");
        HTML.push("      <button type='button' class='btn btn-danger btn-lg' id='btn-load' onclick='ZobrazVsetkyMesiace();' data-loading-text=\"<i class='fa fa-refresh fa-spin'></i> Prosim cakajte...\">" + lang["VsetkyMesiace"] + "</button>");
        HTML.push("    </div>");
        HTML.push("  </div>");
    }*/


    if (timeline_vygenerovany == false) {
        HTML.push("         </div>");
        HTML.push("      </div>");
        HTML.push("    </div>");
        HTML.push("  </div>");
        HTML.push("</section>");
        HTML.push("<!-- /TIMELINE -->");
    }
}

var BlockSkrite = new Array();

function Template_timeline_block(poradie, group, efect, delay, HTML, cssClass) {

    if (cssClass.indexOf("hidden") != -1)
        HTML = BlockSkrite;

    if (typeof (style) == 'undefined' || style == null)
        style = '';

    if (ZobrazenaMapa == false) {
        HTML.push("<div class='container hidden-xs'>");
        HTML.push("<div class='row'>");
        HTML.push("<div class='col-sm-24'>");
        HTML.push("        <ul class='nav navbar-nav' style='float:right'>");

        if (window.location.href.toLowerCase().indexOf('hometicket') == -1)
        HTML.push("          <li class='control show-2'><a href='javascript:Set_item_type(0);'><i class='fa fa-th fa-fw'></i></a></li>");
        HTML.push("          <li class='control show-4'><a href='javascript:Set_item_type(1);'><i class='fa fa-th-list fa-fw'></i></a></li>");
        HTML.push("          <li class='control show-1'><a href='javascript:Set_item_type(2);'><i class='fa fa-align-justify fa-fw'></i></a></li>");
        HTML.push("        </ul>");

        HTML.push("</div>");
        HTML.push("</div>");
        HTML.push("</div>");

        ZobrazenaMapa = true;
    }
    HTML.push("<!-- START BLOK -->");
    HTML.push("<div class='panel panel-blok " + cssClass + " " + efect + "' " + delay + " >");


    // title
    if (poradie == 100000) {
        HTML.push("  <div class='panel-heading' " + delay + " >");
        HTML.push("    <div class='title-2 text-center'>");
        HTML.push("      <h2 class='" + efect + "' data-wow-duration='1s'>");
        HTML.push("        TIMELINE"); // <br/><small class='text-info'>najblizsie podujatia</small>
        HTML.push("      </h2>");
        HTML.push("      <a class='kalendar-ikona' href='#modalKalendar' data-toggle='modal' data-target='#modalKalendar'><i class='fa fa-calendar'></i><span class='caret'></span></a>");
        HTML.push("    </div>");
        HTML.push("  </div>");
    }

    if (!(item_type == 2 && __isIframe__)) {
        HTML.push("  <div class='panel-heading' " + delay + " >");
        HTML.push("    <div class='title-1'>");
        HTML.push("      <h2 class='" + efect + "' data-wow-duration='1s'>" + group.getPopis());
        //HTML.push("       <a style='padding-left: 20px;font-size:22px;' class='kalendar-ikona111111' href='#modalKalendar' data-toggle='modal' data-target='#modalKalendar'><i class='fa fa-calendar'></i><span class='caret'></span></a><br>");
        HTML.push("        ");
        HTML.push("      </h2>");
        HTML.push("      <div class='date'>" + group.getPopis2() + "</div>");
        HTML.push("      <ul class='nav navbar-nav zobrazenie-btns hidden-xs'>");
        HTML.push("        <li class='control show-2 hidden" + (item_type == 0 ? " active" : "") + "'><a href='javascript:Set_item_type(0);'><i class='fa fa-th'></i></a></li>");
        HTML.push("        <li class='control show-4 hidden" + (item_type == 1 ? " active" : "") + "'><a href='javascript:Set_item_type(1);'><i class='fa fa-th-list'></i></a></li>");
        //HTML.push("        <li class='control show-1" + (item_type == 2 ? " active" : "") + "'><a href='javascript:Set_item_type(2);'><i class='fa fa-align-justify'></i></a></li>");
        HTML.push("      </ul>");
        HTML.push("    </div>");
        HTML.push("  </div>");
    }
    HTML.push("  <div class='panel-body'>");


    Template_timeline_row(poradie == -1 ? poradie : group.index, item_type == 0 ? "row-fluid" : "", true, HTML);

    if (group.skrite.length != 0 && poradie != -1)
        Template_timeline_row(group.index, item_type == 0 ? "row-fluid" : "", false, HTML);


    HTML.push("  </div>");

    if (group.skrite.length != 0 && poradie != -1) {

        var text = "";
        if (group.skrite.length == 1)
            text = lang["ZobrazDalsie1"].replace("{0}", group.skrite.length);
        if (group.skrite.length <= 4 && group.skrite.length != 1)
            text = lang["ZobrazDalsie4"].replace("{0}", group.skrite.length);
        if (group.skrite.length >= 5)
            text = lang["ZobrazDalsie5"].replace("{0}", group.skrite.length);


        HTML.push("  <div class='panel-footer' id='btn_group_cointainer_" + group.index + "'>");
        HTML.push("    <div class='panel-loading text-center' style='position:relative;'>");
        HTML.push("      <button type='button' class='btn btn-success btn-lg' id='btn-load' onclick='generate_timeline_row_hide(" + group.index + ");' data-loading-text=\"<i class='fa fa-refresh fa-spin'></i> Prosim cakajte...\"> " + text + " </button>");
        HTML.push("    </div>");
        HTML.push("  </div>");
    }
    if (poradie == -1)
    {
        //ZobrazVsetkyMesiace();

        HTML.push("  <div class='panel-footer' id='btn_group_cointainer__1'>");
        HTML.push("    <div class='panel-loading text-center'>");
        HTML.push("      <button type='button' class='btn btn-success btn-lg' id='btn-load' onclick='ZobrazVsetkyMesiace();' data-loading-text=\"<i class='fa fa-refresh fa-spin'></i> Prosim cakajte...\"> " + lang["VsetkyMesiace"] + " </button>");
        HTML.push("    </div>");
        HTML.push("  </div>");
    }

    HTML.push("</div>");

    /*if (lokalita == "hu" && poradie == 0)
    {
        HTML.push("<!-- STEP -->");
        HTML.push("<div class='panel panel-blok'>");
        HTML.push('<div name="Ticketportal_nyito_leaderboard_content_1" id="Ticketportal_nyito_leaderboard_content_1"><script type="text/javascript">activateBanner(\'Ticketportal_nyito_leaderboard_content_1\');</script></div>');
        HTML.push("</div>");
        HTML.push("<!-- STEP -->");
    }*/

    // Top podujatia, nove akcie, super cena, 
    if (!(typeof(ZobrazitTop) != "undefined" && ZobrazitTop == false))
    {
        if (poradie == 0) {

            if (Specialreklamy.length >= 4) {
                HTML.push('<div class="advertising well flex-c hidden-lg" id="advertising_content_banner">');
                HTML.push('    <a border="0" target="_blank" href="' + Specialreklamy[3][1] + '">');
                HTML.push('        <img id="advertising_content_banner_1200x265" border="0" src="' + Specialreklamy[3][0] + '" align="middle" class="img-responsive">');
                HTML.push('    </a>');
                HTML.push('</div>');
            }


            if (typeof (carousel_data) != "undefined") {
                HTML.push('<div class="panel panel-blok super-nove-top animated fadeInRight">');
                HTML.push('    <div class="panel-body">');
                HTML.push('         <div id="root-special-reklama" class="row-fluid animated bounceIn">');
                HTML.push('<ul id="autoplay">');
                for (var i = 0; i < carousel_data.length; i += 3) {
                    HTML.push('<li data-thumb="https://static.ticketportal.' + lokalita + '/images/banner/transfer/' + carousel_data[i + 2] + '">');
                    HTML.push('        <a href="' + carousel_data[i + 1] + '" >');
                    HTML.push('        <img alt="" src="https://static.ticketportal.' + lokalita + '/images/banner/transfer/' + carousel_data[i + 2] + '" />');
                    HTML.push('    </a>');
                    HTML.push('</li>');
                }
                HTML.push('</ul>');
                HTML.push('<script type="text/javascript">aktivuj_carosel();</script>');
                HTML.push('</div></div><//div>');
            }
            else {
                if (Specialreklamy.length >= 3) {
                    HTML.push('<div class="panel panel-blok super-nove-top animated fadeInRight">');
                    HTML.push('    <div class="panel-body">');
                    HTML.push('         <div id="root-special-reklama" class="row-fluid animated bounceIn">');

                    if (search_param.isEmpty() && window.location.href.indexOf("iframe") == -1) {
                        if (Specialreklamy.length >= 3) {
                            Template_Timeline_Top_Item(Specialreklamy[0][0], Specialreklamy[0][1], lang["lbTopPodujatia"].split(" ")[0], lang["lbTopPodujatia"].split(" ")[1], "fa-star-o", "Top", HTML);
                            Template_Timeline_Top_Item(Specialreklamy[1][0], Specialreklamy[1][1], lang["lbNoveAkciePredstavenia"].split(" ")[0], lang["lbNoveAkciePredstavenia"].split(" ")[1], "fa-heart-o", "Nove", HTML);
                            Template_Timeline_Top_Item(Specialreklamy[2][0], Specialreklamy[2][1], lang["lbSuperCena"].split(" ")[0], lang["lbSuperCena"].split(" ")[1], "fa-thumbs-o-up", "Zlavy", HTML);
                        }
                    }
                    else {
                        Template_Timeline_Top_Item_Predstavenie(TOP_predstavenie, lang["lbTopPodujatia"].split(" ")[0], lang["lbTopPodujatia"].split(" ")[1], "fa-star-o", "Top", HTML);
                        Template_Timeline_Top_Item_Predstavenie(NOVE_predstavenie, lang["lbNoveAkciePredstavenia"].split(" ")[0], lang["lbNoveAkciePredstavenia"].split(" ")[1], "fa-heart-o", "Nove", HTML);
                        Template_Timeline_Top_Item_Predstavenie(SUPER_predstavenie, lang["lbSuperCena"].split(" ")[0], lang["lbSuperCena"].split(" ")[1], "fa-thumbs-o-up", "Zlavy", HTML);
                    }


                    HTML.push('         </div>');
                    HTML.push('    </div>');

                    HTML.push('    <div id="top-container" class="panel-body hidden">');
                    HTML.push('         <div class="row-fluid">');
                    Template_timeline_top_result(HTML);
                    HTML.push('         </div>');
                    HTML.push('    </div>');

                    HTML.push('</div>');

                }
            }
        }
    }


    // reklama medzi blokmi
    if (!(typeof (ZobrazitReklamy) != "undefined" && ZobrazitReklamy == false)) {
        var addClass = ' hidden';
        if (poradie == 1 || (poradie == 2 && lokalita != 'cz') || (poradie == 3 && lokalita != 'cz') && cssClass.indexOf('hidden') == -1) {
            addClass = '';
            reklamaPoradie++;


            HTML.push("<div class='advertising well flex-c" + addClass + "' id='reklama_" + poradie + "'>");
            HTML.push(reklamy[reklamaPoradie]);
            HTML.push("</div>");
        }
    }

    HTML.push("<!-- /BLOK -->");
}

var reklamaPoradie = -1;

function Template_Timeline_Top_Item(imgUrl, href, text1, text2, i_css, action, HTML) {
    HTML.push('<div class="col-lg-8 col-md-8 col-sm-8 col-xs-8">');
    HTML.push('    <figure class="figure-item">');
    HTML.push('        <img src="' + imgUrl + '" alt="sample1" />');
    HTML.push('        <div class="detail-circle-link flex-c">');
    HTML.push('            <div class="external-btn">');
    HTML.push('                <a href="' + linkIframe(href) + '">');
    HTML.push('                    <i class="fa fa-info" aria-hidden="true"></i>');
    HTML.push('                </a>');
    HTML.push('            </div>');
    HTML.push('        </div>');
    HTML.push('        <figcaption class="left-item flex-c" onclick="ZapametajMenuPodBanerom(\'' + action + '\')">');
    HTML.push('            <div class="text">');
    HTML.push('                <i class="fa ' + i_css + '" aria-hidden="true"></i>');
    HTML.push('                <p><span>' + text1 + '</span> ' + text2 + '</p>');
    HTML.push('            </div>');
    HTML.push('        </figcaption>');
    HTML.push('    </figure>');
    HTML.push('</div>');
}

function Template_Timeline_Top_Item_Predstavenie(predstavenie, text1, text2, i_css, action, HTML) {

    if (isnull(predstavenie) == false && isnull(predstavenie.podujatie) == false) {
        var imgUrl = predstavenie.podujatie.obrazok.replace("orig_", "o250x250-");
        var href = absoluteUri + predstavenie.getEventUrl();
        Template_Timeline_Top_Item(imgUrl, href, text1, text2, i_css, action, HTML);
    }
}

function Template_timeline_top_result(HTML)
{
    HTML.push('<div class="col-lg-24 col-md-24 col-sm-24 col-xs-24 snt-result">');
    //HTML.push('<div class="container">');

    HTML.push('    <div id="nove" class="row hidden">');
    HTML.push('         <button type="button" class="close"><i class="fa fa-close"></i></button>');
    HTML.push('         <h2 class="pager" data-wow-duration="1s"><i class="fa fa-heart-o" aria-hidden="true"></i> ' + lang["lbNoveAkciePredstavenia"] + '</h2>');
    HTML.push('         <div id="timeline_nove_akcie" class="container-fluid"></div>');
    HTML.push('    </div>');
    
    HTML.push('    <div id="top" class="row hidden">');
    HTML.push('         <button type="button" class="close"><i class="fa fa-close"></i></button>');
    HTML.push('         <h2 class="pager" data-wow-duration="1.2s"><i class="fa fa-star-o" aria-hidden="true"></i> ' + lang["lbTopPodujatia"] + '</h2>');
    HTML.push('         <div id="timeline_top_podujatia" class="container-fluid"></div>');
    HTML.push('    </div>');

    HTML.push('    <div id="zlavy" class="row hidden">');
    HTML.push('         <button type="button" class="close"><i class="fa fa-close"></i></button>');
    HTML.push('         <h2 class="pager" data-wow-duration="1.4s"><i class="fa fa-thumbs-o-up" aria-hidden="true"></i> ' + lang["lbSuperCena"] + '</h2>');
    HTML.push('         <div id="timeline_zlavy-akcie" class="container-fluid"></div>');
    HTML.push('    </div>');
    //HTML.push('</div>');
    HTML.push('</div>');
}

var dictionary_row_hide = new Array();          // Finta HTML pre skrite vygenerujeme ale nedame ho do DOM

function Template_timeline_row(id, _class, display, HTML) {

    HTML.push("<div id='timeline_row" + (display == false ? "_hide" : "") + "_" + id + "' class='" + (display == true ? _class : (_class + " hide")) + "' " + ">");

    var _oldHTML = HTML;
    if (display == false)
        HTML = new Array();

    if (!(item_type == 0 || item_type == 3))
        HTML.push('     <div class="row-fluid">');
    HTML.push('         <div class="col-lg-24 col-md-24 col-sm-24 col-xs-24 axa">');
    HTML.push('             <div class="list-group list-group-events ' + (item_type == 0 ? "item-type-" + item_type : "item-type-" + item_type) + '">');

    if (id != -1)
        var group = search_groups[Number(id)];
    else
        var group = last_group;

    if (display) {
        for (var i in group.zobrazene) {
            if (group.zobrazene.hasOwnProperty(i)) {
                var predstavenie = group.zobrazene[i];

                var efect = "";
                var delay = "";

                if (item_type == 0 || item_type == 3)
                    Template_timeline_item(predstavenie, efect, delay, HTML, group);
                else
                    Template_timeline_item2(predstavenie, efect, delay, HTML, null, null, 6);
            }
        }
    }
    else {
        for (var i in group.skrite) {
            if (group.skrite.hasOwnProperty(i)) {
                var predstavenie = group.skrite[i];

                var efect = "";
                var delay = "";

                if (item_type == 0 || item_type == 3)
                    Template_timeline_item(predstavenie, efect, delay, HTML, group);
                else
                    Template_timeline_item2(predstavenie, efect, delay, HTML, null, null, 6);
            }
        }
    }

    if (!(item_type == 0 || item_type == 3))
        HTML.push('             </div>');

    HTML.push('         </div>');
    HTML.push('     </div>');

    if (display == false)
        dictionary_row_hide["timeline_row_hide_" + id] = HTML.join("");


    _oldHTML.push("</div>");
}

var ukazujem_na_item = 0;

function Template_timeline_item_G(predstavenie, efect, delay, HTML, target, group) {

    if (is_O2) {
        if (predstavenie.id_prevadzkovatel != 104) {
            for (var o in predstavenie.podujatie.predstavenia) {
                if (predstavenie.podujatie.predstavenia.hasOwnProperty(o)) {
                    if (predstavenie.podujatie.predstavenia[o].id_prevadzkovatel == 104) {
                        var pp = predstavenie.podujatie.predstavenia[o];
                        // Overime ci o2 predstavenie patry do casoveho bloku
                        if (pp.datumi instanceof Date) {
                            if (pp.datumi >= group.datum_od && pp.datumi < group.datum_do) {
                                predstavenie = pp;
                                break;
                            }
                        }
                        else {
                            for (var d in pp.datumi) {
                                if (pp.datumi.hasOwnProperty(d)) {
                                    if (pp.datumi[d] >= group.datum_od && pp.datumi[d] < group.datum_do) {
                                        predstavenie = pp;
                                        break;
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        if (predstavenie.id_prevadzkovatel != 104)
            return;
    }

    var addHref = "";
    if (isnull(target) == false)
        addHref = "?target=" + target;

    var ribbon_class = "";
    var ribbon = "";
    var isOrig = false;

    if (isnull(dic_NoveAkcie[predstavenie.id]) == false) {
        ribbon = "data-ribbon='" + lang["Novinka"] + "'";
        ribbon_class = "ribbon-yellow";
    }

    if (isnull(dic_TopPodujatia[predstavenie.podujatie.id_podujatie_out]) == false) {
        ribbon = "data-ribbon='" + lang["Top"] + "'";
        ribbon_class = "ribbon-green";
    }

    if (isnull(dic_ZlavyAkcie[predstavenie.id]) == false && predstavenie.id != 173072 && predstavenie.id != 173073) {

        var id_pod_out = predstavenie.podujatie.id_podujatie_out;
        var zobraz_zlava = true;
        if (lokalita == 'sk' && (id_pod_out == 28399 || id_pod_out == 28400 || id_pod_out == 28405 || id_pod_out == 28406 || id_pod_out == 28407 || id_pod_out == 28434 || id_pod_out == 28436))
            zobraz_zlava = false;

        if (zobraz_zlava) {
            ribbon = "data-ribbon='" + (dic_ZlavyAkcie[predstavenie.id].typ == 2 ? lang["Akcia"] : lang["Zlava"]) + "'";
            ribbon_class = "ribbon-orange";
        }
    }

    if (predstavenie.podujatie.obrazok.indexOf("orig_") != -1)
        isOrig = true;

    var click_redirect = " onclick='window.location.href = \"" + linkIframe(absoluteUri + predstavenie.getEventUrl() + addHref) + "\";'";
    var click_quickpurcharse = " onclick='quickpurchase_load_timeline_item(\"" + predstavenie.podujatie.id_podujatie_out + "\",\"" + predstavenie.id + "\");'";
    var href_redirect = linkIframe(absoluteUri + predstavenie.getEventUrl() + addHref);
    var click_detail_redirect = " onclick='window.location=\"" + linkIframe(absoluteUri + predstavenie.getEventUrl() + addHref) + "\"'";

    var podujatie_out = dic_podujatie_out[predstavenie.podujatie.id_podujatie_out];

    if (podujatie_out.ExternalUrl != null && podujatie_out.ExternalUrl != "") {
        click_redirect = " onclick='window.location.href = \"" + podujatie_out.ExternalUrl + "\";'";
        click_quickpurcharse = " onclick='window.location.href = \"" + podujatie_out.ExternalUrl + "\";'";
        href_redirect = linkIframe(podujatie_out.ExternalUrl);
        click_detail_redirect = " onclick='window.location.href = \"" + podujatie_out.ExternalUrl + "\";'";
    }

    HTML.push("<div class='col-md-4 col-sm-6 " + (__isFB__ == false ? "col-xs-12" : "col-xs-8") + " event-box-8 " + (podujatie_out.stav_itemu > 1 ? " event-noactive " : "") + predstavenie.podujatie.kategoria.getCssClass() + "' >");

    HTML.push("  <div class='thumbnail " + ribbon_class + "' " + ribbon + ">");

    HTML.push("<a href='" + href_redirect + "' >");
    if (isOrig) {
        HTML.push("    <img " + click_redirect + " src='" + predstavenie.podujatie.obrazok.replace("orig_", "o250x250-") + "' alt='" + predstavenie.podujatie.nazov + "' data-holder-rendered='true'>");
    } else {
        HTML.push("<div class='old-picture'>");
        HTML.push("  <div class='old-content'>");
        HTML.push("    <div class='background-picture effect-grayscale' style='background: url(" + predstavenie.podujatie.obrazok.replace(" ", "%20") + ")'></div>");
        HTML.push("    <img src='" + predstavenie.podujatie.obrazok.replace(" ", "%20") + "' alt='" + predstavenie.podujatie.nazov + "'>");
        HTML.push("  </div>");
        HTML.push("</div> ");
    }
    HTML.push("</a>");

    if (podujatie_out.stav_itemu != 1)
    {
        if (podujatie_out.stav_itemu == 3)
            HTML.push("<div class='status sold-out'>" + podujatie_out.status + "</div>");
        if (podujatie_out.stav_itemu == 4)
            HTML.push("<div class='status canceled'>" + podujatie_out.status + "</div>");
        if (podujatie_out.stav_itemu == 2)
            HTML.push("<div class='status more-info'><a href='" + href_redirect + "'>" + podujatie_out.status + " <i class='fa fa-arrow-circle-o-right'></i></a></div>");
        if (podujatie_out.stav_itemu == 5)
            HTML.push("<div class='status we-prepare'>" + podujatie_out.status + "</div>");
            //HTML += "<div class='status we-prepare'>V predaji <span class='text-nowrap'>zajtra o 14:00h</span></div>"
    }

    // Zistime si vsetky mesta na ktorych sa kona podujatie, a zaroven mesto vyhovuje filtru
    var mesta = "";
    /*for (var i in predstavenie.podujatie.predstavenia) {
        if (isnull(search_result[predstavenie.podujatie.predstavenia[i].id]) == false) {
            var p = predstavenie.podujatie.predstavenia[i];
            var mesto = (p.hladisko.mesto ? p.hladisko.mesto.nazov : "");

            if (mesto != "" && mesta.indexOf(mesto) == -1) {
                if (mesta == "") mesta = mesto;
                else mesta += ", " + mesto;
            }
        }
    }*/

    if (is_O2) {
        mesta = (predstavenie.hladisko.mesto ? predstavenie.hladisko.mesto.nazov : "");
    }
    else {
        for (var i in predstavenie.podujatie.predstavenia) {
            if (isnull(search_result[i]) == false) {
                var p = predstavenie.podujatie.predstavenia[i];
                var mesto = (p.hladisko.mesto ? p.hladisko.mesto.nazov : "");

                if (mesto != "" && mesta.indexOf(mesto) == -1) {
                    if (mesta == "") mesta = mesto;
                    else mesta += ", " + mesto;
                }
            }

        }
    }

    var t_datum = predstavenie.podujatie.gettextDatum();

    HTML.push(" <div class='caption'>");
    HTML.push("     <a href='" + href_redirect + "'><h3>" + predstavenie.podujatie.nazov + "</h3></a>");
    HTML.push("     <table class='table'>");
    HTML.push("         <tr>");
    HTML.push("             <td class='place-date'>");
    HTML.push("                 <a href='" + href_redirect + "' >");
    HTML.push("                     <p " + (t_datum.length >= 20 ? " style='font-size:100%' " : "") + " class='date'>" + t_datum /*predstavenie.zaciatok.getDate() + " " + Date_strMonth(predstavenie.zaciatok) + " " + predstavenie.zaciatok.getFullYear()*/ + "</p>");
    HTML.push("                     <p class='place'>" + mesta /*(predstavenie.hladisko.mesto ? predstavenie.hladisko.mesto.nazov : "")*/ + "</p>");
    HTML.push("                 </a>");
    HTML.push("             </td>");
    if (lokalita != "empik")
    {
        HTML.push("             <td class='buy-box'>");
        HTML.push("                 <a " + (dic_podujatie_out[predstavenie.podujatie.id_podujatie_out].rychlyNakup ? click_quickpurcharse : click_redirect) + " class='btn-ticket-buy flex-c'>");
        HTML.push("                     <i class='fa fa-shopping-cart'></i></a>");
        HTML.push("             </td>");
    }
    HTML.push("         </tr>");
    HTML.push("     </table>");
    HTML.push("     </div>"); // caption


    HTML.push("  </div>"); // thumbnail
    HTML.push("  <div class='ozdoba'>");
    HTML.push("    <span class='event-category'>" + predstavenie.podujatie.kategoria.getNazov() + "</span>");
    HTML.push("    <svg zoom='0.1' width='100%' height='20px' xmlns='http://www.w3.org/2000/svg' version='1.1'>");
    HTML.push("      <defs>");
    HTML.push("        <pattern id='Pattern' x='0' y='0' width='30px' height='20px' patternUnits='userSpaceOnUse'>");
    HTML.push("          <rect x='0' y='0' width='40' height='6' fill='#f1f1f1'></rect>");
    HTML.push("          <polygon points='0,5 12,14 24,5' fill='#f1f1f1'></polygon>");
    HTML.push("        </pattern>");
    HTML.push("      </defs>");
    HTML.push("      <rect fill='url(#Pattern)' x='0' y='0' width='100%' height='20px'></rect>");
    HTML.push("    </svg>");
    HTML.push("  </div>");
    HTML.push("</div>");
}

function quickpurchase_load_timeline_item(id, id_predstavenie) {
    $("#modalRychlaPlatba316").modal('show');
    quickpurchase_load(id, id_predstavenie);
}

function Template_timeline_item(predstavenie, efect, delay, HTML, group) {
    Template_timeline_item_G(predstavenie, efect, delay, HTML, 6, group)
}

function Template_timeline_item2(predstavenie, efect, delay, HTML, Nazov, Popis, target) {

    if (predstavenie == null)
        return;

    var addHref = "";
    if (isnull(target) == false)
        addHref = "?target=" + target;

    addHref = linkIframe(addHref);
    

    var isOrig = false;
    var click_redirect = " onclick='window.location.href = \"" + absoluteUri + predstavenie.getEventUrl() + addHref + "\";'";
    var click_quickpurcharse = " onclick='quickpurchase_load_timeline_item(\"" + predstavenie.podujatie.id_podujatie_out + "\",\"" + predstavenie.id + "\");return false;'";

    if (__isIframe__ && item_type == 2) {
        click_redirect = " onclick='window.location.href = \"" + absoluteUri + "performance/" + predstavenie.id + addHref + "\";'";
        click_quickpurcharse = " onclick='window.location.href = \"" + absoluteUri + "performance/" + predstavenie.id + addHref + "\";'";
    }

    if (predstavenie.podujatie.obrazok.indexOf("orig_") != -1)
        isOrig = true;


    if (__isIframe__ && item_type == 2) {
        if (predstavenie.id_javisko == 0)
            HTML.push('        <a id="performance_link_' + predstavenie.id + '"  class="list-group-item" href="javascript:NPerformance_load(' + predstavenie.id + ',0);">');
        else
            HTML.push('        <a id="performance_link_' + predstavenie.id + '"  class="list-group-item" href="' + absoluteUri + "performance/" + predstavenie.id + addHref + '">');
    }
    else {
        HTML.push('        <a class="list-group-item" href="' + absoluteUri + predstavenie.getEventUrl() + addHref + '">');
    }

    HTML.push('            <div class="event-picture">');

    if (isOrig)
            HTML.push("     <img " + click_redirect + " src='" + predstavenie.podujatie.obrazok.replace("orig_", "o250x250-") + "' alt='" + predstavenie.podujatie.nazov + "' data-holder-rendered='true'>");
    else {
        HTML.push("         <div " + click_redirect + " class='old-picture'>");
        HTML.push("             <div class='content'>");
        HTML.push("                 <div class='blur-bg' style='background: url(" + predstavenie.podujatie.obrazok.replace(" ", "%20") + ")'></div>");
        HTML.push("                 <img src='" + predstavenie.podujatie.obrazok.replace(" ", "%20") + "' alt='" + predstavenie.podujatie.nazov + "' data-holder-rendered='true'>");
        HTML.push("             </div>");
        HTML.push("         </div> ");
    }

    HTML.push("            </div>");

    HTML.push('            <div class="event-info">');

    if (isnull(Nazov))
        HTML.push('            <div class="event-dates">' + predstavenie.getTextDatum() + '</div>');
									
    HTML.push('                <div class="event-name">');
    HTML.push((isnull(Nazov) ? predstavenie.podujatie.nazov : Nazov));
    HTML.push('                </div>');

    if (isnull(Popis)) {
        HTML.push("            <div class='event-venue-info'>");
        HTML.push("                 <p class='popis-zlavy'>" + predstavenie.hladisko.nazov + (predstavenie.hladisko.nazov.indexOf(predstavenie.hladisko.mesto.nazov) == -1 ? ", " + predstavenie.hladisko.mesto.nazov : "") + "</p>");
        //HTML.push("                 <button class='btn btn-link' type='button' onclick='" + absoluteUri + "Venue/" + predstavenie.hladisko.id + addHref + "; return false;'><i class='fa fa-map-marker'></i> " + predstavenie.hladisko.nazov + (predstavenie.hladisko.nazov.indexOf(predstavenie.hladisko.mesto.nazov) == -1 ? ", " + predstavenie.hladisko.mesto.nazov : "") + "</button>");
        HTML.push("            </div>");
    }
    else {
        HTML.push("            <div class='event-venue-info'>");
        HTML.push("                 <p class='popis-zlavy'>" + Popis + "</p>");
        HTML.push("            </div>");
    }

    HTML.push("                 <div class='buy-box flex-c'>");

    if (__isIframe__ == false) {
        if (dic_podujatie_out[predstavenie.podujatie.id_podujatie_out].rychlyNakup) {
            HTML.push("                 <button type='button' class='btn btn-link btn-ticket-buy' " + click_quickpurcharse + ">");
            HTML.push("                 <i class='fa fa-ticket'></i>");
            HTML.push("                 </button>");
            //console.log("1111111111111")
        }
        else {
            HTML.push("                 <button type='button' class='btn btn-link btn-ticket-buy' onclick='EventRedirect(" + predstavenie.podujatie.id_podujatie_out + ")'>");
            HTML.push("                 <i class='fa fa-ticket'></i>"); //<span>" + lang["KupitVstupenky"] + "</span>
            HTML.push("                 </button>");
            //console.log("222222222222222")
        }
    }
    HTML.push("                </div>");

    HTML.push('            </div>');
    HTML.push('        </a> ');



    /*
    HTML.push("<div class='row'>");
    HTML.push("  <div class='item-1 " + (item_type == 1 ? "riadky-2a" : "riadky-1") + "'>");
    HTML.push("    <div class='col-xs-4 item-picture'>");
    HTML.push("      <img src='" + predstavenie.podujatie.obrazok.replace("orig_", "o250x250-") + "' alt='img' class='img-responsive'>");
    HTML.push("    </div>");
    HTML.push("    <div class='col-xs-16 items-detail'>");
    HTML.push("      <h5 class='nazov-podujatia'>");
    HTML.push("        <a href='" + absoluteUri + predstavenie.getEventUrl() + addHref + "'>" + (isnull(Nazov) ? predstavenie.podujatie.nazov : Nazov) + "</a>");
    HTML.push("        <span class='fill'></span>");
    HTML.push("      </h5>");

    if (isnull(Nazov))
        HTML.push("      <h6 class='datum-konania'>" + predstavenie.getTextDatum() + "</h6>");

    if (isnull(Popis)) {
        HTML.push("      <h6 class='miesto-konania'>");
        HTML.push("        <a href='" + absoluteUri + "Venue/" + predstavenie.hladisko.id + addHref + "'><i class='fa fa-map-marker'></i>" + predstavenie.hladisko.nazov + (predstavenie.hladisko.nazov.indexOf(predstavenie.hladisko.mesto.nazov) == -1 ? ", " + predstavenie.hladisko.mesto.nazov : "") + "</a>");
        HTML.push("      </h6>");
    }
    else {
        HTML.push("      <h6 class='popis-zlavy'>" + Popis + "</h6>");
    }

    HTML.push("    </div>");

    HTML.push("    <div class='col-xs-4 items-control'>");

    if (dic_podujatie_out[predstavenie.podujatie.id_podujatie_out].rychlyNakup) {
        HTML.push("      <button type='button' class='btn btn-buy' onclick='quickpurchase_load_timeline_item(" + predstavenie.podujatie.id_podujatie_out + ")'>");
        HTML.push("        <i class='fa fa-shopping-cart'></i><span>" + lang["KupitVstupenky"] + "</span>");
        HTML.push("      </button>");
    }
    else {
        HTML.push("      <button type='button' class='btn btn-buy' onclick='EventRedirect(" + predstavenie.podujatie.id_podujatie_out + ")'>");
        HTML.push("        <i class='fa fa-shopping-cart'></i><span>" + lang["KupitVstupenky"] + "</span>");
        HTML.push("      </button>");
    }


    HTML.push("      <a href='" + absoluteUri + predstavenie.getEventUrl() + addHref + "' class='btn btn-link'>detail</a>");
    HTML.push("    </div>");
    HTML.push("  </div>");
    HTML.push("</div>");
    */
}

function ZobrazVsetkyMesiace() {
    
    $("#timeline_content_blocks").append(BlockSkrite.join(""));
    $('.panel.panel-blok').removeClass('hidden');
    $('#btn_vsetky_mesiace').addClass('hidden');
    $(window).scrollTop($(window).scrollTop() + 1);
}

function EventRedirect(id_podujatie_out) {
    window.location.href = absoluteUri + "event/" + id_podujatie_out;
}

var search_param = null;

if (window.location.href.toLowerCase().indexOf('hometicket') == -1)
    search_param = new SearchParam(null, null, null, null, null, null, null, null, null, null);           // Vyhladavacie parametre, podla ktorych sa zobrazuje timeline
else
    search_param = new SearchParam(null, null, null, null, null, null, null, null, null, true);

var search_result = null;                                                                           // Zoznam predstaveni, ktore presli filtrom
var search_groups = null;                                                                           // Predstavenia zoradene do skupin timeline (dnes, zajtra, tento tyzden, tento mesiac, etc.)
var item_type = 0;                                                                                  // Sposob akym sa zobrazia jednotlive podujatia (volba template), 0 obrazky, 1 zoznam s obrazkom, 2 zoznam bez obrazku, 3 mapa
var typ_groups = lokalita == 'cz' ? 2 : 0;

if (typeof (IframeTimelineType) != "undefined") {
    item_type = IframeTimelineType;

    if (IframeTimelineType == 3)
        item_type = 0;
}

// Obnovenie typu zobrazenia timeline zo session storage
if (!isnull(sessionStorage)) {
    if (!isnull(sessionStorage.item_type)) {
        item_type = Number(sessionStorage.item_type);
    }
}

// WOW kniznica zavola tuto metodu vzdy, ked zobrazi blok
function generate_timeline_row(doom_id, enable_efect) {
    return;
    reklamaPoradie = -1;

    if (isnull(enable_efect))
        enable_efect = false;


    if (doom_id.indexOf("timeline_row_") != -1) {
        var idgroup = Number(doom_id.replace("timeline_row_", ""));
        var group = search_groups[idgroup];

        var HTML = [];
        var tdelay = 0;

        for (var i in group.zobrazene) {
            var predstavenie = group.zobrazene[i];

            var efect = "";
            var delay = "";
            //if (enable_efect) {
            //    var efect = "wow fadeInRight";
            //    var delay = tdelay;
            //}

            if (item_type == 0 || item_type == 3)
                Template_timeline_item(predstavenie, efect, delay, HTML, group);
            else
                Template_timeline_item2(predstavenie, efect, delay, HTML, group);

            tdelay = tdelay + 0.1;
            if (tdelay == 0.6)
                tdelay = 0.0;
        }

        $("#" + doom_id).html(HTML.join(""));
    }
}

// Zavola tlacitko ked sa klikne na zobrazitdalsie
function generate_timeline_row_hide(idgroup) {
    $("#btn_group_cointainer_" + idgroup).addClass('hidden');
    /*var group = search_groups[idgroup];

    var HTML = [];
    for (var i in group.skrite) {
        var predstavenie = group.skrite[i];

        if (item_type == 0 || item_type == 3)
            Template_timeline_item(predstavenie, "", 0, HTML, group);
        else
            Template_timeline_item2(predstavenie, "", 0, HTML);
    }*/

    //$("#timeline_row_hide_" + idgroup).html(HTML.join(''));

    $("#timeline_row_hide_" + idgroup).html(dictionary_row_hide["timeline_row_hide_" + idgroup]);
    $("#timeline_row_hide_" + idgroup).removeClass('hide');
    $("#btn_group_cointainer_" + idgroup).addClass("hide");
}

function Generate_horizontal_timeline_empik() {
    var HTML = new Array();

    HTML.push('<div class="timeline">');
    HTML.push('    <div class="events-wrapper">');
    HTML.push('        <div class="events">');
    HTML.push('            <ol>');

    var prvy = true;
    var druhy = false;
    var datum = null;

    var ma_tento_mesiac = false;
    for (var i in search_groups) {
        var group = search_groups[i];

        if (group.zobrazene.length > 0) {
            if (group.typ == PerformanceGroupType.DoKoncaMesiaca) {
                ma_tento_mesiac = true;
                break;
            }
        }
    }

    var v_TM = oznac_tento_mesiac_horizontal;
    if (ma_tento_mesiac == false && oznac_tento_mesiac_horizontal == true)
        v_TM = false;

    for (var i in search_groups) {
        var group = search_groups[i];

        if (group.zobrazene.length > 0) {
            if (prvy) {
                datum = search_groups[i].datum_od;
            }
            else {
                //datum = new Date(datum.getTime() + 24 * 3600 * 1000);
                datum = datum.addDays(1);
            }

            if (typ_groups == 0) {
                if (group.typ == PerformanceGroupType.Tyzden) {
                    HTML.push('<li><a id="horizontal-timeline-' + i + '" href="javascript:index_posun_timeline = ' + 0 + ';typ_groups = 1;if(typeof(ga) != \'undefined\') ga(\'send\', \'pageview\'); Generate_timeline(true,' + i + ');" data-date="' + datum.getDate() + '/' + (datum.getMonth() + 1) + '/' + datum.getFullYear() + '" ' + ((prvy && v_TM == false) ? 'class="selected"' : '') + '>' + group.getPopisHorizontalTimeline() + '</a></li>');
                }
                else {
                    if (group.typ == PerformanceGroupType.DoKoncaMesiaca) {
                        HTML.push('<li><a id="horizontal-timeline-' + i + '" href="javascript:index_posun_timeline = ' + 0 + ';typ_groups = 2;if(typeof(ga) != \'undefined\') ga(\'send\', \'pageview\'); Generate_timeline(true,' + i + ');" data-date="' + datum.getDate() + '/' + (datum.getMonth() + 1) + '/' + datum.getFullYear() + '" ' + ((prvy || v_TM == true) ? 'class="selected"' : '') + '>' + group.getPopisHorizontalTimeline() + '</a></li>');
                    }
                    else {
                        HTML.push('<li><a id="horizontal-timeline-' + i + '" href="javascript:index_posun_timeline = ' + i + ';typ_groups = 0;if(typeof(ga) != \'undefined\') ga(\'send\', \'pageview\'); Generate_timeline(true,' + i + ');" data-date="' + datum.getDate() + '/' + (datum.getMonth() + 1) + '/' + datum.getFullYear() + '" ' + ((prvy && v_TM == false) ? 'class="selected"' : '') + '>' + group.getPopisHorizontalTimeline() + '</a></li>');
                    }
                }
            }
            else {
                HTML.push('<li><a id="horizontal-timeline-' + i + '" href="javascript:index_posun_timeline = ' + i + ';if(typeof(ga) != \'undefined\') ga(\'send\', \'pageview\'); Generate_timeline(true,' + i + ');" data-date="' + datum.getDate() + '/' + (datum.getMonth() + 1) + '/' + datum.getFullYear() + '" ' + (prvy ? 'class="selected"' : '') + '>' + group.getPopisHorizontalTimeline() + '</a></li>');
            }

            if (prvy = false)
                druhy = true;
            prvy = false;
        }
    }

    HTML.push('            </ol>');
    HTML.push('            <span class="filling-line" aria-hidden="true"></span>');
    HTML.push('        </div>');
    HTML.push('    </div>');
    HTML.push('    <ul class="cd-timeline-navigation">');
    HTML.push('        <li><a href="javascript:;" class="prev inactive">Prev</a></li>');
    HTML.push('        <li><a href="javascript:;" class="next">Next</a></li>');
    HTML.push('    </ul>');
    HTML.push('</div>');

    $('.cd-horizontal-timeline').html(HTML.join(''));
    var timelines = $('.cd-horizontal-timeline');

    if (typ_groups == 2)
        eventsMinDistance = 200;
    else
        eventsMinDistance = lokalita == "empik" ? 170 : 100;

    try {
        initTimeline(timelines);
    }
    catch (err) {
        console.log(err.message)
    }
}

function Generate_horizontal_timeline() {
    if (lokalita == "empik") {
        Generate_horizontal_timeline_empik();
        return;
    }

    var HTML = new Array();

    HTML.push('<div class="timeline">');
    HTML.push('    <div class="events-wrapper">');
    HTML.push('        <div class="events">');
    HTML.push('            <ol>');

    var prvy = true;
    var druhy = false;
    var datum_skutocny_old = null;
    var datum_virtualny_old = null;

    var pdm = IsMobile() ? 2 : 3;

    if (typ_groups == 2)
        pdm = IsMobile() ? 10 : 10;

    if (lokalita == "empik")
        pdm = 4;

    var ma_tento_mesiac = false;
    for (var i in search_groups) {
        var group = search_groups[i];

        if (group.zobrazene.length > 0) {
            if (group.typ == PerformanceGroupType.DoKoncaMesiaca) {
                ma_tento_mesiac = true;
                break;
            }
        }
    }

    var v_TM = oznac_tento_mesiac_horizontal;
    if (ma_tento_mesiac == false && oznac_tento_mesiac_horizontal == true)
        v_TM = false;

    for (var i in search_groups) {
        var group = search_groups[i];

        if (group.zobrazene.length > 0) {
            if (prvy) {
                datum_skutocny_old = search_groups[i].datum_od;
                datum_virtualny_old = search_groups[i].datum_od;
            }

            if (druhy) {
                if (group.datum_od.getTime() - datum_skutocny_old.getTime() > pdm * 24 * 3600 * 1000)
                    pdm = pdm == 2 ? 2 : 4;
            }

            if (group.datum_od.getTime() - datum_skutocny_old.getTime() > pdm * 24 * 3600 * 1000) {
                datum_skutocny_old = group.datum_od;
                datum_virtualny_old = new Date(datum_virtualny_old.getTime() + pdm * 24 * 3600 * 1000);
            }
            else {
                datum_skutocny_old = group.datum_od;
                datum_virtualny_old = group.datum_od;
            }

            if (typ_groups == 0) {
                if (group.typ == PerformanceGroupType.Tyzden) {
                    HTML.push('<li><a id="horizontal-timeline-' + i + '" href="javascript:index_posun_timeline = ' + 0 + ';typ_groups = 1;if(typeof(ga) != \'undefined\') ga(\'send\', \'pageview\'); Generate_timeline(true,' + i + ');" data-date="' + datum_virtualny_old.getDate() + '/' + (datum_virtualny_old.getMonth() + 1) + '/' + datum_virtualny_old.getFullYear() + '" ' + ((prvy && v_TM == false) ? 'class="selected"' : '') + '>' + group.getPopisHorizontalTimeline() + '</a></li>');
                }
                else {
                    if (group.typ == PerformanceGroupType.DoKoncaMesiaca) {
                        HTML.push('<li><a id="horizontal-timeline-' + i + '" href="javascript:index_posun_timeline = ' + 0 + ';typ_groups = 2;if(typeof(ga) != \'undefined\') ga(\'send\', \'pageview\'); Generate_timeline(true,' + i + ');" data-date="' + datum_virtualny_old.getDate() + '/' + (datum_virtualny_old.getMonth() + 1) + '/' + datum_virtualny_old.getFullYear() + '" ' + ((prvy || v_TM == true) ? 'class="selected"' : '') + '>' + group.getPopisHorizontalTimeline() + '</a></li>');
                    }
                    else {
                        HTML.push('<li><a id="horizontal-timeline-' + i + '" href="javascript:index_posun_timeline = ' + i + ';typ_groups = 0;if(typeof(ga) != \'undefined\') ga(\'send\', \'pageview\'); Generate_timeline(true,' + i + ');" data-date="' + datum_virtualny_old.getDate() + '/' + (datum_virtualny_old.getMonth() + 1) + '/' + datum_virtualny_old.getFullYear() + '" ' + ((prvy && v_TM == false) ? 'class="selected"' : '') + '>' + group.getPopisHorizontalTimeline() + '</a></li>');
                    }
                }
            }
            else {
                HTML.push('<li><a id="horizontal-timeline-' + i + '" href="javascript:index_posun_timeline = ' + i + ';if(typeof(ga) != \'undefined\') ga(\'send\', \'pageview\'); Generate_timeline(true,' + i + ');" data-date="' + datum_virtualny_old.getDate() + '/' + (datum_virtualny_old.getMonth() + 1) + '/' + datum_virtualny_old.getFullYear() + '" ' + (prvy ? 'class="selected"' : '') + '>' + group.getPopisHorizontalTimeline() + '</a></li>');
            }

            if (prvy = false)
                druhy = true;
            prvy = false;

            if (druhy == true && typ_groups == 2)
                pdm = IsMobile() ? 10 : 10;
        }
    }

    HTML.push('            </ol>');
    HTML.push('            <span class="filling-line" aria-hidden="true"></span>');
    HTML.push('        </div>');
    HTML.push('    </div>');
    HTML.push('    <ul class="cd-timeline-navigation">');
    HTML.push('        <li><a href="javascript:;" class="prev inactive">Prev</a></li>');
    HTML.push('        <li><a href="javascript:;" class="next">Next</a></li>');
    HTML.push('    </ul>');
    HTML.push('</div>');

    $('.cd-horizontal-timeline').html(HTML.join(''));
    var timelines = $('.cd-horizontal-timeline');

    if (typ_groups == 2)
        eventsMinDistance = 200;
    else
        eventsMinDistance = lokalita == "empik" ? 170 : 100;

    try {
        initTimeline(timelines);
    }
    catch (err) {

    }
}

var index_posun_timeline = 0;

// Vzdy ked je potrebne prekreslit timeline je potrebne zavolat tuto metodu
var is_O2 = false;
var cz_default_mounth = false;
var oznac_tento_mesiac_horizontal = false;
var sort_date = false;

var content = null;
var htmls = null;


function Generate_timeline(negeneruj_horizontal, index) {

    BlockSkrite = new Array();
    dictionary_row_hide = new Array();


    if (typeof (index) != 'undefined' && index != null) {
        var hwidth = $(".cd-horizontal-timeline .timeline").width();

        var transform = 0;
        if ($(".cd-horizontal-timeline .events").length != 0) {
            if (typeof ($(".cd-horizontal-timeline .events")[0].style.transform) != "undefined")
                transform = Number($(".cd-horizontal-timeline .events")[0].style.transform.replace("translateX(", "").replace("px)", ""));
        }

        var posun = 0;
        if (isnull(document.getElementById("horizontal-timeline-" + index)) == false)
            posun = Number(document.getElementById("horizontal-timeline-" + index).style.left.replace("px", ""));
        var real_pozicia = transform + posun;

        var n = hwidth < 600 ? hwidth - 200 : hwidth - 250;

        if (real_pozicia > n) {
            $("a.next")[0].click();
        }
    }

    if (typeof (negeneruj_horizontal) == 'undefined' || typeof (negeneruj_horizontal) == 'object' || negeneruj_horizontal == false) {
        typ_groups = 0;
        if (lokalita == "cz" && search_param.kategorie != null && search_param.kategorie.length == 103)
            typ_groups = 2;
        if (lokalita == "hu" && search_param.kategorie != null && search_param.kategorie.length == 3)
            typ_groups = 2;
    }

    //Pace.restart(); // pace preloader start 
    content = document.getElementById("content_timeline");
    if (timeline_vygenerovany == true)
        content = document.getElementById("timeline_content_blocks");

    search_result = search(search_param);
    Generate_Slider();

    //var vrat_spat = false;
    //if (lokalita == 'cz' && cz_default_mounth == false) {
    //    cz_default_mounth = true;
    //    vrat_spat = true;
    //    typ_groups = 2;
    //}

    if (typeof (IframeTimelineType) != "undefined" && IframeTimelineType == 2) {
        //search_groups = Generate_PerformanceGroups_Hladisko(search_result);
        sort_date = true;
        search_groups = Generate_PerformanceGroups_jeden_chlievik(search_result);
    }
    else {
        if (typ_groups == 0)
            search_groups = Generate_PerformanceGroups(search_result);
        if (typ_groups == 1)
            search_groups = Generate_PerformanceGroups_tento_tyzden(search_result);
        if (typ_groups == 2)
            search_groups = Generate_PerformanceGroups_tento_mesiac(search_result);
    }

    // Zistime cije vobec vgrupachtento_mesiac
    var ma_tento_mesiac = false;
    for (var i in search_groups) {
        var group = search_groups[i];
        if (group.typ == PerformanceGroupType.DoKoncaMesiaca)
            ma_tento_mesiac = true;
    }


    if (lokalita == 'cz' && cz_default_mounth == false && ma_tento_mesiac == true)
    {
        oznac_tento_mesiac_horizontal = true;
    }

    if (typeof (negeneruj_horizontal) == 'undefined' || typeof (negeneruj_horizontal) == 'object' || negeneruj_horizontal == false) {
        if (!(typeof (IframeTimelineType) != "undefined" && IframeTimelineType == 3)) {
            Generate_horizontal_timeline();
            index_posun_timeline = 0;
        }
    }
    
    if (lokalita == 'cz' && cz_default_mounth == false && ma_tento_mesiac == true)
    {
        oznac_tento_mesiac_horizontal = false;
        cz_default_mounth = true;
        javascript: index_posun_timeline = 0;
        typ_groups = 2;
        Generate_timeline(true, 1);
        return;
    }


    is_O2 = IsO2Arena();
    

    var HTML = [];
    Template_timeline(HTML);

    

    //if (lokalita == "hu") {
    //    var _html = HTML.join('');
    //    htmls = _html.split("<!-- STEP -->");

    //    $(content).html(htmls[0] + htmls[1]);

    //    setTimeout("dogeneruj()", 200);
            
    //}
    //else {
        $(content).html(HTML.join(''));
    //}

    
    for (var i = 0; i < search_groups.length; i++) {
        if (search_groups[i].zobrazene.length != 0) {
            prvy_blok = i;
            break;
        }
    }

    // Pri zmene filtra preratame aj top a pod podla filtra
    Generate_Top();
    Generate_Noviky();
    GenerateZlavy();


    if (search_param.isEmpty() == false || window.location.href.indexOf("iframe") != -1)
    {
        //root-special-reklama

        var specialHTML = new Array();

        if (typeof (carousel_data) != "undefined") {
            specialHTML.push('<ul id="autoplay">');
            for (var i = 0; i < carousel_data.length; i += 3)
            {
                specialHTML.push('<li data-thumb="https://static.ticketportal.' + lokalita + '/images/banner/transfer/' + carousel_data[i+2] + '">');
                specialHTML.push('        <a href="' + carousel_data[i + 1] + '">');
                specialHTML.push('        <img alt="" src="https://static.ticketportal.' + lokalita + '/images/banner/transfer/' + carousel_data[i + 2] + '" />');
                specialHTML.push('    </a>');
                specialHTML.push('</li>'); 
            }
            specialHTML.push('</ul>');
            specialHTML.push('<script type="text/javascript">aktivuj_carosel();</script>')
        }
        else {
            if (isnull(TOP_predstavenie) && window.location.href.indexOf("iframe") == -1) {
                if (isnull(Specialreklamy[1]) == false)
                    Template_Timeline_Top_Item(Specialreklamy[0][0], Specialreklamy[0][1], lang["lbTopPodujatia"].split(" ")[0], lang["lbTopPodujatia"].split(" ")[1], "fa-star-o", "Top", HTML);
            }
            else
                Template_Timeline_Top_Item_Predstavenie(TOP_predstavenie, lang["lbTopPodujatia"].split(" ")[0], lang["lbTopPodujatia"].split(" ")[1], "fa-star-o", "Top", specialHTML);

            if (isnull(NOVE_predstavenie) && window.location.href.indexOf("iframe") == -1) {
                if (isnull(Specialreklamy[1]) == false)
                    Template_Timeline_Top_Item(Specialreklamy[1][0], Specialreklamy[1][1], lang["lbNoveAkciePredstavenia"].split(" ")[0], lang["lbNoveAkciePredstavenia"].split(" ")[1], "fa-heart-o", "Nove", HTML);
            }
            else
                Template_Timeline_Top_Item_Predstavenie(NOVE_predstavenie, lang["lbNoveAkciePredstavenia"].split(" ")[0], lang["lbNoveAkciePredstavenia"].split(" ")[1], "fa-heart-o", "Nove", specialHTML);

            if (isnull(SUPER_predstavenie) && window.location.href.indexOf("iframe") == -1) {
                if (isnull(Specialreklamy[2]) == false)
                    Template_Timeline_Top_Item(Specialreklamy[2][0], Specialreklamy[2][1], lang["lbSuperCena"].split(" ")[0], lang["lbSuperCena"].split(" ")[1], "fa-thumbs-o-up", "Zlavy", HTML);
            }
            else
                Template_Timeline_Top_Item_Predstavenie(SUPER_predstavenie, lang["lbSuperCena"].split(" ")[0], lang["lbSuperCena"].split(" ")[1], "fa-thumbs-o-up", "Zlavy", specialHTML);
        }
        $("#root-special-reklama").html(specialHTML.join(''));
    }

    generate_timeline_row("timeline_row_" + prvy_blok, true);


    if (item_type == 3 && map_is_init2 == true)
        timeline_map_filter();

    /*if (search_param.isEmpty()) {
        content.innerHTML = default_timeline;
    }
    else {
        var result = search(search_param);
        pocet_podujati = 0;
        content.innerHTML = generate_timeline_prava_strana(result);
        document.getElementById('pocet_podujati').innerHTML = pocet_podujati;
    }*/
    timeline_vygenerovany = true;

    if (typeof (fixnuteMenu) != "undefined" && fixnuteMenu == true) {
        var posun = $('.content-navbar-filter').height();
        $("#timeline").css({
            position: "relative",
            top: posun + "px"
        });

        $('html, body').animate({
            scrollTop: (mapa_otvorena ? numMapa : num)
        }, 50);
    }

    if(typeof(Kalendar_init_reset) != "undefined")
        Kalendar_init_reset();
    //setTimeout(function () { Pace.stop() }, 10000); // pace preloader stop
}

function dogeneruj() {
    $(content).append(htmls[2]);
}

function aktivuj_carosel() {
    var autoplaySlider = $('#autoplay').lightSlider({
        auto: true,
        loop: true,
        pause: 3000,
        slideMove: 2,
        easing: 'cubic-bezier(0.5, 0, 0.5, 2)',
        pauseOnHover: true,
        onBeforeSlide: function (el) {
            $('#current').text(el.getCurrentSlideCount());
        },
        autoWidth: true,
        adaptiveHeight: true,
        onBeforeStart: function () {
            $('#autoplay img').css('width', '200px');
        },
        onSliderLoad: function () {
            $('#autoplay').removeClass('cS-hidden');

        }
    });
}

// Kategoria pre ktoru je slider vygenerovany
var id_kat_slider_gen = null;
function Generate_Slider() {
    var kat_main = null;
    for (var i in search_param.kategorie) {
        var kategoria = search_param.kategorie[i];
        if (kategoria.id_rodic == null) {
            kat_main = kategoria;
            break;
        }
        if (kategoria.id_rodic != null && kategoria.rodic != null) {
            kat_main = kategoria;
            break;
        }
    }

    if (kat_main == null && id_kat_slider_gen == null)  // Ak nie je zvolena ziadna kategoria a slider je vygenerovany pre uvodku tak nemusime nic riesit
        return;

    if (kat_main != null && kat_main.id == id_kat_slider_gen)
        return;

    var buff_slider = new Array();
    var pocet = 0;

    if (kat_main == null && id_kat_slider_gen != null) {
        for (var i in dic_slider) {
            for (var j in dic_slider[i].kategorie) {
                if (j == "undefined" && isnull(buff_slider[i])) {
                    buff_slider[i] = dic_slider[i];
                    pocet++;
                }
            }
        }
    }

    if (kat_main != null) {
        for (var i in dic_slider) {
            for (var j in dic_slider[i].kategorie) {
                if (j != "undefined") {
                    if (dic_slider[i].kategorie[j].id == kat_main.id && isnull(buff_slider[i])) {
                        buff_slider[i] = dic_slider[i];
                        pocet++;
                    }
                }
            }
        }
    }

    if (pocet == 0) {
        for (var i in dic_slider) {
            for (var j in dic_slider[i].kategorie) {
                if (j == "undefined" && isnull(buff_slider[i])) {
                    buff_slider[i] = dic_slider[i];
                    pocet++;
                }
            }
        }
    }

    var buff_slider_random = new Array();
    for (var i in buff_slider)
        buff_slider_random.push(buff_slider[i]);

    buff_slider_random.sort(sort_random);

    var slider_HTML = new Array();
    slider_HTML.push('<div class="owl-carousel owl-theme-slider">');

    for (var i in buff_slider_random) {

        var url = buff_slider_random[i].linka == "" ? absoluteUri + "event/" + buff_slider_random[i].id_podujatie_out + "?target=2" + (window.location.href.indexOf("iframe") != -1 ? "&iframe" : "") : buff_slider_random[i].linka + (buff_slider_random[i].linka.indexOf("?") == -1 ? "?target=2" : "&target=2") + (window.location.href.indexOf("iframe") != -1 ? "&iframe" : "");



        slider_HTML.push('<div class="item">');
        slider_HTML.push('    <a class="" href="' + url + '">');
        if (lokalita == "empik")
            slider_HTML.push('        <img src="' + "https://static.empikbilety.pl/images/tpb2012/" + buff_slider_random[i].obrazok + '" />');
        else
            slider_HTML.push('        <img src="' + "https://static.ticketportal." + lokalita + "/images/tpb2012/" + buff_slider_random[i].obrazok + '" />');
        slider_HTML.push('    </a>');
        slider_HTML.push('</div>');
    }

    slider_HTML.push('</div">');

    $("#slider").html(slider_HTML.join(''));
    /*
    // get owl element
    var owl = $('#slider .owl-carousel');

    // get owl instance from element
    var owlInstance = owl.data('owlCarousel');

    // if instance is existing
    if (owlInstance != null)
        owlInstance.reinit();
*/

    owl = $("#slider .owl-carousel");

    owl.owlCarousel({
        onInitialized: InitMyOwlNav,
        loop: true,
        autoplay: true,
        rewind: true,
        autoplayTimeout: 7000,
        autoplayHoverPause: true,
        navContainer: '#customNav',
        dots: true,
        //dotsContainer: '#customDots',
        margin: 0,
        nav: true,
        responsive: {
            0: {
                items: 1
            },
            600: {
                items: 1
            },
            1000: {
                items: 1
            }
        }
    });

    $('.slider')
        .mouseenter(function () {
            $('.owl-nav-next').fadeIn(200)
            $('.owl-nav-prev').fadeIn(200);
        })
        .mouseleave(function () {
            $('.owl-nav-next').fadeOut(200)
            $('.owl-nav-prev').fadeOut(200);
        })

    id_kat_slider_gen = kat_main == null ? null : kat_main.id;
}

function sort_random(a, b) {
    return Math.random() > 0.5 ? 1 : -1;
}


function InitMyOwlNav() {
    var IconNext = "<i class='fa fa-chevron-right fa-2x fa-fw owl-nav-next'></i>",
        IconPrev = "<i class='fa fa-chevron-left fa-2x fa-fw owl-nav-prev'></i>";

    // vytvori ikony 
    owl.append(IconNext);
    owl.append(IconPrev);

    // az potom naviaze udalosti (next, prev)
    $('.owl-nav-next').on('click', function () { owl.trigger("next.owl.carousel", 1000); });
    $('.owl-nav-prev').on('click', function () { owl.trigger("prev.owl.carousel", 1000); });

    // po naincializovani Owl-Carousela schova sipky
    $('.owl-nav-next').fadeOut(500)
    $('.owl-nav-prev').fadeOut(600);
}


// Vola sa ked sa meni sposob vykreslenia timeline
function Set_item_type(type) {

    // Zapametame si aky typ zobrazenia si zvolil
    if (!isnull(sessionStorage)) {
        sessionStorage.item_type = type;
    }

    item_type = type;

    if (item_type == 0) {
        $('li.control.show-2').addClass('active');
        $('li.control.show-4').removeClass('active');
        $('li.control.show-1').removeClass('active');
        $('li.control.show-3').removeClass('active');
    }

    if (item_type == 1) {
        $('li.control.show-2').removeClass('active');
        $('li.control.show-4').addClass('active');
        $('li.control.show-1').removeClass('active');
        $('li.control.show-3').removeClass('active');
    }

    if (item_type == 2) {
        $('li.control.show-2').removeClass('active');
        $('li.control.show-4').removeClass('active');
        $('li.control.show-1').addClass('active');
        $('li.control.show-3').removeClass('active');
    }

    // Zobrazenie mapy
    if (item_type == 3) {

        /*if ($('#mapa-kamzazabavou_container').hasClass('hidden'))           // Ak je schovane - tak zobrazime a ostatne schovame
        {
            $('#mapa-kamzazabavou_container').removeClass('hidden');
            $('#MainDropdown').removeClass('in');
            $('.content-slider').addClass('hidden');
        }
        else
        {
            $('#mapa-kamzazabavou_container').addClass('hidden');
            $('.content-slider').removeClass('hidden');
            $('#MainDropdown').removeClass('in');
        }*/

        /*$('li.control.show-2').removeClass('active');
        $('li.control.show-4').removeClass('active');
        $('li.control.show-1').removeClass('active');
        $('li.control.show-3').addClass('active');*/
        //$('#mapa-kamzazabavou_container').toggleClass('hidden');
        //$('.content-slider').toggleClass('hidden');
        //$('#MainDropdown').addClass('in');
        //init_map(); premiestnene do ticketmenu.js
    }

    search_param.geo = null;            // pri zmene pohladu vzdy zrusime filter pre geo
    Generate_timeline();

    ZapisUrl();
}


function Generate_Top() {

    var item_type_zaloha = item_type;
    item_type = 1;
    var HTML = new Array();

    var c = 0;

    HTML.push('    <div class="list-group list-group-events">');
    if (search_param.isEmpty() && window.location.href.indexOf("iframe") == -1) {
        for (var i in list_TopPodujatia) {

            var obj = list_TopPodujatia[i];
            var podujatie_out = obj.podujatie_out;
            var podujatie = null;

            for (var ii in podujatie_out.podujatia) {
                podujatie = podujatie_out.podujatia[ii];
                break;
            }

            var predstavenie = null;
            for (var iii in podujatie.predstavenia) {
                predstavenie = podujatie.predstavenia[iii];
                break
            }

            if (!isnull(predstavenie))
                Template_timeline_item2(predstavenie, "", "", HTML, null, null, 3);

            c++;
            if (c >= 12)
                break;
        }
    }
    else {
        var result_podujatie = new Array();
        var isO2Arena = IsO2Arena();

        for (var i = index_posun_timeline; i < search_groups.length; i++)
        {
            var group = search_groups[i];
            for (var j in group.dic_podujatie) {
                var podujatie = group.dic_podujatie[j];
                result_podujatie[podujatie.id] = podujatie;
            }
        }

        var buff_top = new Array();
        var min_skore_in_buff = 0;

        for (var j in result_podujatie) {

            var item = result_podujatie[j];

            if (buff_top.length <= 12) {
                buff_top.push(item);
                if (min_skore_in_buff < item.skore_pocet)
                    min_score_in_buff = item.skore_pocet;
            }
            else {
                if (item.skore_pocet > min_skore_in_buff) {
                    var index = 0;
                    var min = 10000000;

                    var index2 = 0;
                    var min2 = 1000000;

                    for (var k in buff_top) {
                        if (buff_top[k].skore_pocet < min) {
                            index2 = index;
                            min2 = min;

                            min = buff_top[k].skore_pocet;
                            index = k;
                        }
                    }
                    buff_top[index] = item;

                    if (item.skore_pocet < min2)
                        min_skore_in_buff = item.skore_pocet;
                    else
                        min_skore_in_buff = min2;
                }
            }
        }
        

        result_podujatie = buff_top;
        result_podujatie.sort(sort_podujatie_pocet);

        c == 0;
        TOP_predstavenie = null;
        for(var i in result_podujatie)
        {
            var podujatie = result_podujatie[i];

            var predstavenie = null;
            for (var iii in podujatie.predstavenia) {
                if (isnull(search_result[iii]) == false) {
                    if (!(lokalita == "cz" && isO2Arena && podujatie.predstavenia[iii].id_prevadzkovatel != 104)) {
                predstavenie = podujatie.predstavenia[iii];
                        break;
                    }
                }
            }

            if (!isnull(predstavenie)) {
                if (TOP_predstavenie == null) TOP_predstavenie = predstavenie;
                Template_timeline_item2(predstavenie, "", "", HTML, null, null, 3);
            }

            c++;
            if (c == 12)
                break;
        }

    }
    HTML.push('    </div>');

    $('#timeline_top_podujatia').html(HTML.join(''));
    item_type = item_type_zaloha;
}

function sort_podujatie_pocet(A, B) {
    if (A.skore_pocet > B.skore_pocet) return -1;
    if (A.skore_pocet < B.skore_pocet) return 1;
    return 0;
}

function Generate_Noviky() {
    var item_type_zaloha = item_type;
    item_type = 1;
    var HTML = new Array();

    var c = 0;

    HTML.push('    <div class="list-group list-group-events">');
    if (search_param.isEmpty() && window.location.href.indexOf("iframe") == -1) {
        for (var i in list_NoveAkcie) {
            Template_timeline_item2(list_NoveAkcie[i].predstavenie, "", "", HTML, null, null, 4);

            c++;
            if (c >= 12)
                break;
        }
    }
    else {
        var result_predstavenie = new Array();
        var isO2Arena = IsO2Arena();

        for (var i = index_posun_timeline; i < search_groups.length; i++) {
            var group = search_groups[i];
            for (var j in group.dic_predstavenia) {
                if (isnull(search_result[j]) == false) {
                    if (!(lokalita == "cz" && isO2Arena && group.dic_predstavenia[j].id_prevadzkovatel != 104)) {
                var predstavenie = group.dic_predstavenia[j];
                result_predstavenie[predstavenie.id] = predstavenie;
            }
        }
            }
        }

        var buff_top = new Array();
        var min_skore_in_buff = 0;

        for (var j in result_predstavenie) {

            var item = result_predstavenie[j];

            if (buff_top.length <= 12) {
                buff_top.push(item);
                if (min_skore_in_buff < item.zmena)
                    min_score_in_buff = item.zmena;
            }
            else {
                if (item.zmena > min_skore_in_buff) {
                    var index = 0;
                    var min = 10000000;

                    var index2 = 0;
                    var min2 = 1000000;

                    for (var k in buff_top) {
                        if (buff_top[k].zmena < min) {
                            index2 = index;
                            min2 = min;

                            min = buff_top[k].zmena;
                            index = k;
                        }
                    }
                    buff_top[index] = item;

                    if (item.zmena < min2)
                        min_skore_in_buff = item.zmena;
                    else
                        min_skore_in_buff = min2;
                }
            }
        }


        result_predstavenie = buff_top;
        result_predstavenie.sort(sort_predstavenie_zmena);

        NOVE_predstavenie = null;
        for (var i in result_predstavenie) {
            if (NOVE_predstavenie == null)
                NOVE_predstavenie = result_predstavenie[i];
            Template_timeline_item2(result_predstavenie[i], "", "", HTML, null, null, 4);

            c++;
            if (c >= 12)
                break;
        }
    }
    HTML.push('</div>');

    $('#timeline_nove_akcie').html(HTML.join(''));
    item_type = item_type_zaloha;
}

function sort_predstavenie_zmena(A, B) {
    if (A.zmena > B.zmena) return -1;
    if (A.zmena < B.zmena) return 1;
    return 0;
}

function GenerateZlavy() {
    var item_type_zaloha = item_type;
    item_type = 1;
    var HTML = new Array();

    var c = 0;

    HTML.push('    <div class="list-group list-group-events">');
    if (search_param.isEmpty() && window.location.href.indexOf("iframe") == -1) {

        var pocet_typ_1 = 0;
        var pocet_typ_2 = 0;
        var pocet_typ_3 = 0;

        for (var i in list_ZlavyAkcie) {
            if (!isnull(list_ZlavyAkcie[i].predstavenie)) {
                if (list_ZlavyAkcie[i].zaciatok > new Date()) {

                    if (list_ZlavyAkcie[i].typ == 1) pocet_typ_1++;
                    if (list_ZlavyAkcie[i].typ == 2) pocet_typ_2++;
                    if (list_ZlavyAkcie[i].typ == 3) pocet_typ_3++;

                    if (pocet_typ_1 > 4) continue;
                    if (pocet_typ_2 > 4) continue;
                    if (pocet_typ_3 > 8) continue;

                    Template_timeline_item2(list_ZlavyAkcie[i].predstavenie, "", "", HTML, list_ZlavyAkcie[i].nazov, (list_ZlavyAkcie[i].typ == 3 ? (lang["Zlava"] + ":&nbsp;") : "") + (list_ZlavyAkcie[i].typ == 1 ? (lang["lDobraCena"]) : "") + list_ZlavyAkcie[i].popis, 5);
                }
            }
            c++;
            if (c >= 12)
                break;
        }
    }
    else {
        var result_predstavenie = new Array()
        var isO2Arena = IsO2Arena();

        for (var i = index_posun_timeline; i < search_groups.length; i++) {
            var group = search_groups[i];
            for (var j in group.dic_predstavenia) {
                if (isnull(search_result[j]) == false) {
                    if (!(lokalita == "cz" && isO2Arena && group.dic_predstavenia[j].id_prevadzkovatel != 104)) {
                var predstavenie = group.dic_predstavenia[j];
                result_predstavenie[predstavenie.id] = predstavenie;
            }
                }
            }
        }

        if (isO2Arena)
            result_predstavenie[-2147481972] = dic_predstavenie[-2147481972];

        SUPER_predstavenie = null;

        if (isO2Arena) {
            if (SUPER_predstavenie == null)
                SUPER_predstavenie = dic_predstavenie[-2147481972];

            Template_timeline_item2(dic_predstavenie[-2147481972], "", "", HTML, "", "", 5);
        }

        for (var i in list_ZlavyAkcie) {
            if (!isnull(list_ZlavyAkcie[i].predstavenie)) {
                if (list_ZlavyAkcie[i].zaciatok > new Date()) {

                    if (isnull(result_predstavenie[list_ZlavyAkcie[i].predstavenie.id]))
                        continue;

                    if (list_ZlavyAkcie[i].typ == 1) pocet_typ_1++;
                    if (list_ZlavyAkcie[i].typ == 2) pocet_typ_2++;
                    if (list_ZlavyAkcie[i].typ == 3) pocet_typ_3++;

                    if (pocet_typ_1 > 4) continue;
                    if (pocet_typ_2 > 4) continue;
                    if (pocet_typ_3 > 8) continue;

                    if (SUPER_predstavenie == null)
                        SUPER_predstavenie = list_ZlavyAkcie[i].predstavenie;

                    Template_timeline_item2(list_ZlavyAkcie[i].predstavenie, "", "", HTML, list_ZlavyAkcie[i].nazov, (list_ZlavyAkcie[i].typ == 3 ? (lang["Zlava"] + ":&nbsp;") : "") + (list_ZlavyAkcie[i].typ == 1 ? (lang["lDobraCena"]) : "") + list_ZlavyAkcie[i].popis, 5);
                }
            }
            c++;
            if (c >= 12)
                break;
        }
    }
    HTML.push('    </div>');

    $('#timeline_zlavy-akcie').html(HTML.join(''));
    item_type = item_type_zaloha;

    if (c == 0)
        $(".linkZlavy").addClass("hidden");
}

var TOP_predstavenie = null;
var NOVE_predstavenie = null;
var SUPER_predstavenie = null;

function IsO2Arena() {
    var isO2Arena = true;

    if (lokalita == "cz") {
        if (isnull(search_param.kategorie) == false) {
            for (var i in search_param.kategorie) {
                if (i != 102)
                    isO2Arena = false;
            }
        }
        else {
            isO2Arena = false;
        }
    } else {
        isO2Arena = false;
    }

    return isO2Arena;
}
// end region


// Pridanie filtra do timeline, do search_param vlozi filter zmeni DOM menu a prekresli timeline
// typ 'podkategoria' - prida/odobere podkategoriu, id je idcko hlavnej kategorie, prehlada sa select hlavnej kategorie a zisti sa ktore prvy su oznacene



//*****************************
//*** Region ovladanie menu ***
//*****************************

function Nastav_kategoriu_url(typ, id) {
    var url = "";
    if (typ == "nic")
        url = "/";
    if (typ == "kategoria")
        url = "/" + toTSASimple(dic_kategoria[id].nazov.toLowerCase()).replace(" ", "-").replace("&", "-");
    if (typ == "podkategoria")
        url = "/" + toTSASimple(dic_kategoria[id].rodic.nazov.toLowerCase()).replace(" ", "-").replace("&", "-") + "/" + toTSASimple(dic_kategoria[id].nazov.toLowerCase()).replace(" ", "-").replace("&", "-");

    if (typeof (window.history.pushState) != "undefined")
        window.history.replaceState('object or string', document.title, url);
}


function Pridaj_filter(event, typ, id, blokuj) {

    cz_default_mounth = false;

    if (typeof (IsHomePage) != "undefined" && IsHomePage == true) {

        // Pridavame kategoriu hlavnu z menu
        if (typ == "kategoria") {
            var kategoria = dic_kategoria[id];

            NastavHome();               // Zrusi taby top, zlava, nove.. naskroluje hore a zobrazi start timeline

            // Ak sa vo filtry nachadza kategoria, alebo potomkovia kategorie, tak kategoriu odoberame
            // Odobrat treba aj potomkov
            var odober = false;
            if (search_param.kategorie != null) {
                for (var i in search_param.kategorie) {
                    if (search_param.kategorie[i].id == id || (search_param.kategorie[i].rodic != null && search_param.kategorie[i].rodic.id == id))
                        odober = true;
                }
            }
            if (odober) {
                Odober_filter(typ, id);
                return;
            }

            $('.btns-kategorie .active').removeClass('active');

            // Takto pridavat sa mozu len hlavne kategorie
            if (kategoria.id_rodic == null) {

                search_param.setKategorie(kategoria);           // Pridame kategoriu do vyhladavacieho parametra

                var HTML = [];
                //HTML.push('<label class="btn btn-default active"><input type="checkbox" autocomplete="off" checked>Vsetky</label>');

                var buff_kategorie = new Array();
                for (var i in kategoria.potomkovia) {
                    if (kategoria.potomkovia[i].pocet_podujati != 0) {
                        buff_kategorie.push(kategoria.potomkovia[i]);
                    }
                }

                buff_kategorie.sort(kategoria_sort_by_pocet_podujati);

                //pocet_podujati

                for (var i in buff_kategorie) {
                    HTML.push('<label id="subkategoria_' + buff_kategorie[i].id + '" class="btn btn-subcategory" onclick="Pridaj_filter(null, \'podkategoria\',' + buff_kategorie[i].id + ')"><input type="checkbox" autocomplete="off">' + buff_kategorie[i].nazov + '</label>');
                }

                $('#filter_subkategorie').html(HTML.join(''));
                Nastav_kategoriu_url(typ, id);
            }
        }

        // Pridavame podkategoriu
        if (typ == "podkategoria") {
            var kategoria = dic_kategoria[id];

            if (search_param.hasKategoria(kategoria)) {
                Odober_filter(typ, id);
                return;
            }

            // Ak vo vyhladavacom parametry sa nachadza aj hlavna kategoria tak tu odstranime
            if (search_param.hasKategoria(kategoria.rodic))
                search_param.removeKategoria(kategoria.rodic);

            if (isnull(kategoria.rodic) == false && isnull(kategoria.rodic.rodic) == false)
            {
                if (search_param.hasKategoria(kategoria.rodic.rodic))
                    search_param.removeKategoria(kategoria.rodic.rodic);
            }

            search_param.addKategorie(kategoria);
            Nastav_kategoriu_url(typ, id);
        }

        if (typ == "mesto") {
            var mesto = dic_mesta[id];
            var kraj = mesto.okres.kraj;

            var odober = false;
            for (var i in search_param.mesta) {
                if (search_param.mesta[i].id == id)
                    odober = true;
            }
            if (odober) {
                Odober_filter(typ, id);
                return;
            }

            search_param.addMesta(mesto);
        }

        if (typ == "kraj") {
            var kraj = dic_kraje[id];

            var odober = false;
            for (var i in search_param.kraje) {
                if (search_param.kraje[i].id == id)
                    odober = true;
            }
            if (odober) {
                Odober_filter(typ, id);
                return;
            }
            search_param.addKraje(kraj);
        }

        // Pridavame datum do filtra, ten moze byt len jeden
        if (typ == 'datum') {

            /*var container = $('#home_navs_filter_container');
            if (container.hasClass('hidden'))
                container.removeClass('hidden');

            if (!($('#home_navs_filter_title').hasClass('hidden')))
                $('#home_navs_filter_title').addClass('hidden');
                
            if (document.getElementById('li_datum') == null) {
                var li = document.createElement('li');
                li.setAttribute('id', 'li_datum');
                HTML = '<a href="javascript:;" id="a_datum" class="btn btn-default btn-block">' + lang["od"] + " " + DateToString(id, false) + '</a>';
                li.innerHTML = HTML;
                container[0].appendChild(li);
            }
            else {
                document.getElementById('a_datum').innerText = lang["od"] + " " + DateToString(id, false);
            }*/

            search_param.datum_od = id;
        }

        if (typ == 'datum_do') {
            search_param.datum_do = id;
        }

        if (typeof (blokuj) != 'undefined' && blokuj != null && blokuj == true)
            return;

        search_param.geo = null;
        Zobraz_Info_filter();
        Generate_timeline(search_param);
        return;
    }
    else {
        if (typ == "kategoria" || typ == "podkategoria") {
            var kategoria = dic_kategoria[id];
            search_param.setKategorie(kategoria);
        }
        if (typ == "mesto") {
            var mesto = dic_mesta[id];
            search_param.addMesta(mesto);
        }
        if (typ == 'datum') {
            search_param.datum_od = id;
        }
        ZapametajFilter(true);
        window.location = absoluteUri + '/Home';

    }
}

function Pridaj_filter_dnes() {
    var start = Date_remove_hour(new Date());
    var end = (new Date(start.getTime() + 24 * 3600 * 1000 - 1000));

    Pridaj_filter(null, "datum", start);
    Pridaj_filter(null, "datum_do", end);
}
function Pridaj_filter_tento_tyzden() {
    var start = Date_remove_hour(new Date());
    var den_v_tyzdni = start.getDay() == 0 ? 7 : start.getDay();
    var tyzden_end = (new Date(start.getTime() + (8 - den_v_tyzdni) * 24 * 3600 * 1000 - 1000));

    Pridaj_filter(null, "datum", start);
    Pridaj_filter(null, "datum_do", tyzden_end);

}
function Pridaj_filter_tento_mesiac() {
    var start = Date_remove_hour(new Date());
    var a = new Date(start.getMonth() != 11 ? start.getFullYear() : start.getFullYear() + 1, start.getMonth() != 11 ? start.getMonth() + 1 : 0, 1, 0, 0, 0, 0);
    var tento_mesiac_end = (new Date(a.getTime() - 1000));

    Pridaj_filter(null, "datum", start);
    Pridaj_filter(null, "datum_do", tento_mesiac_end);
}

var t_filterMenu_open = false;

function gen_tl_after_menu_open() {
    if (t_filterMenu_open == true)
        Generate_timeline(search_param);
    else
        setTimeout("gen_tl_after_menu_open()", 200);
}

function gen_tl_after_menu_close() {
    if (t_filterMenu_open == false)
        Generate_timeline(search_param);
    else
        setTimeout("gen_tl_after_menu_open()", 200);
}

function NastavFilter_afterMenuClose() {
    if (t_filterMenu_open == false)
        NastavFilter(null, null, null);
    else
        setTimeout("NastavFilter_afterMenuClose()", 200);
}


function Odober_filter(typ, id) {
    if (typ == "kategoria" || typ == "podkategoria") {
        var kategoria = dic_kategoria[id];



        // Ak odoberame hlavnu kategoriu tak odoberieme vsetky aj potomkov
        if (kategoria.id_rodic == null) {
            search_param.kategorie = null;
            $("#kat_menu2_" + kategoria.id).blur();             // v menu dva zrusi focus nad hlavnou polozkov ak sa ta zrusi s filtra
            Nastav_kategoriu_url("nic", 0);
        }
        else {
            search_param.removeKategoria(kategoria);

            // Ak odoberame potomka a odobrali sme posledneho, pridame hlavnu kategoriu
            if (search_param.kategorie == null) {
                search_param.setKategorie(kategoria.rodic);
                Nastav_kategoriu_url("kategoria", kategoria.rodic.id);
            }
            else {
                Nastav_kategoriu_url("podkategoria", search_param.kategorie[search_param.kategorie.length - 1].id);
            }
        }
    }

    if (typ == "mesto") {
        var mesto = dic_mesta[id];
        search_param.removeMesto(mesto);
    }

    if (typ == "kraj") {
        var kraj = dic_kraje[id];
        search_param.removeKraj(kraj);
    }

    if (typ == "datum") {
        search_param.datum_od = null;
    }

    search_param.geo = null;
    Zobraz_Info_filter();
    setTimeout('Generate_timeline(search_param);', 200);
}

function Zobraz_Info_filter(bfilterMenuColapse) {

    if (isnull(bfilterMenuColapse))
        bfilterMenuColapse = true;

    if (search_param.isEmpty()) {
        //$("#filterMenu").addClass("hidden");
        // $("#filter_subkategorie").addClass("hidden");
        //$("#filterMenu").collapse("hide")
    }
    else {
        //$("#filterMenu").removeClass("hidden");
        //$("#filterMenu").collapse("show")
        var Nazvy = [];

        if (search_param.kategorie != null) {
            for (var i in search_param.kategorie) {
                if (lokalita == "cz" && search_param.kategorie[i].id == 102)
                    Nazvy.push(search_param.kategorie[i].nazov.replace("2", "<span class='subO2'>2</span>"));
                else
                    Nazvy.push(search_param.kategorie[i].nazov);
            }

            //$("#filter_subkategorie").removeClass("hidden");
        }
        else {
            //$("#filter_subkategorie").addClass("hidden");
        }

        if (search_param.kraje != null) {
            for (var i in search_param.kraje)
                Nazvy.push(search_param.kraje[i].nazov);
        }

        if (search_param.mesta != null) {
            for (var i in search_param.mesta)
                Nazvy.push(search_param.mesta[i].nazov);
        }

        if (search_param.datum_od != null) {
            if (search_param.datum_do == null)
                Nazvy.push(DateToString(search_param.datum_od, false));
            else {
                var s_start = DateToString(search_param.datum_od, false);
                var s_end = DateToString(search_param.datum_do, false);

                if (s_start == s_end)
                    Nazvy.push(s_start);
                else
                    Nazvy.push(s_start + '&nbsp;-&nbsp;' + s_end);
            }
        }
        if (bfilterMenuColapse)
            if (typeof ($('#filterMenu').collapse) != "undefined")
                $('#filterMenu').collapse('show');

        $("#filter_message").html(Nazvy.join(', ') + '<a href="javascript:;" id="btnClose" class="btnClose" onClick="goTop()"><i class="fa fa-times"></i><span class="label-btnClose text-nowrap">' + lang["lbZrusitVyber"] + '</span></a>');
        //nav navbar-nav navbar-right
    }

    //ZapametajFilter();
}

function goTop() {
    //$('.logo').scrollTo();
    cz_default_mounth = false;
    NastavHome();
    ZapisUrl();
    Nastav_kategoriu_url("nic", 0);
    $('#filter_subkategorie').html("");
    $("#mobile-menu-kraje label.active").removeClass("active");
    $("#kalendar-mobile-search-ikon").addClass("inverse");
    $("#kalendar-text").html(lang["KalendarFilterTextDefault"]);
    $("#filterMenu").removeClass("collapsing");
    $("#filterMenu").addClass("collapse");
}

function NastavFilter(kategoria, mesto, datum, premaz, blokuj, bfilterMenuColapse) {
    if (isnull(bfilterMenuColapse))
        bfilterMenuColapse = true;

    // Ked sa meni filter v menu, tak sa to prepne na timeline (home)
    ZapametajMenuPodBanerom();

    if (kategoria == null && mesto == null && datum == null) {
        search_param.kraje = null;
        /*var animationEnd = "webkitAnimationStart mozAnimationStart MSAnimationStart oanimationstart animationstart";

        $(".content-slider").addClass(animationEnd)
        $(".content-slider").removeClass("hidden-slider");
        $(".content-slider").show();
        $("#MainDropdown").removeClass("in");*/

        //zmazane zatial neviem ze preco SetDefaultMenu();
    }


    if (isnull(premaz) || premaz == true) {
        search_param.kategorie = null;
        search_param.mesta = null;
        search_param.datum_od = null;
        search_param.datum_do = null;

        $('.btns-kategorie .active').removeClass('active');
        $('.btns-mesta .active').removeClass('active');
        //Lubo $('#MainDropdown').collapse('toggle')
        //Lubo $('#mapa').collapse('hide')
    }

    if (kategoria != null) {

        kategoria = dic_kategoria[kategoria];

        if (kategoria.id_rodic == null) {
            Pridaj_filter(null, 'kategoria', kategoria.id, true);
        }
        else {
            Pridaj_filter(null, 'kategoria', kategoria.id_rodic, true);
            Pridaj_filter(null, 'podkategoria', kategoria.id, true);
        }
    }

    if (mesto != null) {

        mesto = dic_mesta[mesto];
        Pridaj_filter(null, 'mesto', mesto.id, true);
        $('#filter_subkategorie').html("");
    }

    if (datum != null) {
        if (typeof (datum) == 'string')
            datum = new Date(Number(datum));

        Pridaj_filter(null, 'datum', datum, true);
        $('#filter_subkategorie').html("");
    }

    search_param.geo = null;

    if (isnull(blokuj) || blokuj == false) {
        Zobraz_Info_filter(bfilterMenuColapse);
        setTimeout('Generate_timeline(search_param);', 200);    // Vygenerujeme timeline
        return;
    }
}

function Generuj_vsetky_kraje() {
    var HTML = new Array();

    for (var i in dic_kraje) {
        var Kraj = dic_kraje[i];
        HTML.push("<div class='col-xs-12'><label class='btn btn-default btn-sm btn-block' onclick='javascript:nezavry=true;Pridaj_filter(null, \"kraj\"," + Kraj.id + ");nezavry=false;$(\"#filterMenu\").collapse(\"show\");'><input id='mobile_item_kraj_" + Kraj.id + "' type='checkbox' autocomplete='off' onclick='javascript:$(\"#mobile_item_kraj_" + Kraj.id + "\").toggleClass(\"active\")'> " + Kraj.nazov + "</label></div>");
        //HTML.push("<li class='col-xs-12'><a id='mobile_item_kraj_" + Kraj.id + "' class='btn btn-default btn-block btn-sm' href='javascript:Pridaj_filter(null, \"kraj\"," + Kraj.id + ");$(\"#filterMenu\").collapse(\"show\");$(\"#mobile_item_kraj_" + Kraj.id + "\").toggleClass(\"active\")'>" + Kraj.nazov + "</a></li>");
    }
    $('#mobile-menu-kraje').html(HTML.join(''));
}

function Generuj_vsetky_mesta() {
    var HTML = new Array();

    for (var i in dic_kraje) {
        var Kraj = dic_kraje[i];
        HTML.push('<div class="row">');
        HTML.push('<h4 class="title title-dropdown-menu">' + Kraj.nazov + '</h4>');

        for (var id_okres in Kraj.okresi) {
            var okres = Kraj.okresi[id_okres];

            for (var id_mesto in okres.mesta) {
                var mesto = okres.mesta[id_mesto];

                HTML.push('<div class="col-md-4 col-xs-12 btns-mesta">');
                HTML.push('<button class="btn btn-primary btn-sm btn-block" onclick="javascript:Pridaj_filter(event, \'mesto\', ' + mesto.id + ');" type="button" data-toggle="button" aria-pressed="false" autocomplete="off">' + mesto.nazov + '</button>');
                HTML.push('</div>');
            }
        }

        HTML.push('</div>');
    }
    $('#zoznam_miest').html(HTML.join(''));
}

function kategoria_sort_by_pocet_podujati(a, b) {
    if (a.pocet_podujati > b.pocet_podujati) return -1;
    if (a.pocet_podujati < b.pocet_podujati) return 1;
    return 0;
}


var __hash__ = "";
function AddParamHash(paramName, value) {
    if (__hash__ == "" || __hash__ == "#")
        __hash__ = paramName + "=" + value;
    else
        __hash__ = __hash__ + "&" + paramName + "=" + value;
}

function ZapisUrl(scroll) {
    return;
    __hash__ = "";

    var sKategorie = new Array();
    for (var i in search_param.kategorie)
        sKategorie.push(search_param.kategorie[i].id)

    if (sKategorie.length != 0)
        AddParamHash("category", sKategorie.join(','));

    if (!isnull(search_param.datum_od))
        AddParamHash("date", search_param.datum_od.getTime());

    if (item_type != 0)
        AddParamHash("type", item_type);

    if (typeof (sessionStorage.menuPodBanerom) != "undefined" && sessionStorage.menuPodBanerom != "undefined" && sessionStorage.menuPodBanerom != "linkHome")
        AddParamHash("menu", sessionStorage.menuPodBanerom);

    location.hash = __hash__;

    ga('set', 'page', window.location.pathname + window.location.hash);
    ga('send', 'pageview');

    if (typeof (scroll) != "undefined" && scroll == false)
        return;

    if (typeof (fixnuteMenu) != "undefined" && fixnuteMenu == true) {
        var posun = $('.content-navbar-filter').height();
        $("#timeline").css({
            position: "relative",
            top: posun + "px"
        });

        $('html, body').animate({
            scrollTop: (mapa_otvorena ? numMapa : num)
        }, 500);
    }
    else {
        $('html, body').animate({
            scrollTop: 0
        }, 500);
    }
}


// Nastavenie filtra ulozi do localStorage aby sa dali obnovit po prichode z inej stranky
function ZapametajFilter(otvorMenu) {
    return;

    if (typeof (sessionStorage) !== "undefined") {

        var sKategorie = new Array();
        for (var i in search_param.kategorie)
            sKategorie.push(search_param.kategorie[i].id)

        sessionStorage.SearchParamKategorie = sKategorie.join(',');

        var sMesta = new Array();
        for (var i in search_param.mesta)
            sMesta.push(search_param.mesta[i].id);

        sessionStorage.SearchParamMesta = sMesta.join(',');
        sessionStorage.SearchParamDatumOd = isnull(search_param.datum_od) ? "null" : search_param.datum_od.getTime();
        sessionStorage.SearchParamDatumZapis = (new Date()).getTime();

        if (typeof (otvorMenu) != "undefined" && otvorMenu == true) {
            sessionStorage.SearchParamOpenMenu = true;
        }
        else {
            sessionStorage.SearchParamOpenMenu = false;
        }

        ZapisUrl();
    }
}

window.ticketMenuReady = false;

function ObnovFilter() {
    if (typeof (sessionStorage) !== "undefined") {
        if (!isnull(sessionStorage.SearchParamDatumZapis)) {


            if (typeof (sessionStorage.SearchParamOpenMenu) != "undefined" && sessionStorage.SearchParamOpenMenu == "true") {
                //$("#MainDropdown").addClass("in");
                //$('.content-slider').addClass('hidden');
            }

            var buff_filtre = new Array();

            var sKategorie = sessionStorage.SearchParamKategorie.split(',');

            for (var i in sKategorie)
                if (sKategorie[i] != "")
                    buff_filtre.push("K|" + sKategorie[i]);

            var sMesta = sessionStorage.SearchParamMesta.split(',');

            for (var i in sMesta)
                if (sMesta[i] != "")
                    buff_filtre.push("M|" + sMesta[i]);

            if (sessionStorage.SearchParamDatumOd != 'null')
                buff_filtre.push("D|" + sessionStorage.SearchParamDatumOd);

            for (var i = 0; i < buff_filtre.length; i++) {
                var premaz = (i == 0 ? true : false);
                var blokuj = (i == buff_filtre.length - 1 ? false : true);

                var data = buff_filtre[i].split('|');

                if (data[0] == "K") {
                    var kategoria = dic_kategoria[Number(data[1])];


                    if (kategoria.id_rodic == null) {
                        Pridaj_filter(null, "kategoria", kategoria.id);
                        $("#kat_menu2_" + kategoria.id).parent().addClass("active");
                    }
                    else {
                        if (kategoria.id_rodic != null && search_param.kategorie == null) {
                            Pridaj_filter(event, 'kategoria', kategoria.id_rodic);
                            $("#kat_menu2_" + kategoria.id_rodic).parent().addClass("active");
                        }
                        Pridaj_filter(null, 'podkategoria', kategoria.id);
                        $("#subkategoria_" + kategoria.id).addClass("active");
                    }

                    /*NastavFilter(Number(data[1]), null, null, premaz, blokuj);
                    $("#kat_menu2_" + Number(data[1])).parent().addClass("active");*/
                }
                if (data[0] == "M")
                    NastavFilter(null, Number(data[1]), null, premaz, blokuj);
                if (data[0] == "D")
                    NastavFilter(null, null, data[1], premaz, blokuj, false);

                /*$(document).ready(function () {
                    $('#filterMenu').collapse('show');
                });*/

                //setTimeout("$('#filterMenu').collapse('show');", 2000);

            }

            if (buff_filtre.length != 0)
                openMenuAfterTicketMenuReady();
        }
    }
}

function openMenuAfterTicketMenuReady() {
    if (window.ticketMenuReady == true) {
        setTimeout("$('#filterMenu').collapse('show');", 500);
    }
    else {
        setTimeout("openMenuAfterTicketMenuReady()", 200);
    }
}

function ZapametajMenuPodBanerom(id) {

    if (mapa_otvorena) {
        if (id == "Zlavy" || id == "Nove" || id == "Top") {
            $('html, body').animate({
                scrollTop: $("#" + id.toLowerCase()).offset().top
            }, 2000);
        }
    }

    if (id == "Zlavy" || id == "Nove" || id == "Top") {
        $("#top-container").removeClass("hidden");
        if (id == "Top") {
            $('#zlavy, #nove').addClass('hidden');
            animuj("#top", "fadeInRight", true);
        }
        if (id == "Nove") {
            $('#zlavy, #top').addClass('hidden');
            animuj("#nove", "fadeInRight", true);
        }
        if (id == "Zlavy") {
            $('#top, #nove').addClass('hidden');
            animuj("#zlavy", "fadeInRight", true);
        }
    } else {
        $("#top-container").addClass("hidden");
    }


    if (!isnull(sessionStorage)) {

        /*if (isnull(id))
            sessionStorage.menuPodBanerom = $("ul.nav.navbar-nav.nav1 li.active a").attr("id");
        else
            sessionStorage.menuPodBanerom = id;*/

        if (!isnull(id))
            sessionStorage.menuPodBanerom = id;
    }

    ZapisUrl(false);
}

function ObnovMenuPodBanerom() {
    if (!isnull(sessionStorage)) {

        if (!isnull(sessionStorage.menuPodBanerom)) {

            if (sessionStorage.menuPodBanerom == "linkHome")
                return;

            if (sessionStorage.menuPodBanerom.indexOf('link') != -1) {
                $("ul.nav.navbar-nav.nav1 li.active").removeClass('active');
                $("#" + sessionStorage.menuPodBanerom).parent().addClass("active");

                $("#" + sessionStorage.menuPodBanerom.replace("link", "").toLowerCase()).removeClass("hidden");
            }
            else {
                $("#" + sessionStorage.menuPodBanerom.toLowerCase()).removeClass("hidden");
            }
        }
    }
}

// Skryje taby top, zlavy, super cena a aktivu tab timeline
function NastavHome() {
    $("#nove").addClass("hidden");
    $("#top").addClass("hidden");
    $("#zlavy").addClass("hidden");
    //$("ul.nav.navbar-nav.nav1 li.active").removeClass('active');
    $("#linkHome").parent().addClass("active");

    if (!isnull(sessionStorage)) {
        sessionStorage.menuPodBanerom = "linkHome";
    }
}

// end region

//*******************
//*** region mapa ***
//*******************

var map = null;                                             // Objekt mapy
var infoWindowOpened = null;                                // Ukazovatel na informacne okno na mape ktore je prave otvorene
var zoznamMarkerov = new Array();                           // Zoznam vsetkych znaciek na mape
var map_is_init = false;                                    // Info ci je mapa inicializovana
var map_is_init2 = false;                                   // Ci je mapa inicializovana kompletne
var markerClusterer = null;


function init_map() {

    if (map_is_init == false) {
        map_is_init = true;

        var script = document.createElement('script');
        script.type = 'text/javascript';
        script.src = googleAPIScript + '&callback=initialize';          // Parameter zabezpeci ze gogole skript bude fungovat, aj ked bol vlozeny asynchronne
        document.body.appendChild(script);

        var script2 = document.createElement('script');
        script2.type = 'text/javascript';
        script2.src = absoluteUri + 'Scripts/MarkerClusterer.js'; // 'http://google-maps-utility-library-v3.googlecode.com/svn/tags/markerclustererplus/2.1.2/src/markerclusterer.js';
        document.body.appendChild(script2);

        init_map2();
    }

}

function init_map2() {

    if (typeof (google) != 'undefined') {                               // Cakame kym sa google skripty nenacitaju
        if (typeof (google.maps.LatLng) != 'undefined') {

            var mapOptions = {
                zoom: 11,
                scrollwheel: false,
                scaleControl: true,
                zoomControl: true,
                zoomControlOptions: {
                    style: google.maps.ZoomControlStyle.LARGE
                },
                center: new google.maps.LatLng(48.1458923, 17.107137299999977), // Bratislava
                styles: [{ "featureType": "administrative", "elementType": "labels.text.fill", "stylers": [{ "color": "#444444" }] }, { "featureType": "landscape", "elementType": "all", "stylers": [{ "color": "#f2f2f2" }] }, { "featureType": "poi", "elementType": "all", "stylers": [{ "visibility": "off" }] }, { "featureType": "poi.attraction", "elementType": "labels.text.stroke", "stylers": [{ "saturation": "0" }] }, { "featureType": "road", "elementType": "all", "stylers": [{ "saturation": -100 }, { "lightness": 45 }] }, { "featureType": "road.highway", "elementType": "all", "stylers": [{ "visibility": "simplified" }] }, { "featureType": "road.arterial", "elementType": "labels.icon", "stylers": [{ "visibility": "off" }] }, { "featureType": "transit", "elementType": "all", "stylers": [{ "visibility": "off" }] }, { "featureType": "water", "elementType": "all", "stylers": [{ "color": "#00ab94" }, { "visibility": "on" }] }]
                // [{ "featureType": "all", "stylers": [{ "saturation": 0 }, { "hue": "#e7ecf0" }] }, { "featureType": "road", "stylers": [{ "saturation": -70 }] }, { "featureType": "transit", "stylers": [{ "visibility": "off" }] }, { "featureType": "poi", "stylers": [{ "visibility": "off" }] }, { "featureType": "water", "stylers": [{ "visibility": "simplified" }, { "saturation": -60 }] }]
            };
            var mapElement = document.getElementById('mapa-kamzazabavou');
            map = new google.maps.Map(mapElement, mapOptions);


            // Ked klikne na mapu, tak povolime zoomivanie koleckom
            google.maps.event.addListener(map, 'click', function (event) {
                this.setOptions({ scrollwheel: true });
            });

            // ked klikne mimo tak zakazeme
            $(document).click(function (evt) {
                var target = $(evt.target);
                var isMap = false;

                while (true) {
                    if (target.attr('id') == "mapa-kamzazabavou") {
                        isMap = true;
                        break;
                    }
                    if (target[0] == document)
                        break;

                    target = target.parent();

                    if (target.length == 0)
                        return;
                }

                if (isMap == false)
                    map.setOptions({ scrollwheel: false });
            });


            for (var id_hladisko in dic_hladisko) {
                var hladisko = dic_hladisko[id_hladisko];
                if (hladisko.LAT != null && hladisko.LON != null && hladisko.LAT != 0) {

                    var pocet = 0;
                    for (var i in hladisko.predstavenia)
                        pocet = pocet + 1;

                    var icon = {
                        url: absoluteUri + "/svgcircleikon.ashx?number=" + pocet,
                        anchor: new google.maps.Point(15, 15),
                        scaledSize: new google.maps.Size(38, 38)
                    }

                    var marker = new google.maps.Marker({
                        position: new google.maps.LatLng(hladisko.LAT, hladisko.LON),
                        //map: map,
                        animation: google.maps.Animation.DROP,
                        title: hladisko.nazov,
                        icon: icon
                    });

                    marker["Hladisko_id"] = hladisko.id;
                    marker["pocet"] = pocet;
                    hladisko["marker"] = marker;
                    zoznamMarkerov.push(marker);

                    google.maps.event.addListener(marker, 'click', function () {
                        map.setOptions({ scrollwheel: true })
                        timeline_marker_click(this);
                    });
                }
            }

            markerClusterer = new MarkerClusterer(map, zoznamMarkerov, {
                maxZoom: 10,
                gridSize: 40,
                maxZoom: 14,
                calculator: timeline_mapClustered_calculator
            });

            centruj(zoznamMarkerov);
            map_is_init2 = true;

            prvu_zmenu_vynechaj = true;
            google.maps.event.addListener(map, 'bounds_changed', function () {
                timeline_map_bounds_changed();
            });

            timeline_map_filter();
        }
        else {
            setTimeout('init_map2();', 250);
        }
    }
    else {
        setTimeout('init_map2();', 250);
    }
}

// Zavola sa po kliknuti na ikonu hladiska na mape
function timeline_marker_click(marker) {
    var hladisko = dic_hladisko[marker.Hladisko_id];
    var infowindow = null;

    if (typeof (hladisko.infowindow) != "undefined" && hladisko.infowindow != null) {
        infowindow = hladisko.infowindow;
    }
    else {

        var content = "<div style='margin:10px'>";
        content += "<span style='font-size:12px; font-weight:bold'>" + hladisko.nazov + "</span>";
        content += "&nbsp;&nbsp;<a href='" + linkIframe(absoluteUri + "Venue/" + hladisko.id) + "'>" + lang["btnDetail"] + "</a><br/>";

        if (lokalita == "empik")
            content += "<span style='font-weight:bold'>" + lang["Adresa"] + ":&nbsp;</span><span>" + hladisko.adresa + ", " + hladisko.mesto.nazov + "</span><br/>";
        else
            content += "<span style='font-weight:bold'>" + lang["Adresa"] + ":&nbsp;</span><span>" + hladisko.adresa + ", " + hladisko.psc + " " + hladisko.mesto.nazov + "</span><br/>";

        if (hladisko.www != null && hladisko.www.length > 3)
            content += "<span style='font-weight:bold'>www:</span><a href='" + (hladisko.www.indexOf('http') == -1 ? 'http://' + hladisko.www : hladisko.www) + "' target='_blank'>" + hladisko.www + "</a><br>";
        if (lokalita != "empik")
            content += "<br/><b>" + lang["Podujatia"] + "</b>&nbsp;&nbsp;&nbsp;(Počet predstavení)<br/>";
        else
            content += "<br/><b>" + lang["Podujatia"] + "</b><br/>";

        var buff_podujatia = new Array();

        for (var i in hladisko.predstavenia) {
            var predstavenie = hladisko.predstavenia[i];
            var podujatie = predstavenie.podujatie;

            if (isnull(buff_podujatia[podujatie.id_podujatie_out]))
                buff_podujatia[podujatie.id_podujatie_out] = dic_podujatie_out[podujatie.id_podujatie_out];
        }

        for (var i in buff_podujatia) {
            var podujatie = buff_podujatia[i];
            var c = 0;

            for (var ii in podujatie.podujatia)
                for (var iii in podujatie.podujatia[ii].predstavenia)
                    if (podujatie.podujatia[ii].predstavenia[iii].hladisko.id == hladisko.id)
                        c++;

            content += "<a href='" + absoluteUri + "event/" + podujatie.id + (window.location.href.indexOf("iframe") != -1 ? "?iframe" : "") + "'>" + podujatie.nazov + " (" + c + ")</a><br/>";
        }

        content += "</div>";

        infowindow = new google.maps.InfoWindow({
            content: content
        });
        hladisko["infowindow"] = infowindow;
    }

    if (infoWindowOpened != null)
        infoWindowOpened.close();

    infowindow.open(map, marker);
    infoWindowOpened = infowindow;
}

// Vyratava cislo, ktore sa ukaze v ikone clustra na mape
// Rata ako pocet predstaveni pre hladiska ktore su v clastry
function timeline_mapClustered_calculator(markers, numStyles) {
    var index = 0;
    var title = "";
    var count = markers.length.toString();

    var dv = count;
    while (dv !== 0) {
        dv = parseInt(dv / 10, 10);
        index++;
    }

    var p = 0;
    for (var i in markers) {
        marker = markers[i];
        p = p + marker.pocet;
    }

    index = Math.min(index, numStyles);
    return {
        text: p,
        index: index,
        title: title
    };
};


function Gmap_center_H(id_selling) {
    var selling = dic_selling[id_selling];
    map.setCenter(new google.maps.LatLng(selling.LAT, selling.LON));
    map.setZoom(16);
}

function createBoundsForMarkers(markers) {
    var bounds = new google.maps.LatLngBounds();
    $.each(markers, function () {
        bounds.extend(this.getPosition());
    });
    return bounds;
}

function getBoundsZoomLevel(bounds, mapDim) {
    var WORLD_DIM = { height: 256, width: 256 };
    var ZOOM_MAX = 16;                                              // Viac sa to nepriblizi, aj keby bol len jeden marker

    function latRad(lat) {
        var sin = Math.sin(lat * Math.PI / 180);
        var radX2 = Math.log((1 + sin) / (1 - sin)) / 2;
        return Math.max(Math.min(radX2, Math.PI), -Math.PI) / 2;
    }

    function zoom(mapPx, worldPx, fraction) {
        return Math.floor(Math.log(mapPx / worldPx / fraction) / Math.LN2);
    }

    var ne = bounds.getNorthEast();
    var sw = bounds.getSouthWest();

    var latFraction = (latRad(ne.lat()) - latRad(sw.lat())) / Math.PI;

    var lngDiff = ne.lng() - sw.lng();
    var lngFraction = ((lngDiff < 0) ? (lngDiff + 360) : lngDiff) / 360;

    var latZoom = zoom(mapDim.height, WORLD_DIM.height, latFraction);
    var lngZoom = zoom(mapDim.width, WORLD_DIM.width, lngFraction);

    return Math.min(latZoom, lngZoom, ZOOM_MAX);
}

// Vstupom je pole obsahujuce znacky na mape
// Funkcia vycentruje mapu tak, aby bolo vidiet vsetky puntiky
function centruj(markers) {

    // Zistime velkost mapy
    var $mapDiv = $('#mapa-kamzazabavou');

    var mapDim = {
        height: $mapDiv.height(),
        width: $mapDiv.width()
    }

    var bounds = createBoundsForMarkers(markers);
    map.setCenter(bounds.getCenter());
    map.setZoom(getBoundsZoomLevel(bounds, mapDim));
}


function timeline_map_filter() {

    for (var i in zoznamMarkerov)
        zoznamMarkerov[i].setMap(null);

    markerClusterer.clearMarkers();
    zoznamMarkerov = [];

    var buff_hladiska = new Array();
    for (var i in search_result) {
        var predstavenie = search_result[i];
        if (isnull(buff_hladiska[predstavenie.hladisko.id]))
            buff_hladiska[predstavenie.hladisko.id] = predstavenie.hladisko;
    }

    for (var i in buff_hladiska)
        if (!(isnull(buff_hladiska[i].marker)))
            zoznamMarkerov.push(buff_hladiska[i].marker);

    markerClusterer = new MarkerClusterer(map, zoznamMarkerov, {
        maxZoom: 10,
        gridSize: 40,
        maxZoom: 14,
        calculator: timeline_mapClustered_calculator
    });

    centruj(zoznamMarkerov);
}

var prvu_zmenu_vynechaj = true;                     // mapa generuje udalost aj hned po nacitani, tuto udalost vynechame
var bound_change = false;                           // Vlajka ktoru nastavime na tru, ak sa pohlo mapov
var bound_change_time = null;                       // Zapiseme si cas, kedy nastala udalost

function timeline_map_bounds_changed() {

    if (prvu_zmenu_vynechaj == true) {
        prvu_zmenu_vynechaj = false;
        return;
    }

    bound_change = true;
    bound_change_time = new Date();
}


function check_bound_change() {
    if (bound_change == true) {

        if ((new Date()).getTime() - bound_change_time.getTime() > 500) {               // Musi aspon pol sekundu nehybat mapou

            var bound = map.getBounds();
            var geo = {
                minLAT: bound.getSouthWest().lat(),
                maxLAT: bound.getNorthEast().lat(),
                minLON: bound.getSouthWest().lng(),
                maxLON: bound.getNorthEast().lng()
            };

            search_param.setGeo(geo);

            map_is_init2 = false;
            Generate_timeline();
            map_is_init2 = true;

            bound_change = false;
        }
    }

    setTimeout("check_bound_change();", 200);
}

check_bound_change();

// end region

$(document).ready(function () {

    HashSpracuj();
});


$(window).bind('hashchange', function (e) {
    HashSpracuj();
});

function HashSpracuj()
{
    var change = false;

    if (window.location.hash.toLowerCase().indexOf("#menu=top") != -1) {
        ZapametajMenuPodBanerom('Top');
        change = true;
    }
    if (window.location.hash.toLowerCase().indexOf("#menu=nove") != -1) {
        ZapametajMenuPodBanerom('Nove');
        change = true;
    }
    if (window.location.hash.toLowerCase().indexOf("#menu=zlavy") != -1) {
        ZapametajMenuPodBanerom('Zlavy');
        change = true;
    }

    if (change) {
        $('html, body').animate({
            scrollTop: $(".panel.panel-blok.super-nove-top").offset().top - 200
        }, 2000);
    }
}

function ZmazLogoHref() {
    $("h1.logo a.navbar-brand").attr("href", "javascript:;");
    $("span.logo a.navbar-brand").attr("href", "javascript:;");

    if (__isIframe__ == false) {
        $("h1.logo a.navbar-brand").click(function () {
            NastavFilter(null, null, null);
            ZapametajMenuPodBanerom();
            window.location = absoluteUri;
        });
        $("span.logo a.navbar-brand").click(function () {
            NastavFilter(null, null, null);
            ZapametajMenuPodBanerom();
            window.location = absoluteUri;
        });
    }
}

setTimeout("ZmazLogoHref();", 500);



function fill_pickup_stat(id_root_doom, pickupID, title, name, value, placeholder, readOnly, active) {
    if (isempty(value))
        readOnly = false;

    var HTML = new Array();
    HTML.push('    <label for="' + name + '">' + title + '</label>');
    HTML.push('    <select id="' + name + '" name="' + name + '" class="form-control"' + (readOnly ? 'readonly="readonly"' : '') + '" >');

    var langSK = userLang == "SK";

    for (var i in staty) {
        var stat = staty[i];
        var OK = false;
        for (var ii in stat[2]) {
            if (stat[2][ii] == pickupID)
                OK = true;
        }
        if (OK)
            HTML.push('<option ' + (value == (langSK ? stat[0] : stat[1]) ? ' selected="selected" ' : '') + ' value="' + (langSK ? stat[0] : stat[1]) + '">' + (langSK ? stat[0] : stat[1]) + '</option>');
    }

    HTML.push('    </select>');
    $("#" + id_root_doom).html(HTML.join(''));
}


var last_alert = null;
function bootstrapMessage(title, message, type, icon, close_last, time2) {
    if (close_last && last_alert != null)
        last_alert.close();

    var time = 4000;

    if (typeof (time2) == "undefined" || time2 == null)
        time2 = 7000;

    var settings = {};
    if (isnull(title) == false)
        settings["title"] = '<strong>' + title + '</strong>';
    if (isnull(message) == false)
        settings["message"] = message;
    if (isnull(icon) == false)
        settings["icon"] = message;

    last_alert = $.notify(settings, {
        type: type,
        animate: {
            enter: 'animated fadeInUp',
            exit: 'animated fadeOutRight'
        },
        placement: {
            from: "top",
            align: "center"
        },
        offset: 0,
        spacing: 10,
        timer: time,
        autoHideDelay: time2,
        delay: time2,
        z_index: 10000,
    });
}
function alert(message) {
    bootstrapMessage(null, message, "danger", null, true);
}
function alert_info(title, message, time2, col) {

    var template = '<div data-notify="container" class="col-xs-11 col-sm-' + col + ' alert alert-{0}" role="alert"><button type="button" aria-hidden="true" class="close" data-notify="dismiss">&times;</button><span data-notify="icon"></span> <span data-notify="title">{1}</span> <span data-notify="message">{2}</span><div class="progress" data-notify="progressbar"><div class="progress-bar progress-bar-{0}" role="progressbar" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100" style="width: 0%;"></div></div><a href="{3}" target="{4}" data-notify="url"></a></div>';
    if (typeof (last_alert) != "undefined" && last_alert != null)
        last_alert.close();

    var time = 4000;

    if (typeof (time2) == "undefined" || time2 == null)
        time2 = 7000;

    var settings = {};
    if (isnull(title) == false)
        settings["title"] = '<strong>' + title + '</strong>';
    if (isnull(message) == false)
        settings["message"] = message;

    last_alert = $.notify(settings, {
        type: "info",
        animate: {
            enter: 'animated fadeInUp',
            exit: 'animated fadeOutRight'
        },
        placement: {
            from: "top",
            align: "center"
        },
        offset: 0,
        spacing: 10,
        timer: time,
        autoHideDelay: time2,
        delay: time2,
        z_index: 10000,
        template: template
    });

}


var staty = [['Slovensko', 'Slovakia', [7, 13]],
['Francúzsko', 'France', [7, 14]],
['Taliansko', 'Italy', [7, 14]],
['Maďarsko', 'Hungary', [7, 14]],
['Česká republika', 'Czech Republic', [7, 14]],
['Nemecko', 'Germany', [7, 14]],
['Poľsko', 'Poland', [7, 14]],
['Veľká Británia', 'United Kingdom', [7, 15]],
['Dánsko', 'Denmark', [7, 15]],
['Holansko', 'Nederland', [7, 15]],
['Švédsko', 'Sweden', [7, 16]],
['Rusko', 'Russian Fed.', [7, 16]],
['Bielorusko', 'White Russia', [7, 16]],
['Lotyšsko', 'Latvia', [7, 16]],
['Švajčiarsko', 'Switzerland', [7, 16]],
['Fínsko', 'Finland', [7, 16]],
['Írsko', 'Ireland', [7, 16]],
['Nórsko', 'Norway', [7, 16]],
['Kanada', 'Canada', [7, 16]],
['USA', 'USA', [7, 16]],
['Japonsko', 'Japan', [7, 16]],
['Rakúsko', 'Austria', [7, 18]],
['Ukrajina', 'Ukraine', [7, 19]]]
