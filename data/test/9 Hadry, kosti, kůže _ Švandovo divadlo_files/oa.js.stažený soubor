window.owl = window.owl || {};

(function (_owl) {
//COOKIES
    function deleteCookie(cname) {
        setCookie(cname, '', 0);
    }

    function setCookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
    }

    function getCookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
            var c = ca[i];
            while (c.charAt(0) == ' ') {
                c = c.substring(1);
            }
            if (c.indexOf(name) == 0) {
                return c.substring(name.length, c.length);
            }
        }
        return "";
    }

//HTTP
    var send = function (url, method, data) {
        var dataForSend = JSON.stringify(data);
        var async = true;
        var request = new XMLHttpRequest();

        request.onload = function () {
            var status = request.status;
            var data = request.responseText;

            if (CONFIG.DEBUG) {
                console.log('Response from server:');
                console.log(status);
                console.log(data);
                console.log('---------------------------------------------------');
            }

        };

        request.open(method, url, async);
        request.setRequestHeader("Content-Type", "application/x-www-form-urlencoded;charset=UTF-8");
        request.setRequestHeader("Accept", "application/json");

        if (CONFIG.DEBUG) {
            console.log('Send request:');
            console.log('url: ' + url);
            console.log('method: ' + method);
            console.log('data: ' + dataForSend);
            console.log('---------------------------------------------------');
        }

        request.send(dataForSend);
    };

    var post = function (url, data) {
        send(url, 'POST', data);
    };

    var get = function (url, data) {
        send(url, 'GET', data);
    };
    
    var printWarning = function(msg){
        if(CONFIG.WARNINGS){
            console.log('Owlcure Analytics warning. ' + msg + '. Please visit documentation page http://www.owlcure.com/oa.html for proper working.');
        }        
    };
    
    var printError = function(e){
        if(CONFIG.ERRORS){
            console.log('Owlcure Analytics error.');
            console.log(e);
            console.log('Please visit documentation page http://www.owlcure.com/analytics for proper working.');
        }  
    };
    
    //HASH
    var generateHash = function () {
        var now = new Date().getTime();
        var now = now.toString();
        var base = "";
        var uid = "";

        for (var i = now.length; i < 16; i++) {
            base += "1";
        }
        uid = base + "" + now + r() + r() + r() + r();

        return uid;
    };
    
    var tryIdentifyUser = function(){
        if(h){          //user was identified
            return;
        } else if(anonyme){   //identify user by anonyme hash
            deleteCookie('oa_anonyme_hash');
            setCookie('oa_hash', anonyme, CONFIG.COOKIE_EXP);
        }
    };
 
//GET PARAMETERS
    var $_GET = {};
    document.location.search.replace(/\??(?:([^=]+)=([^&]*)&?)/g, function () {
        function decode(s) {
            return decodeURIComponent(s.split("+").join(" "));
        }
        $_GET[decode(arguments[1])] = decode(arguments[2]);
    });

    var r = function () {
        return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);
    };


//LOCALS
    var h = '';             //hash
    var a = '';             //part attribute
    var anonyme = '';       //anonyme hash

    var page = document.location.origin + '' + document.location.pathname;

    var CONFIG = {
        API:            'https://owlcure.eu/analytics/action',
        DEBUG:          false,
        COOKIE_EXP:     36500,
        WARNINGS:       true,
        ERRORS:         true      
    };    
    
    
    var MAPPINGS = {        //client: server
        PARAMS: {
            item_id:    'oareference',  
            order_id:   'oareference',
            email:      'email',
            price:      'oavalue',
            quantity:   'oavalue'   
        },
        FUNCTIONS: {
            'cart:add':         'cart',
            'cart:remove':      'cart-remove',
            'cart:changeqty':   'cart-changeqty',
            'cart:clear':       'cart-clear',
            'order:purchase':   'conversion',
            'newsletter:add':   'newsletter-add',
            'user:identify':    'user-identify'
        }
    };
    


//FIND HASH
    if ($_GET["h"]) {
        h = $_GET["h"];
        setCookie('oa_hash', $_GET["h"], CONFIG.COOKIE_EXP);
    } else if (getCookie('oa_hash')) {
        h = getCookie('oa_hash');
        setCookie('oa_hash', h, CONFIG.COOKIE_EXP);
    }

//FIND PART_ATT
    if ($_GET["a"]) {
        a = $_GET["a"];
    }

//GET ANONYME HASH
    anonyme = getCookie('oa_anonyme_hash');

//CHECK VISIT VISIT
    var data = {
        action: 'visit',
        url: page
    };


    if (h) {   // by hash         
        data.hash = h;
        if (a) {
            data.a = a;     //add part attribute
        }
        if (anonyme) {
            data.anonyme = anonyme; //add anonyme hash
            deleteCookie('oa_anonyme_hash');
        }
    } else {    // by anonyme hash
        if (anonyme) {    // anonyme exists
            data.anonyme = anonyme;
        } else {        // create anonyme
            anonyme = generateHash();
            setCookie('oa_anonyme_hash', anonyme, CONFIG.COOKIE_EXP);
            data.anonyme = anonyme;
        }
    }
//SEND VISIT
    post(CONFIG.API, data);

//CREATE MAIN FNC
    _owl.fly = function (action, params) {
        try {                  
            //check calling
            if (!action) {
                printWarning('Missing variable ACTION in function FLY');
                return;
            }
            
            if(!MAPPINGS.FUNCTIONS.hasOwnProperty(action)){
                printWarning('ACTION ' + action + ' is not allowed');
                return;
            }             

            //create fly data object
            var fly_body = {
                action: MAPPINGS.FUNCTIONS[action]
            };
            
            //check parameters
            if(params){
                for (var key in params) {
                    if(MAPPINGS.PARAMS[key]){
                        fly_body[MAPPINGS.PARAMS[key]] = params[key];  //apply mapping
                    } else {
                        printWarning('attribute ' + key + ' is invalid.');
                    }
                    
                }
            }
            
            //add url
            if(page) { fly_body.url = page; }
            
            //add hashes
            if (data.hash) { fly_body.hash = data.hash; }            
            if (data.anonyme) { fly_body.anonyme = data.anonyme; } 
            
            if(action == 'newsletter:add' || action == 'user:identify'){
                tryIdentifyUser();
            }
            
            /*
            console.log('POST:');
            console.log(fly_body);
            */
            post(CONFIG.API, fly_body);
            
        } catch (e) {   
            printError(e);
        }
        
    };

//SET ACTIONS ON PAGE
    var elements = document.querySelectorAll('[data-oaaction]');
    elements = Array.prototype.slice.call(elements);    //Chrome, Mozilla, Edge, I.E. 11, Safari, Opera

    for (var i = 0; i < elements.length; i++) {
        var oaction = elements[i].getAttribute('data-oaaction');

        switch (oaction) {
            case 'cart':
            case 'conversion':
                elements[i].addEventListener('click', function () {
                    var oavalue = this.getAttribute('data-oavalue');
                    var oareference = this.getAttribute('data-oareference');

                    var data = {
                        action: oaction,
                        url: page
                    };

                    if (h) {
                        data.hash = h;
                    }
                    if (anonyme) {
                        data.anonyme = anonyme;
                    }
                    if (oavalue) {
                        data.oavalue = oavalue;
                    }
                    if (oareference) {
                        data.oareference = oareference;
                    }

                    post(CONFIG.API, data);
                });
                break;

            default:
                break;
        }
    }
})(window.owl);
